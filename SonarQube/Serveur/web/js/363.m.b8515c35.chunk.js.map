{"version":3,"sources":["webpack:///./src/main/js/apps/overview/components/EmptyOverview.tsx"],"names":["EmptyOverview","props","branchLike","branchLikes","component","currentUser","hasAnalyses","qualifier","Application","className","variant","hasBranches","length","hasBadBranchConfig","some","branch","showWarning","showTutorial","warning","defaultMessage","id","values","branchName","branchType","state"],"mappings":"6FAAA,iJAuCO,SAASA,EAAcC,GAC5B,MAAM,WAAEC,EAAF,YAAcC,EAAd,UAA2BC,EAA3B,YAAsCC,EAAtC,YAAmDC,GAAgBL,EAEzE,GAAIG,EAAUG,YAAc,IAAmBC,YAC7C,OACE,uBAAKC,UAAU,qBACb,gBAAC,QAAK,CAACC,QAAQ,WAAW,oBAAU,0CAGnC,IAAK,YAASR,GACnB,OAAO,KAGT,MAAMS,EAAcR,EAAYS,OAAS,EACnCC,EACJV,EAAYS,OAAS,GACG,IAAvBT,EAAYS,QAAgBT,EAAYW,KAAKC,GAAU,YAASA,IAE7DC,EAAc,YAAad,IAAeS,EAC1CM,EAAe,YAAaf,KAAgBS,IAAgBL,EAElE,IAAIY,EAwBJ,OAtBEA,EADE,YAAWb,IAAgBW,GAAeH,EAE1C,gBAAC,mBAAgB,CACfM,eAAgB,oBAAU,6DAC1BC,GAAG,4DACHC,OAAQ,CACNC,WAAY,YAAyBpB,GACrCqB,WAAY,oBAAU,2BAM1B,gBAAC,mBAAgB,CACfJ,eAAgB,oBAAU,2CAC1BC,GAAG,0CACHC,OAAQ,CACNC,WAAY,YAAyBpB,MAO3C,uBAAKO,UAAU,qBACZ,YAAWJ,GACV,gCACGW,GAAe,gBAAC,QAAK,CAACN,QAAQ,WAAWQ,GACzCD,GAAgB,gBAAC,IAAiB,CAACb,UAAWA,EAAWC,YAAaA,KAGzE,gBAAC,QAAK,CAACK,QAAQ,WAAWQ,IAUnB,sBAJUM,IAAD,CACtBnB,YAAa,yBAAemB,KAGf,CAAyBxB","file":"js/363.m.b8515c35.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport TutorialSelection from '../../../components/tutorials/TutorialSelection';\nimport { getBranchLikeDisplayName, isBranch, isMainBranch } from '../../../helpers/branch-like';\nimport { isLoggedIn } from '../../../helpers/users';\nimport { getCurrentUser, Store } from '../../../store/rootReducer';\nimport { BranchLike } from '../../../types/branch-like';\nimport { ComponentQualifier } from '../../../types/component';\n\ninterface Props {\n  branchLike?: BranchLike;\n  branchLikes: BranchLike[];\n  component: T.Component;\n  currentUser: T.CurrentUser;\n  hasAnalyses?: boolean;\n}\n\nexport function EmptyOverview(props: Props) {\n  const { branchLike, branchLikes, component, currentUser, hasAnalyses } = props;\n\n  if (component.qualifier === ComponentQualifier.Application) {\n    return (\n      <div className=\"page page-limited\">\n        <Alert variant=\"warning\">{translate('provisioning.no_analysis.application')}</Alert>\n      </div>\n    );\n  } else if (!isBranch(branchLike)) {\n    return null;\n  }\n\n  const hasBranches = branchLikes.length > 1;\n  const hasBadBranchConfig =\n    branchLikes.length > 2 ||\n    (branchLikes.length === 2 && branchLikes.some(branch => isBranch(branch)));\n\n  const showWarning = isMainBranch(branchLike) && hasBranches;\n  const showTutorial = isMainBranch(branchLike) && !hasBranches && !hasAnalyses;\n\n  let warning;\n  if (isLoggedIn(currentUser) && showWarning && hasBadBranchConfig) {\n    warning = (\n      <FormattedMessage\n        defaultMessage={translate('provisioning.no_analysis_on_main_branch.bad_configuration')}\n        id=\"provisioning.no_analysis_on_main_branch.bad_configuration\"\n        values={{\n          branchName: getBranchLikeDisplayName(branchLike),\n          branchType: translate('branches.main_branch')\n        }}\n      />\n    );\n  } else {\n    warning = (\n      <FormattedMessage\n        defaultMessage={translate('provisioning.no_analysis_on_main_branch')}\n        id=\"provisioning.no_analysis_on_main_branch\"\n        values={{\n          branchName: getBranchLikeDisplayName(branchLike)\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className=\"page page-limited\">\n      {isLoggedIn(currentUser) ? (\n        <>\n          {showWarning && <Alert variant=\"warning\">{warning}</Alert>}\n          {showTutorial && <TutorialSelection component={component} currentUser={currentUser} />}\n        </>\n      ) : (\n        <Alert variant=\"warning\">{warning}</Alert>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: Store) => ({\n  currentUser: getCurrentUser(state)\n});\n\nexport default connect(mapStateToProps)(EmptyOverview);\n"],"sourceRoot":""}