{"version":3,"sources":["webpack:///./src/main/js/apps/application-console/BranchSelectItem.tsx","webpack:///./src/main/js/apps/application-console/ProjectBranchRow.tsx","webpack:///./src/main/js/apps/application-console/CreateBranchForm.tsx","webpack:///./src/main/js/apps/application-console/BranchRowActions.tsx","webpack:///./src/main/js/apps/application-console/ApplicationProjectBranch.tsx","webpack:///./src/main/js/apps/application-console/ApplicationBranches.tsx","webpack:///./src/main/js/apps/application-console/ApplicationProjects.tsx","webpack:///./src/main/js/apps/application-console/EditForm.tsx","webpack:///./src/main/js/apps/application-console/ApplicationConsoleAppRenderer.tsx","webpack:///./src/main/js/apps/application-console/ApplicationConsoleApp.tsx","webpack:///./src/main/js/app/utils/addGlobalSuccessMessage.ts","webpack:///./src/main/js/api/application.ts","webpack:///./src/main/js/api/branches.ts"],"names":["handleMouseDown","event","preventDefault","stopPropagation","props","onSelect","option","handleMouseEnter","onFocus","handleMouseMove","isFocused","render","this","overlay","label","placement","className","onMouseDown","onMouseEnter","onMouseMove","role","node","mounted","state","loading","parseBranches","branches","b","map","branch","value","name","isMain","setCurrentTarget","target","handleChange","onChange","project","key","setState","selectedBranch","handleOpen","onOpen","length","then","branchesResult","componentDidMount","componentWillUnmount","checked","onCheck","onClose","options","enabled","id","qualifier","clearable","disabled","optionComponent","searchable","currentSelect","projects","selected","selectedBranches","stopLoading","canSubmit","hasUnselectedBranches","projectKey","includes","handleInputChange","currentTarget","handleFormSubmit","projectKeys","projectBranches","p","application","projectBranch","onUpdate","onCreate","handleProjectCheck","handleBranchChange","handleSelectorClose","classList","add","handleSelectorDirection","selectNode","elementCount","modalTop","getBoundingClientRect","top","modalHeight","offsetHeight","maxSelectHeight","Math","min","remove","renderProjectsList","undefined","enabledProjects","filter","enabledProjectsKey","forEach","isUpdating","header","onSubmit","size","onCloseClick","onFormSubmit","submitting","ref","htmlFor","autoFocus","maxLength","type","onClick","handleDelete","onUpdateBranches","handleUpdate","newBranchName","handleCloseForm","handleUpdateClick","confirmButtonText","isDestructive","modalBody","modalHeader","onConfirm","ActionsDropdown","destructive","ApplicationProjectBranch","creating","handleCreate","handleCreateFormClose","handleCreateClick","canCreateBranches","some","Boolean","renderBranches","createEnable","title","loadApplicationProjects","searchParams","lastSearchParams","applicationKey","page","ps","pageSize","q","query","fetchProjects","data","prevState","more","dealWithProjects","selectedProjects","disabledProjects","needToReload","projectsTotalCount","paging","total","newSelectedProjects","handleSelect","find","onAddProject","handleUnselect","onRemoveProject","renderElement","SelectList","Selected","componentDidUpdate","prevProps","disabledElements","elements","elementsTotalCount","All","onSearch","onUnselect","selectedElements","withPaging","handleNameChange","handleDescriptionChange","description","onEdit","ApplicationConsoleAppRenderer","editing","setEditing","onRefresh","updateApplicationState","buildNewFields","fetchDetails","component","handleRefreshClick","addGlobalSuccessMessage","handleEdit","handleAddProject","prevApp","handleRemoveProject","handleUpdateBranches","message","dispatch","getApplicationLeak","r","getApplicationDetails","addApplicationBranch","catch","updateApplicationBranch","deleteApplicationBranch","getApplicationProjects","addProjectToApplication","removeProjectFromApplication","refreshApplication","createApplication","visibility","deleteApplication","editApplication","getBranches","getPullRequests","deleteBranch","deletePullRequest","renameBranch","excludeBranchFromPurge","branchName","excluded"],"mappings":"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","file":"js/344.1613385090031.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\n\nexport interface Option {\n  label: string;\n  type: string;\n  value: string;\n}\n\ninterface Props {\n  option: Option;\n  children?: React.ReactNode;\n  className?: string;\n  isFocused?: boolean;\n  onFocus: (option: Option, event: React.SyntheticEvent<HTMLElement>) => void;\n  onSelect: (option: Option, event: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nexport default class BranchSelectItem extends React.PureComponent<Props> {\n  handleMouseDown = (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    this.props.onSelect(this.props.option, event);\n  };\n\n  handleMouseEnter = (event: React.MouseEvent<HTMLElement>) => {\n    this.props.onFocus(this.props.option, event);\n  };\n\n  handleMouseMove = (event: React.MouseEvent<HTMLElement>) => {\n    if (this.props.isFocused) {\n      return;\n    }\n    this.props.onFocus(this.props.option, event);\n  };\n\n  render() {\n    const { option } = this.props;\n    return (\n      <Tooltip overlay={option.label} placement=\"left\">\n        <div\n          className={this.props.className}\n          onMouseDown={this.handleMouseDown}\n          onMouseEnter={this.handleMouseEnter}\n          onMouseMove={this.handleMouseMove}\n          role=\"listitem\">\n          <div>\n            <BranchIcon className=\"little-spacer-right\" />\n            {option.label}\n          </div>\n        </div>\n      </Tooltip>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { orderBy } from 'lodash';\nimport * as React from 'react';\nimport Checkbox from 'sonar-ui-common/components/controls/Checkbox';\nimport Select from 'sonar-ui-common/components/controls/Select';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport QualifierIcon from 'sonar-ui-common/components/icons/QualifierIcon';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { getBranches } from '../../api/branches';\nimport { ApplicationProject } from '../../types/application';\nimport BranchSelectItem from './BranchSelectItem';\nimport { ApplicationBranch, SelectBranchOption } from './utils';\n\ninterface Props {\n  checked: boolean;\n  onChange: (projectKey: string, branch: SelectBranchOption) => void;\n  onCheck: (checked: boolean, id?: string) => void;\n  onClose: () => void;\n  onOpen: (selectNode: HTMLElement, elementCount: number) => void;\n  project: ApplicationProject;\n}\n\ninterface State {\n  branches?: SelectBranchOption[];\n  loading: boolean;\n  selectedBranch?: SelectBranchOption;\n}\n\nexport default class ProjectBranchRow extends React.PureComponent<Props, State> {\n  node?: HTMLElement | null = null;\n  mounted = false;\n  state: State = { loading: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  parseBranches = (branches: Array<ApplicationBranch>) => {\n    return orderBy(branches, [b => b.isMain, b => b.name]).map(branch => {\n      return { value: branch.name, label: branch.name, isMain: branch.isMain };\n    });\n  };\n\n  setCurrentTarget = (event: React.FocusEvent<HTMLInputElement>) => {\n    this.node = event.target;\n  };\n\n  handleChange = (value: SelectBranchOption) => {\n    this.props.onChange(this.props.project.key, value);\n    this.setState({ selectedBranch: value });\n  };\n\n  handleOpen = () => {\n    if (this.state.branches && this.node) {\n      this.props.onOpen(this.node, this.state.branches.length);\n      return;\n    }\n\n    const { project } = this.props;\n    this.setState({ loading: true });\n    getBranches(project.key).then(\n      branchesResult => {\n        const branches = this.parseBranches(branchesResult);\n        if (this.node) {\n          this.props.onOpen(this.node, branches.length);\n        }\n        if (this.mounted) {\n          this.setState({ branches, loading: false });\n        }\n      },\n      () => {\n        /* Fail silently*/\n      }\n    );\n  };\n\n  render() {\n    const { checked, onCheck, onClose, project } = this.props;\n    const options = this.state.branches || [\n      { value: project.branch, label: project.branch, isMain: project.isMain }\n    ];\n    const value = project.enabled\n      ? this.state.selectedBranch || project.branch\n      : this.state.selectedBranch;\n    return (\n      <tr key={project.key}>\n        <td className=\"text-center\">\n          <Checkbox checked={checked} id={project.key} onCheck={onCheck} />\n        </td>\n        <td className=\"nowrap hide-overflow branch-name-row\">\n          <Tooltip overlay={project.name}>\n            <span>\n              <QualifierIcon qualifier=\"TRK\" /> {project.name}\n            </span>\n          </Tooltip>\n        </td>\n        <td>\n          <Select\n            className=\"width100\"\n            clearable={false}\n            disabled={!checked}\n            onChange={this.handleChange}\n            onClose={onClose}\n            onFocus={this.setCurrentTarget}\n            onOpen={this.handleOpen}\n            optionComponent={BranchSelectItem}\n            options={options}\n            searchable={false}\n            value={value}\n          />\n          <DeferredSpinner className=\"project-branch-row-spinner\" loading={this.state.loading} />\n        </td>\n      </tr>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { some, without } from 'lodash';\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport SimpleModal from 'sonar-ui-common/components/controls/SimpleModal';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  addApplicationBranch,\n  getApplicationDetails,\n  updateApplicationBranch\n} from '../../api/application';\nimport { Application, ApplicationProject } from '../../types/application';\nimport ProjectBranchRow from './ProjectBranchRow';\nimport { ApplicationBranch, SelectBranchOption } from './utils';\n\ninterface Props {\n  application: Application;\n  branch?: ApplicationBranch;\n  enabledProjectsKey: string[];\n  onClose: () => void;\n  onCreate?: (branch: ApplicationBranch) => void;\n  onUpdate?: (name: string) => void;\n}\n\ninterface BranchesList {\n  [name: string]: SelectBranchOption | null;\n}\n\ninterface State {\n  loading: boolean;\n  name: string;\n  projects: ApplicationProject[];\n  selected: string[];\n  selectedBranches: BranchesList;\n}\n\nconst MAX_PROJECTS_HEIGHT = 220;\nconst PROJECT_HEIGHT = 22;\nexport default class CreateBranchForm extends React.PureComponent<Props, State> {\n  mounted = false;\n  node?: HTMLElement | null = null;\n  currentSelect?: HTMLElement | null = null;\n\n  state: State = {\n    loading: false,\n    name: '',\n    projects: [],\n    selected: [],\n    selectedBranches: {}\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    const { application } = this.props;\n    const branch = this.props.branch ? this.props.branch.name : undefined;\n    this.setState({ loading: true });\n    getApplicationDetails(application.key, branch).then(\n      ({ projects }) => {\n        if (this.mounted) {\n          const enabledProjects = projects.filter(p =>\n            this.props.enabledProjectsKey.includes(p.key)\n          );\n          const selected = enabledProjects.filter(p => p.selected).map(p => p.key);\n          const selectedBranches: BranchesList = {};\n          enabledProjects.forEach(p => {\n            if (!p.enabled) {\n              selectedBranches[p.key] = null;\n            } else {\n              selectedBranches[p.key] = {\n                value: p.branch || '',\n                label: p.branch || '',\n                isMain: p.isMain || false\n              };\n            }\n          });\n          this.setState({\n            name: branch || '',\n            selected,\n            loading: false,\n            projects: enabledProjects,\n            selectedBranches\n          });\n        }\n      },\n      () => {\n        this.props.onClose();\n      }\n    );\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  stopLoading = () => {\n    if (this.mounted) {\n      this.setState({ loading: false });\n    }\n  };\n\n  canSubmit = () => {\n    const hasUnselectedBranches = some(this.state.selectedBranches, (branch, projectKey) => {\n      return !branch && this.state.selected.includes(projectKey);\n    });\n    return (\n      !this.state.loading &&\n      this.state.name.length > 0 &&\n      !hasUnselectedBranches &&\n      this.state.selected.length > 0\n    );\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handleFormSubmit = async () => {\n    const projectKeys = this.state.selected;\n\n    const projectBranches = projectKeys.map(p => {\n      const branch = this.state.selectedBranches[p];\n      return !branch || branch.isMain ? '' : branch.value;\n    });\n\n    if (this.props.branch) {\n      await updateApplicationBranch({\n        application: this.props.application.key,\n        branch: this.props.branch.name,\n        name: this.state.name,\n        project: projectKeys,\n        projectBranch: projectBranches\n      });\n      if (this.props.onUpdate) {\n        this.props.onUpdate(this.state.name);\n      }\n    } else {\n      await addApplicationBranch({\n        application: this.props.application.key,\n        branch: this.state.name,\n        project: projectKeys,\n        projectBranch: projectBranches\n      });\n      if (this.props.onCreate) {\n        this.props.onCreate({ name: this.state.name, isMain: false });\n      }\n    }\n    this.props.onClose();\n  };\n\n  handleProjectCheck = (checked: boolean, key: string) => {\n    this.setState(state => ({\n      selected: checked ? [...state.selected, key] : without(state.selected, key)\n    }));\n  };\n\n  handleBranchChange = (projectKey: string, branch: SelectBranchOption) => {\n    this.setState(state => ({\n      selectedBranches: { ...state.selectedBranches, [projectKey]: branch }\n    }));\n  };\n\n  handleSelectorClose = () => {\n    if (this.node) {\n      this.node.classList.add('selector-hidden');\n    }\n  };\n\n  handleSelectorDirection = (selectNode: HTMLElement, elementCount: number) => {\n    if (this.node) {\n      const modalTop = this.node.getBoundingClientRect().top;\n      const modalHeight = this.node.offsetHeight;\n      const maxSelectHeight = Math.min(MAX_PROJECTS_HEIGHT, (elementCount + 1) * PROJECT_HEIGHT);\n      const selectBottom = selectNode.getBoundingClientRect().top + maxSelectHeight;\n      if (selectBottom > modalTop + modalHeight) {\n        this.node.classList.add('inverted-direction');\n      } else {\n        this.node.classList.remove('inverted-direction');\n      }\n      this.node.classList.remove('selector-hidden');\n    }\n  };\n\n  renderProjectsList = () => {\n    return (\n      <>\n        <strong className=\"spacer-left spacer-top\">\n          {translate('application_console.branches.configuration')}\n        </strong>\n        <p className=\"spacer-top big-spacer-bottom spacer-left spacer-right\">\n          {translate('application_console.branches.create.help')}\n        </p>\n        <table className=\"data zebra\">\n          <thead>\n            <tr>\n              <th className=\"thin\" />\n              <th className=\"thin\">{translate('project')}</th>\n              <th>{translate('branch')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.projects.map(project => (\n              <ProjectBranchRow\n                checked={this.state.selected.includes(project.key)}\n                key={project.key}\n                onChange={this.handleBranchChange}\n                onCheck={this.handleProjectCheck}\n                onClose={this.handleSelectorClose}\n                onOpen={this.handleSelectorDirection}\n                project={project}\n              />\n            ))}\n          </tbody>\n        </table>\n      </>\n    );\n  };\n\n  render() {\n    const isUpdating = this.props.branch !== undefined;\n    const header = translate('application_console.branches', isUpdating ? 'update' : 'create');\n    return (\n      <SimpleModal\n        header={header}\n        onClose={this.props.onClose}\n        onSubmit={this.handleFormSubmit}\n        size=\"medium\">\n        {({ onCloseClick, onFormSubmit, submitting }) => (\n          <form className=\"views-form\" onSubmit={onFormSubmit}>\n            <div className=\"modal-head\">\n              <h2>{header}</h2>\n            </div>\n\n            <div\n              className=\"modal-body modal-container selector-hidden\"\n              ref={node => (this.node = node)}>\n              {this.state.loading ? (\n                <div className=\"text-center big-spacer-top big-spacer-bottom\">\n                  <i className=\"spinner spacer-right\" />\n                </div>\n              ) : (\n                <>\n                  <div className=\"modal-field\">\n                    <label htmlFor=\"view-edit-name\">\n                      {translate('name')} <em className=\"mandatory\">*</em>\n                    </label>\n                    <input\n                      autoFocus={true}\n                      className=\"input-super-large\"\n                      maxLength={250}\n                      name=\"name\"\n                      onChange={this.handleInputChange}\n                      size={50}\n                      type=\"text\"\n                      value={this.state.name}\n                    />\n                  </div>\n                  {this.renderProjectsList()}\n                </>\n              )}\n            </div>\n\n            <div className=\"modal-foot\">\n              <DeferredSpinner className=\"spacer-right\" loading={submitting} />\n              <SubmitButton disabled={submitting || !this.canSubmit()}>\n                {translate(\n                  'application_console.branches',\n                  isUpdating ? 'update' : 'create',\n                  'verb'\n                )}\n              </SubmitButton>\n              <ResetButtonLink onClick={onCloseClick}>\n                {translate('application_console.branches.cancel')}\n              </ResetButtonLink>\n            </div>\n          </form>\n        )}\n      </SimpleModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { without } from 'lodash';\nimport * as React from 'react';\nimport ActionsDropdown, {\n  ActionsDropdownItem\n} from 'sonar-ui-common/components/controls/ActionsDropdown';\nimport ConfirmButton from 'sonar-ui-common/components/controls/ConfirmButton';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { deleteApplicationBranch } from '../../api/application';\nimport { Application } from '../../types/application';\nimport CreateBranchForm from './CreateBranchForm';\nimport { ApplicationBranch } from './utils';\n\ninterface Props {\n  application: Application;\n  branch: ApplicationBranch;\n  onUpdateBranches: (branches: Array<ApplicationBranch>) => void;\n}\n\ninterface State {\n  isUpdating: boolean;\n}\n\nexport default class BranchRowActions extends React.PureComponent<Props, State> {\n  state: State = { isUpdating: false };\n\n  handleDelete = () => {\n    const { application, branch } = this.props;\n    return deleteApplicationBranch(application.key, branch.name).then(() => {\n      this.props.onUpdateBranches(without(application.branches, branch));\n    });\n  };\n\n  handleUpdate = (newBranchName: string) => {\n    this.props.onUpdateBranches(\n      this.props.application.branches.map(branch => {\n        if (branch.name === this.props.branch.name) {\n          branch.name = newBranchName;\n        }\n        return branch;\n      })\n    );\n  };\n\n  handleCloseForm = () => {\n    this.setState({ isUpdating: false });\n  };\n\n  handleUpdateClick = () => {\n    this.setState({ isUpdating: true });\n  };\n\n  render() {\n    return (\n      <>\n        <ConfirmButton\n          confirmButtonText={translate('delete')}\n          isDestructive={true}\n          modalBody={translateWithParameters(\n            'application_console.branches.delete.warning_x',\n            this.props.branch.name\n          )}\n          modalHeader={translate('application_console.branches.delete')}\n          onConfirm={this.handleDelete}>\n          {({ onClick }) => (\n            <ActionsDropdown>\n              <ActionsDropdownItem onClick={this.handleUpdateClick}>\n                {translate('edit')}\n              </ActionsDropdownItem>\n              <ActionsDropdownItem destructive={true} onClick={onClick}>\n                {translate('delete')}\n              </ActionsDropdownItem>\n            </ActionsDropdown>\n          )}\n        </ConfirmButton>\n\n        {this.state.isUpdating && (\n          <CreateBranchForm\n            application={this.props.application}\n            branch={this.props.branch}\n            enabledProjectsKey={this.props.application.projects\n              .filter(p => p.enabled)\n              .map(p => p.key)}\n            onClose={this.handleCloseForm}\n            onUpdate={this.handleUpdate}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { Application } from '../../types/application';\nimport BranchRowActions from './BranchRowActions';\nimport { ApplicationBranch } from './utils';\n\nexport interface ApplicationProjectBranchProps {\n  application: Application;\n  branch: ApplicationBranch;\n  onUpdateBranches: (branches: Array<ApplicationBranch>) => void;\n}\n\nexport default function ApplicationProjectBranch(props: ApplicationProjectBranchProps) {\n  const { application, branch } = props;\n  return (\n    <tr>\n      <td>\n        <BranchIcon className=\"little-spacer-right\" />\n        {branch.name}\n        {branch.isMain && (\n          <span className=\"badge spacer-left\">\n            {translate('application_console.branches.main_branch')}\n          </span>\n        )}\n      </td>\n      <td className=\"thin nowrap\">\n        {!branch.isMain && (\n          <BranchRowActions\n            application={application}\n            branch={branch}\n            onUpdateBranches={props.onUpdateBranches}\n          />\n        )}\n      </td>\n    </tr>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { Application } from '../../types/application';\nimport ApplicationProjectBranch from './ApplicationProjectBranch';\nimport CreateBranchForm from './CreateBranchForm';\nimport { ApplicationBranch } from './utils';\n\ninterface Props {\n  application: Application;\n  onUpdateBranches: (branches: ApplicationBranch[]) => void;\n}\n\ninterface State {\n  creating: boolean;\n}\n\nexport default class ApplicationBranches extends React.PureComponent<Props, State> {\n  state: State = { creating: false };\n\n  handleCreate = (branch: ApplicationBranch) => {\n    this.props.onUpdateBranches([...this.props.application.branches, branch]);\n  };\n\n  handleCreateFormClose = () => {\n    this.setState({ creating: false });\n  };\n\n  handleCreateClick = () => {\n    this.setState({ creating: true });\n  };\n\n  canCreateBranches = () => {\n    return (\n      this.props.application.projects &&\n      this.props.application.projects.some(p => Boolean(p.enabled))\n    );\n  };\n\n  renderBranches(createEnable: boolean) {\n    const { application } = this.props;\n    if (!createEnable) {\n      return (\n        <div className=\"app-branches-list\">\n          <p className=\"text-center big-spacer-top\">\n            {translate('application_console.branches.no_branches')}\n          </p>\n        </div>\n      );\n    }\n    return (\n      <div className=\"app-branches-list\">\n        <table className=\"data zebra\">\n          <tbody>\n            {application.branches.map(branch => (\n              <ApplicationProjectBranch\n                application={application}\n                branch={branch}\n                key={branch.name}\n                onUpdateBranches={this.props.onUpdateBranches}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  render() {\n    const { application } = this.props;\n    const createEnable = this.canCreateBranches();\n    return (\n      <div className=\"app-branches-console\">\n        <div className=\"boxed-group-actions\">\n          <Button disabled={!createEnable} onClick={this.handleCreateClick}>\n            {translate('application_console.branches.create')}\n          </Button>\n        </div>\n        <h2\n          className=\"text-limited big-spacer-top\"\n          title={translate('application_console.branches')}>\n          {translate('application_console.branches')}\n        </h2>\n        <p>{translate('application_console.branches.help')}</p>\n\n        {this.renderBranches(createEnable)}\n\n        {this.state.creating && (\n          <CreateBranchForm\n            application={application}\n            enabledProjectsKey={application.projects.map(p => p.key)}\n            onClose={this.handleCreateFormClose}\n            onCreate={this.handleCreate}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { find, without } from 'lodash';\nimport * as React from 'react';\nimport SelectList, {\n  SelectListFilter,\n  SelectListSearchParams\n} from 'sonar-ui-common/components/controls/SelectList';\nimport QualifierIcon from 'sonar-ui-common/components/icons/QualifierIcon';\nimport {\n  addProjectToApplication,\n  getApplicationProjects,\n  removeProjectFromApplication\n} from '../../api/application';\nimport { Application, ApplicationProject } from '../../types/application';\n\ninterface Props {\n  onAddProject?: (project: ApplicationProject) => void;\n  onRemoveProject?: (projectKey: string) => void;\n  application: Application;\n}\n\ninterface State {\n  disabledProjects: string[];\n  lastSearchParams: SelectListSearchParams & { applicationKey: string };\n  needToReload: boolean;\n  projects: Array<ApplicationProject>;\n  projectsTotalCount?: number;\n  selectedProjects: string[];\n}\n\nexport default class ApplicationProjects extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      disabledProjects: [],\n      lastSearchParams: {\n        applicationKey: props.application.key,\n        query: '',\n        filter: SelectListFilter.Selected\n      },\n      needToReload: false,\n      projects: [],\n      selectedProjects: []\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.application.key !== this.props.application.key) {\n      this.setState(\n        prevState => {\n          return {\n            lastSearchParams: {\n              ...prevState.lastSearchParams,\n              applicationKey: this.props.application.key\n            }\n          };\n        },\n        () => this.fetchProjects(this.state.lastSearchParams)\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  loadApplicationProjects = (searchParams: SelectListSearchParams) =>\n    getApplicationProjects({\n      application: this.state.lastSearchParams.applicationKey,\n      p: searchParams.page,\n      ps: searchParams.pageSize,\n      q: searchParams.query !== '' ? searchParams.query : undefined,\n      selected: searchParams.filter\n    });\n\n  fetchProjects = (searchParams: SelectListSearchParams) =>\n    this.loadApplicationProjects(searchParams).then(data => {\n      if (this.mounted) {\n        this.setState(prevState => {\n          const more = searchParams.page != null && searchParams.page > 1;\n\n          const { projects, selectedProjects, disabledProjects } = this.dealWithProjects(\n            data,\n            more,\n            prevState\n          );\n\n          return {\n            disabledProjects,\n            lastSearchParams: { ...prevState.lastSearchParams, ...searchParams },\n            needToReload: false,\n            projects,\n            projectsTotalCount: data.paging.total,\n            selectedProjects\n          };\n        });\n      }\n    });\n\n  dealWithProjects = (\n    data: { projects: Array<ApplicationProject>; paging: T.Paging },\n    more: boolean,\n    prevState: Readonly<State>\n  ) => {\n    const projects = more ? [...prevState.projects, ...data.projects] : data.projects;\n\n    const newSelectedProjects = data.projects\n      .filter(project => project.selected)\n      .map(project => project.key);\n    const selectedProjects = more\n      ? [...prevState.selectedProjects, ...newSelectedProjects]\n      : newSelectedProjects;\n\n    const disabledProjects = more ? [...prevState.disabledProjects] : [];\n\n    return {\n      disabledProjects,\n      projects,\n      selectedProjects\n    };\n  };\n\n  handleSelect = (projectKey: string) => {\n    return addProjectToApplication(this.props.application.key, projectKey).then(() => {\n      if (this.mounted) {\n        this.setState(state => {\n          const project = state.projects.find(p => p.key === projectKey);\n          if (project && this.props.onAddProject) {\n            this.props.onAddProject(project);\n          }\n          return {\n            needToReload: true,\n            selectedProjects: [...state.selectedProjects, projectKey]\n          };\n        });\n      }\n    });\n  };\n\n  handleUnselect = (projectKey: string) => {\n    return removeProjectFromApplication(this.props.application.key, projectKey).then(() => {\n      if (this.mounted) {\n        this.setState(state => {\n          if (this.props.onRemoveProject) {\n            this.props.onRemoveProject(projectKey);\n          }\n          return {\n            needToReload: true,\n            selectedProjects: without(state.selectedProjects, projectKey)\n          };\n        });\n      }\n    });\n  };\n\n  renderElement = (projectKey: string) => {\n    const project = find(this.state.projects, { key: projectKey });\n    if (project === undefined) {\n      return '';\n    }\n\n    return (\n      <div className=\"views-project-item display-flex-center\">\n        <QualifierIcon className=\"spacer-right\" qualifier=\"TRK\" />\n        <div>\n          <div title={project.name}>{project.name}</div>\n          <div className=\"note\">{project.key}</div>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    const { projects, selectedProjects } = this.state;\n\n    return (\n      <SelectList\n        disabledElements={this.state.disabledProjects}\n        elements={projects.map(project => project.key)}\n        elementsTotalCount={this.state.projectsTotalCount}\n        needToReload={\n          this.state.needToReload &&\n          this.state.lastSearchParams &&\n          this.state.lastSearchParams.filter !== SelectListFilter.All\n        }\n        onSearch={this.fetchProjects}\n        onSelect={this.handleSelect}\n        onUnselect={this.handleUnselect}\n        renderElement={this.renderElement}\n        selectedElements={selectedProjects}\n        withPaging={true}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport SimpleModal from 'sonar-ui-common/components/controls/SimpleModal';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { Application } from '../../types/application';\n\ninterface Props {\n  header: string;\n  onClose: () => void;\n  onEdit: (name: string, description: string) => Promise<void>;\n  application: Application;\n}\n\ninterface State {\n  description: string;\n  name: string;\n}\n\nexport default class EditForm extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      description: props.application.description || '',\n      name: props.application.name\n    };\n  }\n\n  handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handleDescriptionChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ description: event.currentTarget.value });\n  };\n\n  handleFormSubmit = async () => {\n    await this.props.onEdit(this.state.name, this.state.description);\n    this.props.onClose();\n  };\n\n  render() {\n    return (\n      <SimpleModal\n        header={this.props.header}\n        onClose={this.props.onClose}\n        onSubmit={this.handleFormSubmit}\n        size=\"small\">\n        {({ onCloseClick, onFormSubmit, submitting }) => (\n          <form onSubmit={onFormSubmit}>\n            <div className=\"modal-head\">\n              <h2>{this.props.header}</h2>\n            </div>\n\n            <div className=\"modal-body\">\n              <div className=\"modal-field\">\n                <label htmlFor=\"view-edit-name\">{translate('name')}</label>\n                <input\n                  autoFocus={true}\n                  id=\"view-edit-name\"\n                  maxLength={100}\n                  name=\"name\"\n                  onChange={this.handleNameChange}\n                  size={50}\n                  type=\"text\"\n                  value={this.state.name}\n                />\n              </div>\n              <div className=\"modal-field\">\n                <label htmlFor=\"view-edit-description\">{translate('description')}</label>\n                <textarea\n                  id=\"view-edit-description\"\n                  name=\"description\"\n                  onChange={this.handleDescriptionChange}\n                  value={this.state.description}\n                />\n              </div>\n            </div>\n\n            <div className=\"modal-foot\">\n              <DeferredSpinner className=\"spacer-right\" loading={submitting} />\n              <SubmitButton disabled={submitting || !this.state.name.length}>\n                {translate('save')}\n              </SubmitButton>\n              <ResetButtonLink onClick={onCloseClick}>{translate('cancel')}</ResetButtonLink>\n            </div>\n          </form>\n        )}\n      </SimpleModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { Application, ApplicationProject } from '../../types/application';\nimport { Branch } from '../../types/branch-like';\nimport ApplicationBranches from './ApplicationBranches';\nimport ApplicationProjects from './ApplicationProjects';\nimport EditForm from './EditForm';\n\nexport interface ApplicationConsoleAppRendererProps {\n  loading: boolean;\n  application: Application;\n  onAddProject: (project: ApplicationProject) => void;\n  onRefresh: () => void;\n  onEdit: (name: string, description: string) => Promise<void>;\n  onRemoveProject: (projectKey: string) => void;\n  onUpdateBranches: (branches: Branch[]) => void;\n}\n\nexport default function ApplicationConsoleAppRenderer(props: ApplicationConsoleAppRendererProps) {\n  const [editing, setEditing] = React.useState(false);\n\n  const { application, loading } = props;\n\n  if (loading) {\n    return <i className=\"spinner spacer\" />;\n  }\n\n  return (\n    <div className=\"page page-limited\">\n      <div className=\"boxed-group\" id=\"view-details\">\n        <div className=\"boxed-group-actions\">\n          <Button\n            className=\"little-spacer-right\"\n            id=\"view-details-edit\"\n            onClick={() => setEditing(true)}>\n            {translate('edit')}\n          </Button>\n          <Button className=\"little-spacer-right\" onClick={props.onRefresh}>\n            {translate('application_console.recompute')}\n          </Button>\n        </div>\n\n        <header className=\"boxed-group-header\" id=\"view-details-header\">\n          <h2 className=\"text-limited\" title={application.name}>\n            {application.name}\n          </h2>\n        </header>\n\n        <div className=\"boxed-group-inner\" id=\"view-details-content\">\n          <div className=\"big-spacer-bottom\">\n            {application.description && (\n              <div className=\"little-spacer-bottom\">{application.description}</div>\n            )}\n            <div className=\"subtitle\">\n              {translate('key')}: {application.key}\n            </div>\n          </div>\n\n          <ApplicationProjects\n            onAddProject={props.onAddProject}\n            onRemoveProject={props.onRemoveProject}\n            application={application}\n          />\n\n          <ApplicationBranches\n            application={application}\n            onUpdateBranches={props.onUpdateBranches}\n          />\n        </div>\n\n        {editing && (\n          <EditForm\n            header={translate('portfolios.edit_application')}\n            onClose={() => setEditing(false)}\n            onEdit={props.onEdit}\n            application={application}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { Location } from 'history';\nimport * as React from 'react';\nimport { InjectedRouter } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { editApplication, getApplicationDetails, refreshApplication } from '../../api/application';\nimport addGlobalSuccessMessage from '../../app/utils/addGlobalSuccessMessage';\nimport { Application, ApplicationProject } from '../../types/application';\nimport ApplicationConsoleAppRenderer from './ApplicationConsoleAppRenderer';\nimport { ApplicationBranch } from './utils';\n\ninterface Props {\n  component: { key: string };\n  location: Location;\n  router: Pick<InjectedRouter, 'replace'>;\n}\n\ninterface State {\n  application?: Application;\n  loading: boolean;\n}\n\nexport default class ApplicationConsoleApp extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  state: State = {\n    loading: false\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchDetails();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.component.key !== this.props.component.key) {\n      this.fetchDetails();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  updateApplicationState = (buildNewFields: (prevApp: Application) => Partial<Application>) => {\n    this.setState(state => {\n      if (state.application) {\n        return { application: { ...state.application, ...buildNewFields(state.application) } };\n      } else {\n        return null;\n      }\n    });\n  };\n\n  fetchDetails = async () => {\n    try {\n      const application = await getApplicationDetails(this.props.component.key);\n      if (this.mounted) {\n        this.setState({ application, loading: false });\n      }\n    } catch {\n      if (this.mounted) {\n        this.setState({ loading: false });\n      }\n    }\n  };\n\n  handleRefreshClick = async () => {\n    if (this.state.application) {\n      await refreshApplication(this.state.application.key);\n      addGlobalSuccessMessage(translate('application_console.refresh_started'));\n    }\n  };\n\n  handleEdit = async (name: string, description: string) => {\n    if (this.state.application) {\n      await editApplication(this.state.application.key, name, description);\n    }\n    if (this.mounted) {\n      this.updateApplicationState(() => ({ name, description }));\n    }\n  };\n\n  handleAddProject = (project: ApplicationProject) => {\n    this.updateApplicationState(prevApp => ({ projects: [...prevApp.projects, project] }));\n  };\n\n  handleRemoveProject = (projectKey: string) => {\n    this.updateApplicationState(prevApp => ({\n      projects: prevApp.projects.filter(p => p.key !== projectKey)\n    }));\n  };\n\n  handleUpdateBranches = (branches: ApplicationBranch[]) => {\n    this.updateApplicationState(() => ({ branches }));\n  };\n\n  render() {\n    const { application, loading } = this.state;\n    if (!application) {\n      // when application is not found\n      return null;\n    }\n\n    return (\n      <ApplicationConsoleAppRenderer\n        loading={loading}\n        application={application}\n        onAddProject={this.handleAddProject}\n        onEdit={this.handleEdit}\n        onRefresh={this.handleRefreshClick}\n        onRemoveProject={this.handleRemoveProject}\n        onUpdateBranches={this.handleUpdateBranches}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as globalMessages from '../../store/globalMessages';\nimport getStore from './getStore';\n\nexport default function addGlobalSuccessMessage(message: string): void {\n  const store = getStore();\n  store.dispatch(globalMessages.addGlobalSuccessMessage(message));\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { Application, ApplicationPeriod, ApplicationProject } from '../types/application';\nimport { Visibility } from '../types/component';\n\nexport function getApplicationLeak(\n  application: string,\n  branch?: string\n): Promise<ApplicationPeriod[]> {\n  return getJSON('/api/applications/show_leak', { application, branch }).then(\n    r => r.leaks,\n    throwGlobalError\n  );\n}\n\nexport function getApplicationDetails(application: string, branch?: string): Promise<Application> {\n  return getJSON('/api/applications/show', { application, branch }).then(\n    r => r.application,\n    throwGlobalError\n  );\n}\n\nexport function addApplicationBranch(data: {\n  application: string;\n  branch: string;\n  project: string[];\n  projectBranch: string[];\n}) {\n  return post('/api/applications/create_branch', data).catch(throwGlobalError);\n}\n\nexport function updateApplicationBranch(data: {\n  application: string;\n  branch: string;\n  name: string;\n  project: string[];\n  projectBranch: string[];\n}) {\n  return post('/api/applications/update_branch', data).catch(throwGlobalError);\n}\n\nexport function deleteApplicationBranch(application: string, branch: string) {\n  return post('/api/applications/delete_branch', { application, branch }).catch(throwGlobalError);\n}\n\nexport function getApplicationProjects(data: {\n  application: string;\n  p?: number;\n  ps?: number;\n  q?: string;\n  selected: string;\n}): Promise<{ paging: T.Paging; projects: ApplicationProject[] }> {\n  return getJSON('/api/applications/search_projects', data).catch(throwGlobalError);\n}\n\nexport function addProjectToApplication(application: string, project: string) {\n  return post('/api/applications/add_project', { application, project }).catch(throwGlobalError);\n}\n\nexport function removeProjectFromApplication(application: string, project: string) {\n  return post('/api/applications/remove_project', { application, project }).catch(throwGlobalError);\n}\n\nexport function refreshApplication(key: string) {\n  return post('/api/applications/refresh', { key }).catch(throwGlobalError);\n}\n\nexport function createApplication(\n  name: string,\n  description: string,\n  key: string | undefined,\n  visibility: string\n): Promise<{\n  application: {\n    description?: string;\n    key: string;\n    name: string;\n    visibility: Visibility;\n  };\n}> {\n  return postJSON('/api/applications/create', { description, key, name, visibility }).catch(\n    throwGlobalError\n  );\n}\n\nexport function deleteApplication(application: string) {\n  return post('/api/applications/delete', { application }).catch(throwGlobalError);\n}\n\nexport function editApplication(application: string, name: string, description: string) {\n  return post('/api/applications/update', { name, description, application }).catch(\n    throwGlobalError\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { Branch, PullRequest } from '../types/branch-like';\n\nexport function getBranches(project: string): Promise<Branch[]> {\n  return getJSON('/api/project_branches/list', { project }).then(r => r.branches, throwGlobalError);\n}\n\nexport function getPullRequests(project: string): Promise<PullRequest[]> {\n  return getJSON('/api/project_pull_requests/list', { project }).then(\n    r => r.pullRequests,\n    throwGlobalError\n  );\n}\n\nexport function deleteBranch(data: { branch: string; project: string }) {\n  return post('/api/project_branches/delete', data).catch(throwGlobalError);\n}\n\nexport function deletePullRequest(data: { project: string; pullRequest: string }) {\n  return post('/api/project_pull_requests/delete', data).catch(throwGlobalError);\n}\n\nexport function renameBranch(project: string, name: string) {\n  return post('/api/project_branches/rename', { project, name }).catch(throwGlobalError);\n}\n\nexport function excludeBranchFromPurge(projectKey: string, branchName: string, excluded: boolean) {\n  return post('/api/project_branches/set_automatic_deletion_protection', {\n    project: projectKey,\n    branch: branchName,\n    value: excluded\n  }).catch(throwGlobalError);\n}\n"],"sourceRoot":""}