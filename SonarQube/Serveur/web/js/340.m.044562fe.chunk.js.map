{"version":3,"sources":["webpack:///./src/main/js/app/components/ResetPassword.css?7c1c","webpack:///./src/main/js/app/components/ResetPassword.css","webpack:///./src/main/js/app/components/ResetPassword.tsx","webpack:///./src/main/js/components/hoc/whenLoggedIn.tsx","webpack:///./src/main/js/components/common/ResetPassword.tsx"],"names":["api","content","__esModule","default","module","i","options","exported","locals","exports","___CSS_LOADER_API_IMPORT___","push","ResetPassword","props","router","currentUser","className","user","onPasswordChange","replace","whenLoggedIn","WrappedComponent","Wrapper","this","displayName","oldPassword","password","passwordConfirmation","state","success","handleSuccessfulChange","value","setState","errors","undefined","setErrors","handleChangePassword","event","preventDefault","previousPassword","focus","login","then","onSubmit","variant","map","e","key","htmlFor","autoComplete","id","name","ref","elem","required","type"],"mappings":"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","file":"js/340.m.044562fe.chunk.js","sourcesContent":["var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./ResetPassword.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".reset-page{padding-top:10vh}.reset-page h1{line-height:1.5;font-size:24px;font-weight:300;text-align:center}.reset-form{width:300px;margin-left:auto;margin-right:auto}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport ResetPasswordForm from '../../components/common/ResetPassword';\nimport { whenLoggedIn } from '../../components/hoc/whenLoggedIn';\nimport { Router, withRouter } from '../../components/hoc/withRouter';\nimport GlobalMessagesContainer from './GlobalMessagesContainer';\nimport './ResetPassword.css';\n\nexport interface ResetPasswordProps {\n  currentUser: T.LoggedInUser;\n  router: Router;\n}\n\nexport function ResetPassword(props: ResetPasswordProps) {\n  const { router, currentUser } = props;\n  const redirect = () => {\n    router.replace('/');\n  };\n\n  return (\n    <div className=\"reset-page\">\n      <h1 className=\"text-center spacer-bottom\">{translate('my_account.reset_password')}</h1>\n      <h2 className=\"text-center huge-spacer-bottom\">\n        {translate('my_account.reset_password.explain')}\n      </h2>\n      <GlobalMessagesContainer />\n      <div className=\"reset-form\">\n        <ResetPasswordForm user={currentUser} onPasswordChange={redirect} />\n      </div>\n    </div>\n  );\n}\n\nexport default whenLoggedIn(withRouter(ResetPassword));\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport handleRequiredAuthentication from 'sonar-ui-common/helpers/handleRequiredAuthentication';\nimport { isLoggedIn } from '../../helpers/users';\nimport { getWrappedDisplayName } from './utils';\nimport { withCurrentUser } from './withCurrentUser';\n\nexport function whenLoggedIn<P>(WrappedComponent: React.ComponentType<P>) {\n  class Wrapper extends React.Component<P & { currentUser: T.CurrentUser }> {\n    static displayName = getWrappedDisplayName(WrappedComponent, 'whenLoggedIn');\n\n    componentDidMount() {\n      if (!isLoggedIn(this.props.currentUser)) {\n        handleRequiredAuthentication();\n      }\n    }\n\n    render() {\n      if (isLoggedIn(this.props.currentUser)) {\n        return <WrappedComponent {...this.props} />;\n      } else {\n        return null;\n      }\n    }\n  }\n\n  return withCurrentUser(Wrapper);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { changePassword } from '../../api/users';\n\ninterface Props {\n  user: T.LoggedInUser;\n  onPasswordChange?: () => void;\n}\n\ninterface State {\n  errors?: string[];\n  success: boolean;\n}\n\nexport default class ResetPassword extends React.Component<Props, State> {\n  oldPassword: HTMLInputElement | null = null;\n  password: HTMLInputElement | null = null;\n  passwordConfirmation: HTMLInputElement | null = null;\n  state: State = {\n    success: false\n  };\n\n  handleSuccessfulChange = () => {\n    if (!this.oldPassword || !this.password || !this.passwordConfirmation) {\n      return;\n    }\n    this.oldPassword.value = '';\n    this.password.value = '';\n    this.passwordConfirmation.value = '';\n    this.setState({ success: true, errors: undefined });\n    if (this.props.onPasswordChange) {\n      this.props.onPasswordChange();\n    }\n  };\n\n  setErrors = (errors: string[]) => {\n    this.setState({ success: false, errors });\n  };\n\n  handleChangePassword = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!this.oldPassword || !this.password || !this.passwordConfirmation) {\n      return;\n    }\n    const { user } = this.props;\n    const previousPassword = this.oldPassword.value;\n    const password = this.password.value;\n    const passwordConfirmation = this.passwordConfirmation.value;\n\n    if (password !== passwordConfirmation) {\n      this.password.focus();\n      this.setErrors([translate('user.password_doesnt_match_confirmation')]);\n    } else {\n      changePassword({ login: user.login, password, previousPassword }).then(\n        this.handleSuccessfulChange,\n        () => {\n          // error already reported.\n        }\n      );\n    }\n  };\n\n  render() {\n    const { success, errors } = this.state;\n\n    return (\n      <section className=\"boxed-group\">\n        <h2 className=\"spacer-bottom\">{translate('my_profile.password.title')}</h2>\n\n        <form className=\"boxed-group-inner\" onSubmit={this.handleChangePassword}>\n          {success && <Alert variant=\"success\">{translate('my_profile.password.changed')}</Alert>}\n\n          {errors &&\n            errors.map((e, i) => (\n              /* eslint-disable-next-line react/no-array-index-key */\n              <Alert key={i} variant=\"error\">\n                {e}\n              </Alert>\n            ))}\n\n          <div className=\"form-field\">\n            <label htmlFor=\"old_password\">\n              {translate('my_profile.password.old')}\n              <em className=\"mandatory\">*</em>\n            </label>\n            <input\n              autoComplete=\"off\"\n              id=\"old_password\"\n              name=\"old_password\"\n              ref={elem => (this.oldPassword = elem)}\n              required={true}\n              type=\"password\"\n            />\n          </div>\n          <div className=\"form-field\">\n            <label htmlFor=\"password\">\n              {translate('my_profile.password.new')}\n              <em className=\"mandatory\">*</em>\n            </label>\n            <input\n              autoComplete=\"off\"\n              id=\"password\"\n              name=\"password\"\n              ref={elem => (this.password = elem)}\n              required={true}\n              type=\"password\"\n            />\n          </div>\n          <div className=\"form-field\">\n            <label htmlFor=\"password_confirmation\">\n              {translate('my_profile.password.confirm')}\n              <em className=\"mandatory\">*</em>\n            </label>\n            <input\n              autoComplete=\"off\"\n              id=\"password_confirmation\"\n              name=\"password_confirmation\"\n              ref={elem => (this.passwordConfirmation = elem)}\n              required={true}\n              type=\"password\"\n            />\n          </div>\n          <div className=\"form-field\">\n            <SubmitButton id=\"change-password\">{translate('update_verb')}</SubmitButton>\n          </div>\n        </form>\n      </section>\n    );\n  }\n}\n"],"sourceRoot":""}