{"version":3,"sources":["webpack:///./src/main/js/apps/settings/encryption/EncryptionForm.tsx","webpack:///./src/main/js/apps/settings/encryption/GenerateSecretKeyForm.tsx","webpack:///./src/main/js/apps/settings/encryption/EncryptionApp.tsx","webpack:///./node_modules/lodash/pickBy.js","webpack:///./node_modules/lodash/omitBy.js","webpack:///./node_modules/lodash/negate.js","webpack:///./src/main/js/api/settings.ts"],"names":["mounted","state","encrypting","generating","value","handleChange","event","setState","currentTarget","handleEncrypt","preventDefault","then","encryptedValue","handleGenerateSecretKey","props","generateSecretKey","stopGenerating","componentDidMount","this","componentWillUnmount","render","id","className","onSubmit","autoFocus","onChange","required","rows","disabled","loading","readOnly","type","copyValue","defaultMessage","values","moreInformationLink","to","target","submitting","handleSubmit","stopSubmitting","secretKey","secret_file","property","propreties_file","checkSecretKey","secretKeyAvailable","defer","title","arrayMap","baseIteratee","basePickBy","getAllKeysIn","module","exports","object","predicate","prop","path","negate","pickBy","TypeError","args","arguments","length","call","apply","getDefinitions","component","r","getValues","data","setSettingValue","definition","key","multiValues","fieldValues","map","fields","JSON","stringify","resetSettingValue","sendTestEmail","subject","message","catch","encryptValue"],"mappings":"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","file":"js/334.1613385090031.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport { ClipboardButton } from 'sonar-ui-common/components/controls/clipboard';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { encryptValue } from '../../../api/settings';\n\ninterface Props {\n  generateSecretKey: () => Promise<void>;\n}\n\ninterface State {\n  encryptedValue?: string;\n  encrypting: boolean;\n  generating: boolean;\n  value: string;\n}\n\nexport default class EncryptionForm extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { encrypting: false, generating: false, value: '' };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ value: event.currentTarget.value });\n  };\n\n  handleEncrypt = (event: React.FormEvent) => {\n    event.preventDefault();\n    this.setState({ encrypting: true });\n    encryptValue(this.state.value).then(\n      ({ encryptedValue }) => {\n        if (this.mounted) {\n          this.setState({ encryptedValue, encrypting: false });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ encrypting: false });\n        }\n      }\n    );\n  };\n\n  handleGenerateSecretKey = (event: React.FormEvent) => {\n    event.preventDefault();\n    this.setState({ generating: true });\n    this.props.generateSecretKey().then(this.stopGenerating, this.stopGenerating);\n  };\n\n  stopGenerating = () => {\n    if (this.mounted) {\n      this.setState({ generating: false });\n    }\n  };\n\n  render() {\n    const { encryptedValue, encrypting, generating } = this.state;\n    return (\n      <div id=\"encryption-form-container\">\n        <div className=\"spacer-bottom\">{translate('encryption.form_intro')}</div>\n        <form className=\"big-spacer-bottom\" id=\"encryption-form\" onSubmit={this.handleEncrypt}>\n          <textarea\n            autoFocus={true}\n            className=\"abs-width-600\"\n            id=\"encryption-form-value\"\n            onChange={this.handleChange}\n            required={true}\n            rows={5}\n            value={this.state.value}\n          />\n          <div className=\"spacer-top\">\n            <SubmitButton disabled={encrypting || generating}>\n              {translate('encryption.encrypt')}\n            </SubmitButton>\n            <DeferredSpinner className=\"spacer-left\" loading={encrypting} />\n          </div>\n        </form>\n\n        {encryptedValue && (\n          <div>\n            <span className=\"little-spacer-right\">{translate('encryption.encrypted_value')}</span>\n            <input\n              className=\"input-clear input-code input-super-large\"\n              id=\"encrypted-value\"\n              readOnly={true}\n              type=\"text\"\n              value={encryptedValue}\n            />\n            <ClipboardButton className=\"little-spacer-left\" copyValue={encryptedValue} />\n          </div>\n        )}\n\n        <form\n          className=\"huge-spacer-top bordered-top\"\n          id=\"encryption-new-key-form\"\n          onSubmit={this.handleGenerateSecretKey}>\n          <p className=\"big-spacer-top spacer-bottom\">\n            <FormattedMessage\n              defaultMessage={translate('encryption.form_note')}\n              id=\"encryption.form_note\"\n              values={{\n                moreInformationLink: (\n                  <Link to=\"/documentation/instance-administration/security/\" target=\"_blank\">\n                    {translate('more_information')}\n                  </Link>\n                )\n              }}\n            />\n          </p>\n\n          <SubmitButton disabled={generating || encrypting}>\n            {translate('encryption.generate_new_secret_key')}{' '}\n          </SubmitButton>\n          <DeferredSpinner className=\"spacer-left\" loading={generating} />\n        </form>\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport { ClipboardButton } from 'sonar-ui-common/components/controls/clipboard';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\ninterface Props {\n  generateSecretKey: () => Promise<void>;\n  secretKey?: string;\n}\n\ninterface State {\n  submitting: boolean;\n}\n\nexport default class GenerateSecretKeyForm extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { submitting: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    this.setState({ submitting: true });\n    this.props.generateSecretKey().then(this.stopSubmitting, this.stopSubmitting);\n  };\n\n  stopSubmitting = () => {\n    if (this.mounted) {\n      this.setState({ submitting: false });\n    }\n  };\n\n  render() {\n    const { secretKey } = this.props;\n    const { submitting } = this.state;\n    return (\n      <div id=\"generate-secret-key-form-container\">\n        {secretKey ? (\n          <>\n            <div className=\"big-spacer-bottom\">\n              <h3 className=\"spacer-bottom\">{translate('encryption.secret_key')}</h3>\n              <input\n                className=\"input-clear input-code input-large\"\n                id=\"secret-key\"\n                readOnly={true}\n                type=\"text\"\n                value={secretKey}\n              />\n              <ClipboardButton className=\"little-spacer-left\" copyValue={secretKey} />\n            </div>\n            <h3 className=\"spacer-bottom\">{translate('encryption.how_to_use')}</h3>\n            <div className=\"markdown\">\n              <ul>\n                <li>\n                  <FormattedMessage\n                    defaultMessage={translate('encryption.how_to_use.content1')}\n                    id=\"encryption.how_to_use.content1\"\n                    values={{\n                      secret_file: <code>~/.sonar/sonar-secret.txt</code>,\n                      property: <code>sonar.secretKeyPath</code>,\n                      propreties_file: <code>conf/sonar.properties</code>\n                    }}\n                  />\n                </li>\n                <li>{translate('encryption.how_to_use.content2')}</li>\n                <li>\n                  <FormattedMessage\n                    defaultMessage={translate('encryption.how_to_use.content3')}\n                    id=\"encryption.how_to_use.content3\"\n                    values={{\n                      property: <code>sonar.secretKeyPath</code>\n                    }}\n                  />\n                </li>\n                <li>{translate('encryption.how_to_use.content4')}</li>\n              </ul>\n            </div>\n          </>\n        ) : (\n          <form id=\"generate-secret-key-form\" onSubmit={this.handleSubmit}>\n            <p className=\"spacer-bottom\">\n              <FormattedMessage\n                defaultMessage={translate('encryption.secret_key_description')}\n                id=\"encryption.secret_key_description\"\n                values={{\n                  moreInformationLink: (\n                    <Link to=\"/documentation/instance-administration/security/\" target=\"_blank\">\n                      {translate('more_information')}\n                    </Link>\n                  )\n                }}\n              />\n            </p>\n            <SubmitButton disabled={submitting}>\n              {translate('encryption.generate_secret_key')}\n            </SubmitButton>\n            <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n          </form>\n        )}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { checkSecretKey, generateSecretKey } from '../../../api/settings';\nimport EncryptionForm from './EncryptionForm';\nimport GenerateSecretKeyForm from './GenerateSecretKeyForm';\n\ninterface State {\n  loading: boolean;\n  secretKey?: string;\n  secretKeyAvailable?: boolean;\n}\n\nexport default class EncryptionApp extends React.PureComponent<{}, State> {\n  state: State = { loading: true };\n  mounted = false;\n\n  componentDidMount() {\n    this.mounted = true;\n    this.checkSecretKey();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  checkSecretKey = () => {\n    checkSecretKey().then(\n      ({ secretKeyAvailable }) => {\n        if (this.mounted) {\n          this.setState({ loading: false, secretKeyAvailable });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  generateSecretKey = () => {\n    return generateSecretKey().then(({ secretKey }) => {\n      if (this.mounted) {\n        this.setState({ secretKey, secretKeyAvailable: false });\n      }\n    });\n  };\n\n  render() {\n    const { loading, secretKey, secretKeyAvailable } = this.state;\n    return (\n      <div className=\"page page-limited\" id=\"encryption-page\">\n        <Helmet defer={false} title={translate('property.category.security.encryption')} />\n        <header className=\"page-header\">\n          <h1 className=\"page-title\">{translate('property.category.security.encryption')}</h1>\n          <DeferredSpinner loading={loading} />\n        </header>\n\n        {!loading && !secretKeyAvailable && (\n          <GenerateSecretKeyForm generateSecretKey={this.generateSecretKey} secretKey={secretKey} />\n        )}\n\n        {secretKeyAvailable && <EncryptionForm generateSecretKey={this.generateSecretKey} />}\n      </div>\n    );\n  }\n}\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    basePickBy = require('./_basePickBy'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nmodule.exports = pickBy;\n","var baseIteratee = require('./_baseIteratee'),\n    negate = require('./negate'),\n    pickBy = require('./pickBy');\n\n/**\n * The opposite of `_.pickBy`; this method creates an object composed of\n * the own and inherited enumerable string keyed properties of `object` that\n * `predicate` doesn't return truthy for. The predicate is invoked with two\n * arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omitBy(object, _.isNumber);\n * // => { 'b': '2' }\n */\nfunction omitBy(object, predicate) {\n  return pickBy(object, negate(baseIteratee(predicate)));\n}\n\nmodule.exports = omitBy;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { omitBy } from 'lodash';\nimport { getJSON, post, postJSON, RequestData } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { isCategoryDefinition } from '../apps/settings/utils';\nimport { BranchParameters } from '../types/branch-like';\n\nexport function getDefinitions(component?: string): Promise<T.SettingCategoryDefinition[]> {\n  return getJSON('/api/settings/list_definitions', { component }).then(\n    r => r.definitions,\n    throwGlobalError\n  );\n}\n\nexport function getValues(\n  data: { keys: string; component?: string } & BranchParameters\n): Promise<T.SettingValue[]> {\n  return getJSON('/api/settings/values', data).then(r => r.settings);\n}\n\nexport function setSettingValue(\n  definition: T.SettingDefinition,\n  value: any,\n  component?: string\n): Promise<void> {\n  const { key } = definition;\n  const data: RequestData = { key, component };\n\n  if (isCategoryDefinition(definition) && definition.multiValues) {\n    data.values = value;\n  } else if (definition.type === 'PROPERTY_SET') {\n    data.fieldValues = value\n      .map((fields: any) => omitBy(fields, value => value == null))\n      .map(JSON.stringify);\n  } else {\n    data.value = value;\n  }\n\n  return post('/api/settings/set', data);\n}\n\nexport function setSimpleSettingValue(\n  data: { component?: string; value: string; key: string } & BranchParameters\n): Promise<void | Response> {\n  return post('/api/settings/set', data).catch(throwGlobalError);\n}\n\nexport function resetSettingValue(\n  data: { keys: string; component?: string } & BranchParameters\n): Promise<void> {\n  return post('/api/settings/reset', data);\n}\n\nexport function sendTestEmail(to: string, subject: string, message: string): Promise<void> {\n  return post('/api/emails/send', { to, subject, message });\n}\n\nexport function checkSecretKey(): Promise<{ secretKeyAvailable: boolean }> {\n  return getJSON('/api/settings/check_secret_key').catch(throwGlobalError);\n}\n\nexport function generateSecretKey(): Promise<{ secretKey: string }> {\n  return postJSON('/api/settings/generate_secret_key').catch(throwGlobalError);\n}\n\nexport function encryptValue(value: string): Promise<{ encryptedValue: string }> {\n  return postJSON('/api/settings/encrypt', { value }).catch(throwGlobalError);\n}\n"],"sourceRoot":""}