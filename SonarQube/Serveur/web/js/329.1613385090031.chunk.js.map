{"version":3,"sources":["webpack:///./src/main/js/components/common/BranchStatus.tsx","webpack:///./src/main/js/types/settings.ts","webpack:///./src/main/js/apps/projectBranches/components/BranchPurgeSetting.tsx","webpack:///./src/main/js/apps/projectBranches/components/BranchLikeRow.tsx","webpack:///./src/main/js/apps/projectBranches/components/BranchLikeTable.tsx","webpack:///./src/main/js/apps/projectBranches/components/BranchLikeTabs.tsx","webpack:///./src/main/js/apps/projectBranches/components/DeleteBranchModal.tsx","webpack:///./src/main/js/apps/projectBranches/components/RenameBranchModal.tsx","webpack:///./src/main/js/apps/projectBranches/components/LifetimeInformationRenderer.tsx","webpack:///./src/main/js/apps/projectBranches/components/LifetimeInformation.tsx","webpack:///./src/main/js/apps/projectBranches/components/App.tsx","webpack:///./src/main/js/api/settings.ts","webpack:///./src/main/js/components/icons/BranchLikeIcon.tsx","webpack:///./src/main/js/api/branches.ts"],"names":["state","props","branchLike","component","status","level","small","SettingsKey","mounted","handleOnChange","branch","newValue","setState","loading","key","name","then","excludedFromPurge","catch","componentDidMount","this","componentWillUnmount","render","isTheMainBranch","disabled","onChange","value","className","overlay","displayPurgeSetting","onDelete","onRename","branchLikeDisplayName","BranchLikeIcon","title","BranchStatus","date","analysisDate","ActionsDropdown","onClick","destructive","Tabs","branchLikes","style","width","map","handleSubmit","event","preventDefault","project","pullRequest","header","contentLabel","onRequestClose","onClose","onSubmit","handleNameChange","currentTarget","submitDisabled","size","htmlFor","autoFocus","id","maxLength","required","type","undefined","TABS","Branch","label","PullRequest","currentTab","onTabSelect","onDeleteBranchLike","deleting","onRenameBranchLike","renaming","onModalActionFulfilled","onBranchesChange","isBranchMode","branchLikesToDisplay","filter","onSelect","selected","tabs","branchAndPullRequestLifeTimeInDays","canAdmin","defaultMessage","values","days","settings","to","fetchBranchAndPullRequestLifetimeSetting","keys","DaysBeforeDeletingInactiveBranchesAndPRs","length","App","getDefinitions","r","getValues","data","setSettingValue","definition","multiValues","fieldValues","fields","JSON","stringify","resetSettingValue","sendTestEmail","subject","message","checkSecretKey","generateSecretKey","encryptValue","getBranches","getPullRequests","deleteBranch","deletePullRequest","renameBranch","excludeBranchFromPurge","projectKey","branchName","excluded"],"mappings":"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","file":"js/329.1613385090031.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Level from 'sonar-ui-common/components/ui/Level';\nimport { getBranchStatusByBranchLike, Store } from '../../store/rootReducer';\nimport { BranchLike } from '../../types/branch-like';\n\ninterface ExposedProps {\n  branchLike: BranchLike;\n  component: string;\n}\n\ninterface BranchStatusProps {\n  status?: string;\n}\n\nexport function BranchStatus({ status }: BranchStatusProps) {\n  if (!status) {\n    return null;\n  }\n\n  return <Level level={status} small={true} />;\n}\n\nconst mapStateToProps = (state: Store, props: ExposedProps) => {\n  const { branchLike, component } = props;\n  const { status } = getBranchStatusByBranchLike(state, component, branchLike);\n  return { status };\n};\n\nexport default connect(mapStateToProps)(BranchStatus);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport const enum SettingsKey {\n  DaysBeforeDeletingInactiveBranchesAndPRs = 'sonar.dbcleaner.daysBeforeDeletingInactiveBranchesAndPRs',\n  DefaultProjectVisibility = 'projects.default.visibility'\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport Toggle from 'sonar-ui-common/components/controls/Toggle';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { excludeBranchFromPurge } from '../../../api/branches';\nimport { isMainBranch } from '../../../helpers/branch-like';\nimport { Branch } from '../../../types/branch-like';\n\ninterface Props {\n  branch: Branch;\n  component: T.Component;\n}\n\ninterface State {\n  excludedFromPurge: boolean;\n  loading: boolean;\n}\n\nexport default class BranchPurgeSetting extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { excludedFromPurge: props.branch.excludedFromPurge, loading: false };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleOnChange = () => {\n    const { branch, component } = this.props;\n    const { excludedFromPurge } = this.state;\n    const newValue = !excludedFromPurge;\n\n    this.setState({ loading: true });\n\n    excludeBranchFromPurge(component.key, branch.name, newValue)\n      .then(() => {\n        if (this.mounted) {\n          this.setState({\n            excludedFromPurge: newValue,\n            loading: false\n          });\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      });\n  };\n\n  render() {\n    const { branch } = this.props;\n    const { excludedFromPurge, loading } = this.state;\n\n    const isTheMainBranch = isMainBranch(branch);\n    const disabled = isTheMainBranch || loading;\n\n    return (\n      <>\n        <Toggle disabled={disabled} onChange={this.handleOnChange} value={excludedFromPurge} />\n        <span className=\"spacer-left\">\n          <DeferredSpinner loading={loading} />\n        </span>\n        {isTheMainBranch && (\n          <HelpTooltip\n            overlay={translate(\n              'project_branch_pull_request.branch.auto_deletion.main_branch_tooltip'\n            )}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ActionsDropdown, {\n  ActionsDropdownItem\n} from 'sonar-ui-common/components/controls/ActionsDropdown';\nimport DateFromNow from 'sonar-ui-common/components/intl/DateFromNow';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport BranchStatus from '../../../components/common/BranchStatus';\nimport BranchLikeIcon from '../../../components/icons/BranchLikeIcon';\nimport {\n  getBranchLikeDisplayName,\n  isBranch,\n  isMainBranch,\n  isPullRequest\n} from '../../../helpers/branch-like';\nimport { BranchLike } from '../../../types/branch-like';\nimport BranchPurgeSetting from './BranchPurgeSetting';\n\nexport interface BranchLikeRowProps {\n  branchLike: BranchLike;\n  component: T.Component;\n  displayPurgeSetting?: boolean;\n  onDelete: () => void;\n  onRename: () => void;\n}\n\nexport function BranchLikeRow(props: BranchLikeRowProps) {\n  const { branchLike, component, displayPurgeSetting, onDelete, onRename } = props;\n  const branchLikeDisplayName = getBranchLikeDisplayName(branchLike);\n\n  return (\n    <tr>\n      <td className=\"nowrap hide-overflow\">\n        <BranchLikeIcon branchLike={branchLike} className=\"little-spacer-right\" />\n        <span title={branchLikeDisplayName}>{branchLikeDisplayName}</span>\n        <span>\n          {isMainBranch(branchLike) && (\n            <div className=\"badge spacer-left\">{translate('branches.main_branch')}</div>\n          )}\n        </span>\n      </td>\n      <td className=\"nowrap\">\n        <BranchStatus branchLike={branchLike} component={component.key} />\n      </td>\n      <td className=\"nowrap\">{<DateFromNow date={branchLike.analysisDate} />}</td>\n      {displayPurgeSetting && isBranch(branchLike) && (\n        <td className=\"nowrap js-test-purge-toggle-container\">\n          <BranchPurgeSetting branch={branchLike} component={component} />\n        </td>\n      )}\n      <td className=\"nowrap\">\n        <ActionsDropdown>\n          {isMainBranch(branchLike) ? (\n            <ActionsDropdownItem className=\"js-rename\" onClick={onRename}>\n              {translate('project_branch_pull_request.branch.rename')}\n            </ActionsDropdownItem>\n          ) : (\n            <ActionsDropdownItem className=\"js-delete\" destructive={true} onClick={onDelete}>\n              {translate(\n                isPullRequest(branchLike)\n                  ? 'project_branch_pull_request.pull_request.delete'\n                  : 'project_branch_pull_request.branch.delete'\n              )}\n            </ActionsDropdownItem>\n          )}\n        </ActionsDropdown>\n      </td>\n    </tr>\n  );\n}\n\nexport default React.memo(BranchLikeRow);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBranchLikeKey } from '../../../helpers/branch-like';\nimport { BranchLike } from '../../../types/branch-like';\nimport BranchLikeRow from './BranchLikeRow';\n\nexport interface BranchLikeTableProps {\n  branchLikes: BranchLike[];\n  component: T.Component;\n  displayPurgeSetting?: boolean;\n  onDelete: (branchLike: BranchLike) => void;\n  onRename: (branchLike: BranchLike) => void;\n  title: string;\n}\n\nexport function BranchLikeTable(props: BranchLikeTableProps) {\n  const { branchLikes, component, displayPurgeSetting, onDelete, onRename, title } = props;\n\n  return (\n    <div className=\"boxed-group boxed-group-inner\">\n      <table className=\"data zebra zebra-hover fixed\">\n        <thead>\n          <tr>\n            <th className=\"nowrap\">{title}</th>\n            <th className=\"nowrap\" style={{ width: '80px' }}>\n              {translate('status')}\n            </th>\n            <th className=\"nowrap\" style={{ width: '140px' }}>\n              {translate('project_branch_pull_request.last_analysis_date')}\n            </th>\n            {displayPurgeSetting && (\n              <th className=\"nowrap\" style={{ width: '150px' }}>\n                <div className=\"display-flex-center\">\n                  <span>\n                    {translate(\n                      'project_branch_pull_request.branch.auto_deletion.keep_when_inactive'\n                    )}\n                  </span>\n                  <HelpTooltip\n                    className=\"little-spacer-left\"\n                    overlay={translate(\n                      'project_branch_pull_request.branch.auto_deletion.keep_when_inactive.tooltip'\n                    )}\n                  />\n                </div>\n              </th>\n            )}\n            <th className=\"nowrap\" style={{ width: '50px' }}>\n              {translate('actions')}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {branchLikes.map(branchLike => (\n            <BranchLikeRow\n              branchLike={branchLike}\n              component={component}\n              displayPurgeSetting={displayPurgeSetting}\n              key={getBranchLikeKey(branchLike)}\n              onDelete={() => onDelete(branchLike)}\n              onRename={() => onRename(branchLike)}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default React.memo(BranchLikeTable);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport BoxedTabs from 'sonar-ui-common/components/controls/BoxedTabs';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport PullRequestIcon from 'sonar-ui-common/components/icons/PullRequestIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  isBranch,\n  isMainBranch,\n  isPullRequest,\n  sortBranches,\n  sortPullRequests\n} from '../../../helpers/branch-like';\nimport { BranchLike } from '../../../types/branch-like';\nimport BranchLikeTable from './BranchLikeTable';\nimport DeleteBranchModal from './DeleteBranchModal';\nimport RenameBranchModal from './RenameBranchModal';\n\ninterface Props {\n  branchLikes: BranchLike[];\n  component: T.Component;\n  onBranchesChange: () => void;\n}\n\ninterface State {\n  currentTab: Tabs;\n  deleting?: BranchLike;\n  renaming?: BranchLike;\n}\n\nexport enum Tabs {\n  Branch,\n  PullRequest\n}\n\nconst TABS = [\n  {\n    key: Tabs.Branch,\n    label: (\n      <>\n        <BranchIcon />\n        <span className=\"spacer-left\">\n          {translate('project_branch_pull_request.tabs.branches')}\n        </span>\n      </>\n    )\n  },\n  {\n    key: Tabs.PullRequest,\n    label: (\n      <>\n        <PullRequestIcon />\n        <span className=\"spacer-left\">\n          {translate('project_branch_pull_request.tabs.pull_requests')}\n        </span>\n      </>\n    )\n  }\n];\n\nexport default class BranchLikeTabs extends React.PureComponent<Props, State> {\n  state: State = { currentTab: Tabs.Branch };\n\n  onTabSelect = (currentTab: Tabs) => {\n    this.setState({ currentTab });\n  };\n\n  onDeleteBranchLike = (branchLike: BranchLike) => this.setState({ deleting: branchLike });\n\n  onRenameBranchLike = (branchLike: BranchLike) => this.setState({ renaming: branchLike });\n\n  onClose = () => this.setState({ deleting: undefined, renaming: undefined });\n\n  onModalActionFulfilled = () => {\n    this.onClose();\n    this.props.onBranchesChange();\n  };\n\n  render() {\n    const { branchLikes, component } = this.props;\n    const { currentTab, deleting, renaming } = this.state;\n\n    const isBranchMode = currentTab === Tabs.Branch;\n    const branchLikesToDisplay: BranchLike[] = isBranchMode\n      ? sortBranches(branchLikes.filter(isBranch))\n      : sortPullRequests(branchLikes.filter(isPullRequest));\n    const title = translate(\n      isBranchMode\n        ? 'project_branch_pull_request.table.branch'\n        : 'project_branch_pull_request.table.pull_request'\n    );\n\n    return (\n      <>\n        <BoxedTabs\n          className=\"branch-like-tabs\"\n          onSelect={this.onTabSelect}\n          selected={currentTab}\n          tabs={TABS}\n        />\n\n        <BranchLikeTable\n          branchLikes={branchLikesToDisplay}\n          component={component}\n          displayPurgeSetting={isBranchMode}\n          onDelete={this.onDeleteBranchLike}\n          onRename={this.onRenameBranchLike}\n          title={title}\n        />\n\n        {deleting && (\n          <DeleteBranchModal\n            branchLike={deleting}\n            component={component}\n            onClose={this.onClose}\n            onDelete={this.onModalActionFulfilled}\n          />\n        )}\n\n        {renaming && isMainBranch(renaming) && (\n          <RenameBranchModal\n            branch={renaming}\n            component={component}\n            onClose={this.onClose}\n            onRename={this.onModalActionFulfilled}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Modal from 'sonar-ui-common/components/controls/Modal';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { deleteBranch, deletePullRequest } from '../../../api/branches';\nimport { getBranchLikeDisplayName, isPullRequest } from '../../../helpers/branch-like';\nimport { BranchLike } from '../../../types/branch-like';\n\ninterface Props {\n  branchLike: BranchLike;\n  component: T.Component;\n  onClose: () => void;\n  onDelete: () => void;\n}\n\ninterface State {\n  loading: boolean;\n}\n\nexport default class DeleteBranchModal extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { loading: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit = (event: React.SyntheticEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    const request = isPullRequest(this.props.branchLike)\n      ? deletePullRequest({\n          project: this.props.component.key,\n          pullRequest: this.props.branchLike.key\n        })\n      : deleteBranch({\n          branch: this.props.branchLike.name,\n          project: this.props.component.key\n        });\n    request.then(\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n          this.props.onDelete();\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  render() {\n    const { branchLike } = this.props;\n    const header = translate(\n      isPullRequest(branchLike)\n        ? 'project_branch_pull_request.pull_request.delete'\n        : 'project_branch_pull_request.branch.delete'\n    );\n\n    return (\n      <Modal contentLabel={header} onRequestClose={this.props.onClose}>\n        <header className=\"modal-head\">\n          <h2>{header}</h2>\n        </header>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"modal-body\">\n            {translateWithParameters(\n              isPullRequest(branchLike)\n                ? 'project_branch_pull_request.pull_request.delete.are_you_sure'\n                : 'project_branch_pull_request.branch.delete.are_you_sure',\n              getBranchLikeDisplayName(branchLike)\n            )}\n          </div>\n          <footer className=\"modal-foot\">\n            {this.state.loading && <i className=\"spinner spacer-right\" />}\n            <SubmitButton className=\"button-red\" disabled={this.state.loading}>\n              {translate('delete')}\n            </SubmitButton>\n            <ResetButtonLink onClick={this.props.onClose}>{translate('cancel')}</ResetButtonLink>\n          </footer>\n        </form>\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Modal from 'sonar-ui-common/components/controls/Modal';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { renameBranch } from '../../../api/branches';\nimport { MainBranch } from '../../../types/branch-like';\n\ninterface Props {\n  branch: MainBranch;\n  component: T.Component;\n  onClose: () => void;\n  onRename: () => void;\n}\n\ninterface State {\n  loading: boolean;\n  name?: string;\n}\n\nexport default class RenameBranchModal extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { loading: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit = (event: React.SyntheticEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!this.state.name) {\n      return;\n    }\n    this.setState({ loading: true });\n    renameBranch(this.props.component.key, this.state.name).then(\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n          this.props.onRename();\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  handleNameChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  render() {\n    const { branch } = this.props;\n    const header = translate('project_branch_pull_request.branch.rename');\n    const submitDisabled =\n      this.state.loading || !this.state.name || this.state.name === branch.name;\n\n    return (\n      <Modal contentLabel={header} onRequestClose={this.props.onClose} size=\"small\">\n        <header className=\"modal-head\">\n          <h2>{header}</h2>\n        </header>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"modal-body\">\n            <div className=\"modal-field\">\n              <label htmlFor=\"rename-branch-name\">\n                {translate('new_name')}\n                <em className=\"mandatory\">*</em>\n              </label>\n              <input\n                autoFocus={true}\n                id=\"rename-branch-name\"\n                maxLength={100}\n                name=\"name\"\n                onChange={this.handleNameChange}\n                required={true}\n                size={50}\n                type=\"text\"\n                value={this.state.name !== undefined ? this.state.name : branch.name}\n              />\n            </div>\n          </div>\n          <footer className=\"modal-foot\">\n            {this.state.loading && <i className=\"spinner spacer-right\" />}\n            <SubmitButton disabled={submitDisabled}>{translate('rename')}</SubmitButton>\n            <ResetButtonLink onClick={this.props.onClose}>{translate('cancel')}</ResetButtonLink>\n          </footer>\n        </form>\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { formatMeasure } from 'sonar-ui-common/helpers/measures';\n\nexport interface LifetimeInformationRendererProps {\n  branchAndPullRequestLifeTimeInDays?: string;\n  canAdmin?: boolean;\n  loading: boolean;\n}\n\nexport function LifetimeInformationRenderer(props: LifetimeInformationRendererProps) {\n  const { branchAndPullRequestLifeTimeInDays, canAdmin, loading } = props;\n\n  return (\n    <DeferredSpinner loading={loading}>\n      {branchAndPullRequestLifeTimeInDays && (\n        <p className=\"page-description\">\n          <FormattedMessage\n            defaultMessage={translate('project_branch_pull_request.lifetime_information')}\n            id=\"project_branch_pull_request.lifetime_information\"\n            values={{ days: formatMeasure(branchAndPullRequestLifeTimeInDays, 'INT') }}\n          />\n          {canAdmin && (\n            <FormattedMessage\n              defaultMessage={translate('project_branch_pull_request.lifetime_information.admin')}\n              id=\"project_branch_pull_request.lifetime_information.admin\"\n              values={{\n                settings: <Link to=\"/admin/settings\">{translate('settings.page')}</Link>\n              }}\n            />\n          )}\n        </p>\n      )}\n    </DeferredSpinner>\n  );\n}\n\nexport default React.memo(LifetimeInformationRenderer);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { getValues } from '../../../api/settings';\nimport { getAppState, Store } from '../../../store/rootReducer';\nimport { SettingsKey } from '../../../types/settings';\nimport LifetimeInformationRenderer from './LifetimeInformationRenderer';\n\ninterface Props {\n  canAdmin?: boolean;\n}\n\ninterface State {\n  branchAndPullRequestLifeTimeInDays?: string;\n  loading: boolean;\n}\n\nexport class LifetimeInformation extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { loading: true };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchBranchAndPullRequestLifetimeSetting();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchBranchAndPullRequestLifetimeSetting() {\n    getValues({ keys: SettingsKey.DaysBeforeDeletingInactiveBranchesAndPRs }).then(\n      settings => {\n        if (this.mounted) {\n          this.setState({\n            loading: false,\n            branchAndPullRequestLifeTimeInDays: settings.length > 0 ? settings[0].value : undefined\n          });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  }\n\n  render() {\n    const { canAdmin } = this.props;\n    const { branchAndPullRequestLifeTimeInDays, loading } = this.state;\n\n    return (\n      <LifetimeInformationRenderer\n        branchAndPullRequestLifeTimeInDays={branchAndPullRequestLifeTimeInDays}\n        canAdmin={canAdmin}\n        loading={loading}\n      />\n    );\n  }\n}\n\nconst mapStoreToProps = (state: Store) => ({\n  canAdmin: getAppState(state).canAdmin\n});\n\nexport default connect(mapStoreToProps)(LifetimeInformation);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { BranchLike } from '../../../types/branch-like';\nimport BranchLikeTabs from './BranchLikeTabs';\nimport LifetimeInformation from './LifetimeInformation';\n\nexport interface AppProps {\n  branchLikes: BranchLike[];\n  component: T.Component;\n  onBranchesChange: () => void;\n}\n\nexport function App(props: AppProps) {\n  const { branchLikes, component, onBranchesChange } = props;\n\n  return (\n    <div className=\"page page-limited\" id=\"project-branch-like\">\n      <header className=\"page-header\">\n        <h1>{translate('project_branch_pull_request.page')}</h1>\n        <LifetimeInformation />\n      </header>\n\n      <BranchLikeTabs\n        branchLikes={branchLikes}\n        component={component}\n        onBranchesChange={onBranchesChange}\n      />\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { omitBy } from 'lodash';\nimport { getJSON, post, postJSON, RequestData } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { isCategoryDefinition } from '../apps/settings/utils';\nimport { BranchParameters } from '../types/branch-like';\n\nexport function getDefinitions(component?: string): Promise<T.SettingCategoryDefinition[]> {\n  return getJSON('/api/settings/list_definitions', { component }).then(\n    r => r.definitions,\n    throwGlobalError\n  );\n}\n\nexport function getValues(\n  data: { keys: string; component?: string } & BranchParameters\n): Promise<T.SettingValue[]> {\n  return getJSON('/api/settings/values', data).then(r => r.settings);\n}\n\nexport function setSettingValue(\n  definition: T.SettingDefinition,\n  value: any,\n  component?: string\n): Promise<void> {\n  const { key } = definition;\n  const data: RequestData = { key, component };\n\n  if (isCategoryDefinition(definition) && definition.multiValues) {\n    data.values = value;\n  } else if (definition.type === 'PROPERTY_SET') {\n    data.fieldValues = value\n      .map((fields: any) => omitBy(fields, value => value == null))\n      .map(JSON.stringify);\n  } else {\n    data.value = value;\n  }\n\n  return post('/api/settings/set', data);\n}\n\nexport function setSimpleSettingValue(\n  data: { component?: string; value: string; key: string } & BranchParameters\n): Promise<void | Response> {\n  return post('/api/settings/set', data).catch(throwGlobalError);\n}\n\nexport function resetSettingValue(\n  data: { keys: string; component?: string } & BranchParameters\n): Promise<void> {\n  return post('/api/settings/reset', data);\n}\n\nexport function sendTestEmail(to: string, subject: string, message: string): Promise<void> {\n  return post('/api/emails/send', { to, subject, message });\n}\n\nexport function checkSecretKey(): Promise<{ secretKeyAvailable: boolean }> {\n  return getJSON('/api/settings/check_secret_key').catch(throwGlobalError);\n}\n\nexport function generateSecretKey(): Promise<{ secretKey: string }> {\n  return postJSON('/api/settings/generate_secret_key').catch(throwGlobalError);\n}\n\nexport function encryptValue(value: string): Promise<{ encryptedValue: string }> {\n  return postJSON('/api/settings/encrypt', { value }).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport { IconProps } from 'sonar-ui-common/components/icons/Icon';\nimport PullRequestIcon from 'sonar-ui-common/components/icons/PullRequestIcon';\nimport { isPullRequest } from '../../helpers/branch-like';\nimport { BranchLike } from '../../types/branch-like';\n\nexport interface BranchLikeIconProps extends IconProps {\n  branchLike: BranchLike;\n}\n\nexport default function BranchLikeIcon({ branchLike, ...props }: BranchLikeIconProps) {\n  if (isPullRequest(branchLike)) {\n    return <PullRequestIcon {...props} />;\n  } else {\n    return <BranchIcon {...props} />;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { Branch, PullRequest } from '../types/branch-like';\n\nexport function getBranches(project: string): Promise<Branch[]> {\n  return getJSON('/api/project_branches/list', { project }).then(r => r.branches, throwGlobalError);\n}\n\nexport function getPullRequests(project: string): Promise<PullRequest[]> {\n  return getJSON('/api/project_pull_requests/list', { project }).then(\n    r => r.pullRequests,\n    throwGlobalError\n  );\n}\n\nexport function deleteBranch(data: { branch: string; project: string }) {\n  return post('/api/project_branches/delete', data).catch(throwGlobalError);\n}\n\nexport function deletePullRequest(data: { project: string; pullRequest: string }) {\n  return post('/api/project_pull_requests/delete', data).catch(throwGlobalError);\n}\n\nexport function renameBranch(project: string, name: string) {\n  return post('/api/project_branches/rename', { project, name }).catch(throwGlobalError);\n}\n\nexport function excludeBranchFromPurge(projectKey: string, branchName: string, excluded: boolean) {\n  return post('/api/project_branches/set_automatic_deletion_protection', {\n    project: projectKey,\n    branch: branchName,\n    value: excluded\n  }).catch(throwGlobalError);\n}\n"],"sourceRoot":""}