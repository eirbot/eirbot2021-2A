{"version":3,"sources":["webpack:///./src/main/js/apps/quality-gates/components/BuiltInQualityGateBadge.tsx","webpack:///./src/main/js/apps/quality-gates/styles.css?5e7a","webpack:///./src/main/js/apps/quality-gates/styles.css","webpack:///./src/main/js/apps/quality-gates/utils.ts","webpack:///./src/main/js/apps/quality-gates/components/ConditionOperator.tsx","webpack:///./src/main/js/apps/quality-gates/components/MetricSelect.tsx","webpack:///./src/main/js/apps/quality-gates/components/ThresholdInput.tsx","webpack:///./src/main/js/apps/quality-gates/components/ConditionModal.tsx","webpack:///./src/main/js/apps/quality-gates/components/Condition.tsx","webpack:///./src/main/js/apps/quality-gates/components/Conditions.tsx","webpack:///./src/main/js/apps/quality-gates/components/Projects.tsx","webpack:///./src/main/js/apps/quality-gates/components/DetailsContent.tsx","webpack:///./src/main/js/apps/quality-gates/components/CopyQualityGateForm.tsx","webpack:///./src/main/js/apps/quality-gates/components/DeleteQualityGateForm.tsx","webpack:///./src/main/js/apps/quality-gates/components/RenameQualityGateForm.tsx","webpack:///./src/main/js/apps/quality-gates/components/DetailsHeader.tsx","webpack:///./src/main/js/apps/quality-gates/components/Details.tsx","webpack:///./src/main/js/apps/quality-gates/components/List.tsx","webpack:///./src/main/js/apps/quality-gates/components/CreateQualityGateForm.tsx","webpack:///./src/main/js/apps/quality-gates/components/ListHeader.tsx","webpack:///./src/main/js/apps/quality-gates/components/App.tsx","webpack:///./src/main/js/app/components/embed-docs-modal/Suggestions.tsx","webpack:///./src/main/js/app/utils/addGlobalSuccessMessage.ts","webpack:///./src/main/js/components/common/ScreenPositionHelper.tsx","webpack:///./src/main/js/components/common/DocumentationTooltip.tsx","webpack:///./src/main/js/components/search-navigator.css?9a2e","webpack:///./src/main/js/components/search-navigator.css"],"names":["BuiltInQualityGateBadge","className","overlay","api","content","__esModule","default","module","i","options","exported","locals","exports","___CSS_LOADER_API_IMPORT___","push","checkIfDefault","qualityGate","list","finding","find","candidate","id","isDefault","addCondition","condition","oldConditions","conditions","deleteCondition","filter","replaceCondition","newCondition","oldCondition","map","getPossibleOperators","metric","direction","getNoDiffMetric","key","store","getStore","getState","regularMetricKey","replace","undefined","getLocalizedMetricNameNoDiffMetric","handleChange","value","props","onOperatorChange","getLabel","op","type","render","operators","this","Array","isArray","operatorOptions","label","autoFocus","clearable","name","onChange","searchable","option","selectedMetric","onMetricChange","metrics","domain","optionsWithDomains","forEach","index","previous","disabled","placeholder","e","currentTarget","handleSelectChange","renderRatingInput","handleFormSubmit","state","getSinglePossibleOperator","error","gateId","then","onAddCondition","Promise","reject","handleScopeChange","scope","setState","correspondingMetric","m","handleMetricChange","handleOperatorChange","handleErrorChange","header","onClose","confirmButtonText","confirmDisable","onConfirm","size","errorMessage","Alert","variant","checked","onCheck","htmlFor","handleUpdateCondition","onSaveCondition","handleOpenUpdate","modal","handleUpdateClose","handleDeleteClick","deleteFormOpen","closeDeleteForm","removeCondition","onRemoveCondition","renderOperator","canEdit","updated","highlighted","hidden","onClick","confirmData","isDestructive","FORBIDDEN_METRIC_TYPES","FORBIDDEN_METRICS","alert_status","releasability_rating","security_hotspots","new_security_hotspots","renderConditionsTable","updatedConditionId","style","width","appState","existingConditions","sortedConditions","sortedConditionsOnOverallMetrics","sortedConditionsOnNewMetrics","duplicates","savedConditions","sample","length","uniqDuplicates","d","availableMetrics","includes","DocumentationTooltip","links","href","branchesEnabled","withAppState","mounted","fetchProjects","searchParams","gateName","page","pageSize","query","selected","data","prevState","more","projects","results","newSelectedProjects","project","selectedProjects","lastSearchParams","needToReload","projectsTotalCount","paging","total","handleSelect","projectKey","handleUnselect","renderElement","componentDidMount","componentWillUnmount","elements","elementsTotalCount","labelAll","labelSelected","labelUnselected","SelectList","All","onSearch","onSelect","onUnselect","readOnly","selectedElements","withPaging","actions","manageConditions","associateProjects","handleNameChange","event","handleCopy","newQualityGate","onCopy","router","String","maxLength","required","withRouter","onDelete","modalBody","modalHeader","handleRename","handleActionRefresh","refreshItem","refreshList","all","handleSetAsDefaultClick","onSetDefault","isBuiltIn","rename","onRename","copy","setAsDefault","delete","loading","fetchDetails","handleAddCondition","addGlobalSuccessMessage","handleSaveCondition","handleRemoveCondition","handleSetDefault","fetchMetrics","componentDidUpdate","prevProps","refreshQualityGates","timeout","defer","title","qualityGates","mapDispatchToProps","List","activeClassName","to","handleCreate","onCreate","ListHeader","canCreate","fetchQualityGates","create","params","openDefault","defaultQualityGate","gate","Boolean","defaultTitle","titleTemplate","Suggestions","suggestions","ScreenPositionHelper","top","Consumer","addSuggestions","removeSuggestions","SuggestionsInner","message","dispatch","getPosition","containerPos","container","getBoundingClientRect","window","pageYOffset","left","pageXOffset","debouncedOnResize","forceUpdate","addEventListener","removeEventListener","ref","children","inPlace","rel","target"],"mappings":"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","file":"js/319.1613385090031.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\ninterface Props {\n  className?: string;\n}\n\nexport default function BuiltInQualityGateBadge({ className }: Props) {\n  return (\n    <Tooltip overlay={translate('quality_gates.built_in.help')}>\n      <div className={classNames('badge', className)}>{translate('quality_gates.built_in')}</div>\n    </Tooltip>\n  );\n}\n","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".quality-gate-section{max-width:1440px}.quality-gate-section+.quality-gate-section{margin-top:10px;padding-top:20px}.quality-gate-metric-select .Select-option{padding-left:16px}.quality-gate-metric-select .Select-option.is-disabled{opacity:1;font-weight:600;color:#444;padding-left:8px;font-style:normal}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getLocalizedMetricName } from 'sonar-ui-common/helpers/l10n';\nimport getStore from '../../app/utils/getStore';\nimport { isDiffMetric } from '../../helpers/measures';\nimport { getMetricByKey } from '../../store/rootReducer';\n\nexport function checkIfDefault(qualityGate: T.QualityGate, list: T.QualityGate[]): boolean {\n  const finding = list.find(candidate => candidate.id === qualityGate.id);\n  return (finding && finding.isDefault) || false;\n}\n\nexport function addCondition(qualityGate: T.QualityGate, condition: T.Condition): T.QualityGate {\n  const oldConditions = qualityGate.conditions || [];\n  const conditions = [...oldConditions, condition];\n  return { ...qualityGate, conditions };\n}\n\nexport function deleteCondition(qualityGate: T.QualityGate, condition: T.Condition): T.QualityGate {\n  const conditions =\n    qualityGate.conditions && qualityGate.conditions.filter(candidate => candidate !== condition);\n  return { ...qualityGate, conditions };\n}\n\nexport function replaceCondition(\n  qualityGate: T.QualityGate,\n  newCondition: T.Condition,\n  oldCondition: T.Condition\n): T.QualityGate {\n  const conditions =\n    qualityGate.conditions &&\n    qualityGate.conditions.map(candidate => {\n      return candidate === oldCondition ? newCondition : candidate;\n    });\n  return { ...qualityGate, conditions };\n}\n\nexport function getPossibleOperators(metric: T.Metric) {\n  if (metric.direction === 1) {\n    return 'LT';\n  } else if (metric.direction === -1) {\n    return 'GT';\n  } else {\n    return ['LT', 'GT'];\n  }\n}\n\nexport function metricKeyExists(key: string) {\n  return getMetricByKey(getStore().getState(), key) !== undefined;\n}\n\nfunction getNoDiffMetric(metric: T.Metric) {\n  const store = getStore().getState();\n  const regularMetricKey = metric.key.replace(/^new_/, '');\n  if (isDiffMetric(metric.key) && metricKeyExists(regularMetricKey)) {\n    return getMetricByKey(store, regularMetricKey);\n  } else if (metric.key === 'new_maintainability_rating') {\n    return getMetricByKey(store, 'sqale_rating') || metric;\n  } else {\n    return metric;\n  }\n}\n\nexport function getLocalizedMetricNameNoDiffMetric(metric: T.Metric) {\n  return getLocalizedMetricName(getNoDiffMetric(metric));\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Select from 'sonar-ui-common/components/controls/Select';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getPossibleOperators } from '../utils';\n\ninterface Props {\n  metric: T.Metric;\n  onOperatorChange: (op: string) => void;\n  op?: string;\n}\n\nexport default class ConditionOperator extends React.PureComponent<Props> {\n  handleChange = ({ value }: { label: string; value: string }) => {\n    this.props.onOperatorChange(value);\n  };\n\n  getLabel(op: string, metric: T.Metric) {\n    return metric.type === 'RATING'\n      ? translate('quality_gates.operator', op, 'rating')\n      : translate('quality_gates.operator', op);\n  }\n\n  render() {\n    const operators = getPossibleOperators(this.props.metric);\n\n    if (Array.isArray(operators)) {\n      const operatorOptions = operators.map(op => {\n        const label = this.getLabel(op, this.props.metric);\n        return { label, value: op };\n      });\n\n      return (\n        <Select\n          autoFocus={true}\n          className=\"input-medium\"\n          clearable={false}\n          id=\"condition-operator\"\n          name=\"operator\"\n          onChange={this.handleChange}\n          options={operatorOptions}\n          searchable={false}\n          value={this.props.op}\n        />\n      );\n    } else {\n      return (\n        <span className=\"display-inline-block note abs-width-150\">\n          {this.getLabel(operators, this.props.metric)}\n        </span>\n      );\n    }\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { sortBy } from 'lodash';\nimport * as React from 'react';\nimport Select from 'sonar-ui-common/components/controls/Select';\nimport { getLocalizedMetricDomain, translate } from 'sonar-ui-common/helpers/l10n';\nimport { getLocalizedMetricNameNoDiffMetric } from '../utils';\n\ninterface Props {\n  metric?: T.Metric;\n  metrics: T.Metric[];\n  onMetricChange: (metric: T.Metric) => void;\n}\n\ninterface Option {\n  disabled?: boolean;\n  label: string;\n  value: string;\n}\n\nexport default class MetricSelect extends React.PureComponent<Props> {\n  handleChange = (option: Option | null) => {\n    if (option) {\n      const { metrics } = this.props;\n      const selectedMetric = metrics.find(metric => metric.key === option.value);\n      if (selectedMetric) {\n        this.props.onMetricChange(selectedMetric);\n      }\n    }\n  };\n\n  render() {\n    const { metric, metrics } = this.props;\n\n    const options: Array<Option & { domain?: string }> = sortBy(\n      metrics.map(metric => ({\n        value: metric.key,\n        label: getLocalizedMetricNameNoDiffMetric(metric),\n        domain: metric.domain\n      })),\n      'domain'\n    );\n\n    // Use \"disabled\" property to emulate optgroups.\n    const optionsWithDomains: Option[] = [];\n    options.forEach((option, index, options) => {\n      const previous = index > 0 ? options[index - 1] : null;\n      if (option.domain && (!previous || previous.domain !== option.domain)) {\n        optionsWithDomains.push({\n          value: '<domain>',\n          label: getLocalizedMetricDomain(option.domain),\n          disabled: true\n        });\n      }\n      optionsWithDomains.push(option);\n    });\n\n    return (\n      <Select\n        className=\"text-middle quality-gate-metric-select\"\n        id=\"condition-metric\"\n        onChange={this.handleChange}\n        options={optionsWithDomains}\n        placeholder={translate('search.search_for_metrics')}\n        value={metric && metric.key}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Select from 'sonar-ui-common/components/controls/Select';\n\ninterface Props {\n  name: string;\n  value: string;\n  metric: T.Metric;\n  onChange: (value: string) => void;\n}\n\nexport default class ThresholdInput extends React.PureComponent<Props> {\n  handleChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    this.props.onChange(e.currentTarget.value);\n  };\n\n  handleSelectChange = (option: { value: string } | null) => {\n    if (option) {\n      this.props.onChange(option.value);\n    } else {\n      this.props.onChange('');\n    }\n  };\n\n  renderRatingInput() {\n    const { name, value } = this.props;\n\n    const options = [\n      { label: 'A', value: '1' },\n      { label: 'B', value: '2' },\n      { label: 'C', value: '3' },\n      { label: 'D', value: '4' }\n    ];\n\n    return (\n      <Select\n        className=\"input-tiny text-middle\"\n        clearable={true}\n        id=\"condition-threshold\"\n        name={name}\n        onChange={this.handleSelectChange}\n        options={options}\n        placeholder=\"\"\n        searchable={false}\n        value={value}\n      />\n    );\n  }\n\n  render() {\n    const { name, value, metric } = this.props;\n\n    if (metric.type === 'RATING') {\n      return this.renderRatingInput();\n    }\n\n    return (\n      <input\n        className=\"input-tiny text-middle\"\n        data-type={metric.type}\n        id=\"condition-threshold\"\n        name={name}\n        onChange={this.handleChange}\n        type=\"text\"\n        value={value}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { getLocalizedMetricName, translate } from 'sonar-ui-common/helpers/l10n';\nimport { isDiffMetric } from 'sonar-ui-common/helpers/measures';\nimport { createCondition, updateCondition } from '../../../api/quality-gates';\nimport { getPossibleOperators } from '../utils';\nimport ConditionOperator from './ConditionOperator';\nimport MetricSelect from './MetricSelect';\nimport ThresholdInput from './ThresholdInput';\n\ninterface Props {\n  condition?: T.Condition;\n  metric?: T.Metric;\n  metrics?: T.Metric[];\n  header: string;\n  onAddCondition: (condition: T.Condition) => void;\n  onClose: () => void;\n  qualityGate: T.QualityGate;\n}\n\ninterface State {\n  error: string;\n  errorMessage?: string;\n  metric?: T.Metric;\n  op?: string;\n  scope: 'new' | 'overall';\n}\n\nexport default class ConditionModal extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      error: props.condition ? props.condition.error : '',\n      scope: 'new',\n      metric: props.metric ? props.metric : undefined,\n      op: props.condition ? props.condition.op : undefined\n    };\n  }\n\n  getSinglePossibleOperator(metric: T.Metric) {\n    const operators = getPossibleOperators(metric);\n    return Array.isArray(operators) ? undefined : operators;\n  }\n\n  handleFormSubmit = () => {\n    if (this.state.metric) {\n      const { condition, qualityGate } = this.props;\n      const newCondition: T.Omit<T.Condition, 'id'> = {\n        metric: this.state.metric.key,\n        op: this.getSinglePossibleOperator(this.state.metric) || this.state.op,\n        error: this.state.error\n      };\n      const submitPromise = condition\n        ? updateCondition({ id: condition.id, ...newCondition })\n        : createCondition({ gateId: qualityGate.id, ...newCondition });\n      return submitPromise.then(this.props.onAddCondition);\n    }\n    return Promise.reject();\n  };\n\n  handleScopeChange = (scope: 'new' | 'overall') => {\n    this.setState(({ metric }) => {\n      const { metrics } = this.props;\n      let correspondingMetric;\n\n      if (metric && metrics) {\n        const correspondingMetricKey =\n          scope === 'new' ? `new_${metric.key}` : metric.key.replace(/^new_/, '');\n        correspondingMetric = metrics.find(m => m.key === correspondingMetricKey);\n      }\n\n      return { scope, metric: correspondingMetric };\n    });\n  };\n\n  handleMetricChange = (metric: T.Metric) => {\n    this.setState({ metric, op: undefined, error: '' });\n  };\n\n  handleOperatorChange = (op: string) => {\n    this.setState({ op });\n  };\n\n  handleErrorChange = (error: string) => {\n    this.setState({ error });\n  };\n\n  render() {\n    const { header, metrics, onClose } = this.props;\n    const { op, error, scope, metric } = this.state;\n    return (\n      <ConfirmModal\n        confirmButtonText={header}\n        confirmDisable={metric === undefined}\n        header={header}\n        onClose={onClose}\n        onConfirm={this.handleFormSubmit}\n        size=\"small\">\n        {this.state.errorMessage && <Alert variant=\"error\">{this.state.errorMessage}</Alert>}\n\n        {this.props.metric === undefined && (\n          <div className=\"modal-field display-flex-center\">\n            <Radio checked={scope === 'new'} onCheck={this.handleScopeChange} value=\"new\">\n              <span data-test=\"quality-gates__condition-scope-new\">\n                {translate('quality_gates.conditions.new_code')}\n              </span>\n            </Radio>\n            <Radio\n              checked={scope === 'overall'}\n              className=\"big-spacer-left\"\n              onCheck={this.handleScopeChange}\n              value=\"overall\">\n              <span data-test=\"quality-gates__condition-scope-overall\">\n                {translate('quality_gates.conditions.overall_code')}\n              </span>\n            </Radio>\n          </div>\n        )}\n\n        <div className=\"modal-field\">\n          <label htmlFor=\"condition-metric\">\n            {translate('quality_gates.conditions.fails_when')}\n          </label>\n          {metrics && (\n            <MetricSelect\n              metric={metric}\n              metrics={metrics.filter(metric =>\n                scope === 'new' ? isDiffMetric(metric.key) : !isDiffMetric(metric.key)\n              )}\n              onMetricChange={this.handleMetricChange}\n            />\n          )}\n          {this.props.metric && (\n            <span className=\"note\">{getLocalizedMetricName(this.props.metric)}</span>\n          )}\n        </div>\n\n        {metric && (\n          <>\n            <div className=\"modal-field display-inline-block\">\n              <label htmlFor=\"condition-operator\">\n                {translate('quality_gates.conditions.operator')}\n              </label>\n              <ConditionOperator\n                metric={metric}\n                onOperatorChange={this.handleOperatorChange}\n                op={op}\n              />\n            </div>\n            <div className=\"modal-field display-inline-block spacer-left\">\n              <label htmlFor=\"condition-threshold\">\n                {translate('quality_gates.conditions.value')}\n              </label>\n              <ThresholdInput\n                metric={metric}\n                name=\"error\"\n                onChange={this.handleErrorChange}\n                value={error}\n              />\n            </div>\n          </>\n        )}\n      </ConfirmModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { DeleteButton, EditButton } from 'sonar-ui-common/components/controls/buttons';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport {\n  getLocalizedMetricName,\n  translate,\n  translateWithParameters\n} from 'sonar-ui-common/helpers/l10n';\nimport { formatMeasure } from 'sonar-ui-common/helpers/measures';\nimport { deleteCondition } from '../../../api/quality-gates';\nimport { getLocalizedMetricNameNoDiffMetric } from '../utils';\nimport ConditionModal from './ConditionModal';\n\ninterface Props {\n  condition: T.Condition;\n  canEdit: boolean;\n  metric: T.Metric;\n  onRemoveCondition: (Condition: T.Condition) => void;\n  onSaveCondition: (newCondition: T.Condition, oldCondition: T.Condition) => void;\n  qualityGate: T.QualityGate;\n  updated?: boolean;\n}\n\ninterface State {\n  deleteFormOpen: boolean;\n  modal: boolean;\n}\n\nexport default class Condition extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      deleteFormOpen: false,\n      modal: false\n    };\n  }\n\n  handleUpdateCondition = (newCondition: T.Condition) => {\n    this.props.onSaveCondition(newCondition, this.props.condition);\n  };\n\n  handleOpenUpdate = () => {\n    this.setState({ modal: true });\n  };\n\n  handleUpdateClose = () => {\n    this.setState({ modal: false });\n  };\n\n  handleDeleteClick = () => {\n    this.setState({ deleteFormOpen: true });\n  };\n\n  closeDeleteForm = () => {\n    this.setState({ deleteFormOpen: false });\n  };\n\n  removeCondition = (condition: T.Condition) => {\n    deleteCondition({ id: condition.id }).then(\n      () => this.props.onRemoveCondition(condition),\n      () => {}\n    );\n  };\n\n  renderOperator() {\n    // TODO can operator be missing?\n    const { op = 'GT' } = this.props.condition;\n    return this.props.metric.type === 'RATING'\n      ? translate('quality_gates.operator', op, 'rating')\n      : translate('quality_gates.operator', op);\n  }\n\n  render() {\n    const { condition, canEdit, metric, qualityGate, updated } = this.props;\n    return (\n      <tr className={classNames({ highlighted: updated })}>\n        <td className=\"text-middle\">\n          {getLocalizedMetricNameNoDiffMetric(metric)}\n          {metric.hidden && (\n            <span className=\"text-danger little-spacer-left\">{translate('deprecated')}</span>\n          )}\n        </td>\n\n        <td className=\"text-middle nowrap\">{this.renderOperator()}</td>\n\n        <td className=\"text-middle nowrap\">{formatMeasure(condition.error, metric.type)}</td>\n\n        {canEdit && (\n          <>\n            <td className=\"text-center thin\">\n              <EditButton\n                data-test=\"quality-gates__condition-update\"\n                onClick={this.handleOpenUpdate}\n              />\n            </td>\n            <td className=\"text-center thin\">\n              <DeleteButton\n                data-test=\"quality-gates__condition-delete\"\n                onClick={this.handleDeleteClick}\n              />\n            </td>\n            {this.state.modal && (\n              <ConditionModal\n                condition={condition}\n                header={translate('quality_gates.update_condition')}\n                metric={metric}\n                onAddCondition={this.handleUpdateCondition}\n                onClose={this.handleUpdateClose}\n                qualityGate={qualityGate}\n              />\n            )}\n            {this.state.deleteFormOpen && (\n              <ConfirmModal\n                confirmButtonText={translate('delete')}\n                confirmData={condition}\n                header={translate('quality_gates.delete_condition')}\n                isDestructive={true}\n                onClose={this.closeDeleteForm}\n                onConfirm={this.removeCondition}>\n                {translateWithParameters(\n                  'quality_gates.delete_condition.confirm.message',\n                  getLocalizedMetricName(this.props.metric)\n                )}\n              </ConfirmModal>\n            )}\n          </>\n        )}\n      </tr>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { differenceWith, map, sortBy, uniqBy } from 'lodash';\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ModalButton from 'sonar-ui-common/components/controls/ModalButton';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { getLocalizedMetricName, translate } from 'sonar-ui-common/helpers/l10n';\nimport { isDiffMetric } from 'sonar-ui-common/helpers/measures';\nimport DocumentationTooltip from '../../../components/common/DocumentationTooltip';\nimport { withAppState } from '../../../components/hoc/withAppState';\nimport { MetricKey } from '../../../types/metrics';\nimport Condition from './Condition';\nimport ConditionModal from './ConditionModal';\n\ninterface Props {\n  appState: Pick<T.AppState, 'branchesEnabled'>;\n  canEdit: boolean;\n  conditions: T.Condition[];\n  metrics: T.Dict<T.Metric>;\n  onAddCondition: (condition: T.Condition) => void;\n  onRemoveCondition: (Condition: T.Condition) => void;\n  onSaveCondition: (newCondition: T.Condition, oldCondition: T.Condition) => void;\n  qualityGate: T.QualityGate;\n  updatedConditionId?: number;\n}\n\nconst FORBIDDEN_METRIC_TYPES = ['DATA', 'DISTRIB', 'STRING', 'BOOL'];\nconst FORBIDDEN_METRICS: string[] = [\n  MetricKey.alert_status,\n  MetricKey.releasability_rating,\n  MetricKey.security_hotspots,\n  MetricKey.new_security_hotspots\n];\n\nexport class Conditions extends React.PureComponent<Props> {\n  renderConditionsTable = (conditions: T.Condition[], scope: 'new' | 'overall') => {\n    const {\n      qualityGate,\n      metrics,\n      canEdit,\n      onRemoveCondition,\n      onSaveCondition,\n      updatedConditionId\n    } = this.props;\n    return (\n      <table className=\"data zebra\" data-test={`quality-gates__conditions-${scope}`}>\n        <thead>\n          <tr>\n            <th className=\"nowrap\" style={{ width: 300 }}>\n              {translate('quality_gates.conditions.metric')}\n            </th>\n            <th className=\"nowrap\">{translate('quality_gates.conditions.operator')}</th>\n            <th className=\"nowrap\">{translate('quality_gates.conditions.value')}</th>\n            {canEdit && (\n              <>\n                <th className=\"thin\">{translate('edit')}</th>\n                <th className=\"thin\">{translate('delete')}</th>\n              </>\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {conditions.map(condition => (\n            <Condition\n              canEdit={canEdit}\n              condition={condition}\n              key={condition.id}\n              metric={metrics[condition.metric]}\n              onRemoveCondition={onRemoveCondition}\n              onSaveCondition={onSaveCondition}\n              qualityGate={qualityGate}\n              updated={condition.id === updatedConditionId}\n            />\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  render() {\n    const { appState, conditions, metrics, canEdit } = this.props;\n\n    const existingConditions = conditions.filter(condition => metrics[condition.metric]);\n    const sortedConditions = sortBy(\n      existingConditions,\n      condition => metrics[condition.metric] && metrics[condition.metric].name\n    );\n\n    const sortedConditionsOnOverallMetrics = sortedConditions.filter(\n      condition => !isDiffMetric(condition.metric)\n    );\n    const sortedConditionsOnNewMetrics = sortedConditions.filter(condition =>\n      isDiffMetric(condition.metric)\n    );\n\n    const duplicates: T.Condition[] = [];\n    const savedConditions = existingConditions.filter(condition => condition.id != null);\n    savedConditions.forEach(condition => {\n      const sameCount = savedConditions.filter(sample => sample.metric === condition.metric).length;\n      if (sameCount > 1) {\n        duplicates.push(condition);\n      }\n    });\n\n    const uniqDuplicates = uniqBy(duplicates, d => d.metric).map(condition => ({\n      ...condition,\n      metric: metrics[condition.metric]\n    }));\n\n    const availableMetrics = differenceWith(\n      map(metrics, metric => metric).filter(\n        metric =>\n          !metric.hidden &&\n          !FORBIDDEN_METRIC_TYPES.includes(metric.type) &&\n          !FORBIDDEN_METRICS.includes(metric.key)\n      ),\n      conditions,\n      (metric, condition) => metric.key === condition.metric\n    );\n\n    return (\n      <div className=\"quality-gate-section\">\n        {canEdit && (\n          <div className=\"pull-right\">\n            <ModalButton\n              modal={({ onClose }) => (\n                <ConditionModal\n                  header={translate('quality_gates.add_condition')}\n                  metrics={availableMetrics}\n                  onAddCondition={this.props.onAddCondition}\n                  onClose={onClose}\n                  qualityGate={this.props.qualityGate}\n                />\n              )}>\n              {({ onClick }) => (\n                <Button data-test=\"quality-gates__add-condition\" onClick={onClick}>\n                  {translate('quality_gates.add_condition')}\n                </Button>\n              )}\n            </ModalButton>\n          </div>\n        )}\n\n        <header className=\"display-flex-center spacer-bottom\">\n          <h3>{translate('quality_gates.conditions')}</h3>\n          <DocumentationTooltip\n            className=\"spacer-left\"\n            content={translate('quality_gates.conditions.help')}\n            links={[\n              {\n                href: '/documentation/user-guide/clean-as-you-code/',\n                label: translate('quality_gates.conditions.help.link')\n              }\n            ]}\n          />\n        </header>\n\n        {uniqDuplicates.length > 0 && (\n          <Alert variant=\"warning\">\n            <p>{translate('quality_gates.duplicated_conditions')}</p>\n            <ul className=\"list-styled spacer-top\">\n              {uniqDuplicates.map(d => (\n                <li key={d.metric.key}>{getLocalizedMetricName(d.metric)}</li>\n              ))}\n            </ul>\n          </Alert>\n        )}\n\n        {sortedConditionsOnNewMetrics.length > 0 && (\n          <div className=\"big-spacer-top\">\n            <h4>{translate('quality_gates.conditions.new_code.long')}</h4>\n\n            {appState.branchesEnabled && (\n              <p className=\"spacer-top spacer-bottom\">\n                {translate('quality_gates.conditions.new_code.description')}\n              </p>\n            )}\n\n            {this.renderConditionsTable(sortedConditionsOnNewMetrics, 'new')}\n          </div>\n        )}\n\n        {sortedConditionsOnOverallMetrics.length > 0 && (\n          <div className=\"big-spacer-top\">\n            <h4>{translate('quality_gates.conditions.overall_code.long')}</h4>\n\n            {appState.branchesEnabled && (\n              <p className=\"spacer-top spacer-bottom\">\n                {translate('quality_gates.conditions.overall_code.description')}\n              </p>\n            )}\n\n            {this.renderConditionsTable(sortedConditionsOnOverallMetrics, 'overall')}\n          </div>\n        )}\n\n        {existingConditions.length === 0 && (\n          <div className=\"big-spacer-top\">{translate('quality_gates.no_conditions')}</div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withAppState(Conditions);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { find, without } from 'lodash';\nimport * as React from 'react';\nimport SelectList, {\n  SelectListFilter,\n  SelectListSearchParams\n} from 'sonar-ui-common/components/controls/SelectList';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  associateGateWithProject,\n  dissociateGateWithProject,\n  searchProjects\n} from '../../../api/quality-gates';\n\ninterface Props {\n  canEdit?: boolean;\n  qualityGate: T.QualityGate;\n}\n\ninterface State {\n  needToReload: boolean;\n  lastSearchParams?: SelectListSearchParams;\n  projects: Array<{ key: string; name: string; selected: boolean }>;\n  projectsTotalCount?: number;\n  selectedProjects: string[];\n}\n\nexport default class Projects extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      needToReload: false,\n      projects: [],\n      selectedProjects: []\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchProjects = (searchParams: SelectListSearchParams) =>\n    searchProjects({\n      gateName: this.props.qualityGate.name,\n      page: searchParams.page,\n      pageSize: searchParams.pageSize,\n      query: searchParams.query !== '' ? searchParams.query : undefined,\n      selected: searchParams.filter\n    }).then(data => {\n      if (this.mounted) {\n        this.setState(prevState => {\n          const more = searchParams.page != null && searchParams.page > 1;\n\n          const projects = more ? [...prevState.projects, ...data.results] : data.results;\n          const newSelectedProjects = data.results\n            .filter(project => project.selected)\n            .map(project => project.key);\n          const selectedProjects = more\n            ? [...prevState.selectedProjects, ...newSelectedProjects]\n            : newSelectedProjects;\n\n          return {\n            lastSearchParams: searchParams,\n            needToReload: false,\n            projects,\n            projectsTotalCount: data.paging.total,\n            selectedProjects\n          };\n        });\n      }\n    });\n\n  handleSelect = (key: string) =>\n    associateGateWithProject({\n      gateId: this.props.qualityGate.id,\n      projectKey: key\n    }).then(() => {\n      if (this.mounted) {\n        this.setState(prevState => ({\n          needToReload: true,\n          selectedProjects: [...prevState.selectedProjects, key]\n        }));\n      }\n    });\n\n  handleUnselect = (key: string) =>\n    dissociateGateWithProject({\n      gateId: this.props.qualityGate.id,\n      projectKey: key\n    }).then(() => {\n      if (this.mounted) {\n        this.setState(prevState => ({\n          needToReload: true,\n          selectedProjects: without(prevState.selectedProjects, key)\n        }));\n      }\n    });\n\n  renderElement = (key: string): React.ReactNode => {\n    const project = find(this.state.projects, { key });\n    return (\n      <div className=\"select-list-list-item\">\n        {project === undefined ? (\n          key\n        ) : (\n          <>\n            {project.name}\n            <br />\n            <span className=\"note\">{project.key}</span>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <SelectList\n        elements={this.state.projects.map(project => project.key)}\n        elementsTotalCount={this.state.projectsTotalCount}\n        labelAll={translate('quality_gates.projects.all')}\n        labelSelected={translate('quality_gates.projects.with')}\n        labelUnselected={translate('quality_gates.projects.without')}\n        needToReload={\n          this.state.needToReload &&\n          this.state.lastSearchParams &&\n          this.state.lastSearchParams.filter !== SelectListFilter.All\n        }\n        onSearch={this.fetchProjects}\n        onSelect={this.handleSelect}\n        onUnselect={this.handleUnselect}\n        readOnly={!this.props.canEdit}\n        renderElement={this.renderElement}\n        selectedElements={this.state.selectedProjects}\n        withPaging={true}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport Conditions from './Conditions';\nimport Projects from './Projects';\n\nexport interface DetailsContentProps {\n  isDefault?: boolean;\n  metrics: T.Dict<T.Metric>;\n  onAddCondition: (condition: T.Condition) => void;\n  onRemoveCondition: (Condition: T.Condition) => void;\n  onSaveCondition: (newCondition: T.Condition, oldCondition: T.Condition) => void;\n  qualityGate: T.QualityGate;\n  updatedConditionId?: number;\n}\n\nexport function DetailsContent(props: DetailsContentProps) {\n  const { isDefault, metrics, qualityGate, updatedConditionId } = props;\n  const conditions = qualityGate.conditions || [];\n  const actions = qualityGate.actions || ({} as any);\n\n  return (\n    <div className=\"layout-page-main-inner\">\n      <Conditions\n        canEdit={actions.manageConditions}\n        conditions={conditions}\n        metrics={metrics}\n        onAddCondition={props.onAddCondition}\n        onRemoveCondition={props.onRemoveCondition}\n        onSaveCondition={props.onSaveCondition}\n        qualityGate={qualityGate}\n        updatedConditionId={updatedConditionId}\n      />\n\n      <div className=\"quality-gate-section\" id=\"quality-gate-projects\">\n        <header className=\"display-flex-center spacer-bottom\">\n          <h3>{translate('quality_gates.projects')}</h3>\n          <HelpTooltip\n            className=\"spacer-left\"\n            overlay={\n              <div className=\"big-padded-top big-padded-bottom\">\n                {translate('quality_gates.projects.help')}\n              </div>\n            }\n          />\n        </header>\n        {isDefault ? (\n          translate('quality_gates.projects_for_default')\n        ) : (\n          <Projects\n            canEdit={actions.associateProjects}\n            // pass unique key to re-mount the component when the quality gate changes\n            key={qualityGate.id}\n            qualityGate={qualityGate}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(DetailsContent);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { copyQualityGate } from '../../../api/quality-gates';\nimport { Router, withRouter } from '../../../components/hoc/withRouter';\nimport { getQualityGateUrl } from '../../../helpers/urls';\n\ninterface Props {\n  onClose: () => void;\n  onCopy: () => Promise<void>;\n  qualityGate: T.QualityGate;\n  router: Pick<Router, 'push'>;\n}\n\ninterface State {\n  name: string;\n}\n\nexport class CopyQualityGateForm extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { name: props.qualityGate.name };\n  }\n\n  handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handleCopy = () => {\n    const { qualityGate } = this.props;\n    const { name } = this.state;\n\n    if (!name) {\n      return undefined;\n    }\n\n    return copyQualityGate({ id: qualityGate.id, name }).then(newQualityGate => {\n      this.props.onCopy();\n      this.props.router.push(getQualityGateUrl(String(newQualityGate.id)));\n    });\n  };\n\n  render() {\n    const { qualityGate } = this.props;\n    const { name } = this.state;\n    const confirmDisable = !name || (qualityGate && qualityGate.name === name);\n\n    return (\n      <ConfirmModal\n        confirmButtonText={translate('copy')}\n        confirmDisable={confirmDisable}\n        header={translate('quality_gates.copy')}\n        onClose={this.props.onClose}\n        onConfirm={this.handleCopy}\n        size=\"small\">\n        <div className=\"modal-field\">\n          <label htmlFor=\"quality-gate-form-name\">\n            {translate('name')}\n            <em className=\"mandatory\">*</em>\n          </label>\n          <input\n            autoFocus={true}\n            id=\"quality-gate-form-name\"\n            maxLength={100}\n            onChange={this.handleNameChange}\n            required={true}\n            size={50}\n            type=\"text\"\n            value={name}\n          />\n        </div>\n      </ConfirmModal>\n    );\n  }\n}\n\nexport default withRouter(CopyQualityGateForm);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ConfirmButton from 'sonar-ui-common/components/controls/ConfirmButton';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { deleteQualityGate } from '../../../api/quality-gates';\nimport { Router, withRouter } from '../../../components/hoc/withRouter';\nimport { getQualityGatesUrl } from '../../../helpers/urls';\n\ninterface Props {\n  onDelete: () => Promise<void>;\n  qualityGate: T.QualityGate;\n  router: Pick<Router, 'push'>;\n}\n\nexport class DeleteQualityGateForm extends React.PureComponent<Props> {\n  onDelete = () => {\n    const { qualityGate } = this.props;\n    return deleteQualityGate({ id: qualityGate.id })\n      .then(this.props.onDelete)\n      .then(() => {\n        this.props.router.push(getQualityGatesUrl());\n      });\n  };\n\n  render() {\n    const { qualityGate } = this.props;\n\n    return (\n      <ConfirmButton\n        confirmButtonText={translate('delete')}\n        isDestructive={true}\n        modalBody={translateWithParameters(\n          'quality_gates.delete.confirm.message',\n          qualityGate.name\n        )}\n        modalHeader={translate('quality_gates.delete')}\n        onConfirm={this.onDelete}>\n        {({ onClick }) => (\n          <Button\n            className=\"little-spacer-left button-red\"\n            id=\"quality-gate-delete\"\n            onClick={onClick}>\n            {translate('delete')}\n          </Button>\n        )}\n      </ConfirmButton>\n    );\n  }\n}\n\nexport default withRouter(DeleteQualityGateForm);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { renameQualityGate } from '../../../api/quality-gates';\n\ninterface Props {\n  onClose: () => void;\n  onRename: () => Promise<void>;\n  qualityGate: T.QualityGate;\n}\n\ninterface State {\n  name: string;\n}\n\nexport default class RenameQualityGateForm extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { name: props.qualityGate.name };\n  }\n\n  handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handleRename = () => {\n    const { qualityGate } = this.props;\n    const { name } = this.state;\n\n    if (!name) {\n      return undefined;\n    }\n\n    return renameQualityGate({ id: qualityGate.id, name }).then(() => this.props.onRename());\n  };\n\n  render() {\n    const { qualityGate } = this.props;\n    const { name } = this.state;\n    const confirmDisable = !name || (qualityGate && qualityGate.name === name);\n\n    return (\n      <ConfirmModal\n        confirmButtonText={translate('rename')}\n        confirmDisable={confirmDisable}\n        header={translate('quality_gates.rename')}\n        onClose={this.props.onClose}\n        onConfirm={this.handleRename}\n        size=\"small\">\n        <div className=\"modal-field\">\n          <label htmlFor=\"quality-gate-form-name\">\n            {translate('name')}\n            <em className=\"mandatory\">*</em>\n          </label>\n          <input\n            autoFocus={true}\n            id=\"quality-gate-form-name\"\n            maxLength={100}\n            onChange={this.handleNameChange}\n            required={true}\n            size={50}\n            type=\"text\"\n            value={name}\n          />\n        </div>\n      </ConfirmModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ModalButton from 'sonar-ui-common/components/controls/ModalButton';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { setQualityGateAsDefault } from '../../../api/quality-gates';\nimport BuiltInQualityGateBadge from './BuiltInQualityGateBadge';\nimport CopyQualityGateForm from './CopyQualityGateForm';\nimport DeleteQualityGateForm from './DeleteQualityGateForm';\nimport RenameQualityGateForm from './RenameQualityGateForm';\n\ninterface Props {\n  onSetDefault: () => void;\n  qualityGate: T.QualityGate;\n  refreshItem: () => Promise<void>;\n  refreshList: () => Promise<void>;\n}\n\nexport default class DetailsHeader extends React.PureComponent<Props> {\n  handleActionRefresh = () => {\n    const { refreshItem, refreshList } = this.props;\n    return Promise.all([refreshItem(), refreshList()]).then(\n      () => {},\n      () => {}\n    );\n  };\n\n  handleSetAsDefaultClick = () => {\n    const { qualityGate } = this.props;\n    if (!qualityGate.isDefault) {\n      // Optimistic update\n      this.props.onSetDefault();\n      setQualityGateAsDefault({ id: qualityGate.id }).then(\n        this.handleActionRefresh,\n        this.handleActionRefresh\n      );\n    }\n  };\n\n  render() {\n    const { qualityGate } = this.props;\n    const actions = qualityGate.actions || ({} as any);\n    return (\n      <div className=\"layout-page-header-panel layout-page-main-header issues-main-header\">\n        <div className=\"layout-page-header-panel-inner layout-page-main-header-inner\">\n          <div className=\"layout-page-main-inner\">\n            <div className=\"pull-left display-flex-center\">\n              <h2>{qualityGate.name}</h2>\n              {qualityGate.isBuiltIn && <BuiltInQualityGateBadge className=\"spacer-left\" />}\n            </div>\n\n            <div className=\"pull-right\">\n              {actions.rename && (\n                <ModalButton\n                  modal={({ onClose }) => (\n                    <RenameQualityGateForm\n                      onClose={onClose}\n                      onRename={this.handleActionRefresh}\n                      qualityGate={qualityGate}\n                    />\n                  )}>\n                  {({ onClick }) => (\n                    <Button id=\"quality-gate-rename\" onClick={onClick}>\n                      {translate('rename')}\n                    </Button>\n                  )}\n                </ModalButton>\n              )}\n              {actions.copy && (\n                <ModalButton\n                  modal={({ onClose }) => (\n                    <CopyQualityGateForm\n                      onClose={onClose}\n                      onCopy={this.handleActionRefresh}\n                      qualityGate={qualityGate}\n                    />\n                  )}>\n                  {({ onClick }) => (\n                    <Button className=\"little-spacer-left\" id=\"quality-gate-copy\" onClick={onClick}>\n                      {translate('copy')}\n                    </Button>\n                  )}\n                </ModalButton>\n              )}\n              {actions.setAsDefault && (\n                <Button\n                  className=\"little-spacer-left\"\n                  id=\"quality-gate-toggle-default\"\n                  onClick={this.handleSetAsDefaultClick}>\n                  {translate('set_as_default')}\n                </Button>\n              )}\n              {actions.delete && (\n                <DeleteQualityGateForm\n                  onDelete={this.props.refreshList}\n                  qualityGate={qualityGate}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { connect } from 'react-redux';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { fetchQualityGate } from '../../../api/quality-gates';\nimport addGlobalSuccessMessage from '../../../app/utils/addGlobalSuccessMessage';\nimport { fetchMetrics } from '../../../store/rootActions';\nimport { getMetrics, Store } from '../../../store/rootReducer';\nimport { addCondition, checkIfDefault, deleteCondition, replaceCondition } from '../utils';\nimport DetailsContent from './DetailsContent';\nimport DetailsHeader from './DetailsHeader';\n\ninterface OwnProps {\n  id: string;\n  onSetDefault: (qualityGate: T.QualityGate) => void;\n  qualityGates: T.QualityGate[];\n  refreshQualityGates: () => Promise<void>;\n}\n\ninterface StateToProps {\n  metrics: T.Dict<T.Metric>;\n}\n\ninterface DispatchToProps {\n  fetchMetrics: () => void;\n}\n\ntype Props = StateToProps & DispatchToProps & OwnProps;\n\ninterface State {\n  loading: boolean;\n  qualityGate?: T.QualityGate;\n  updatedConditionId?: number;\n}\n\nexport class Details extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { loading: true };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.props.fetchMetrics();\n    this.fetchDetails();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.id !== this.props.id) {\n      this.fetchDetails();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchDetails = () => {\n    const { id } = this.props;\n    this.setState({ loading: true });\n    return fetchQualityGate({ id }).then(\n      qualityGate => {\n        if (this.mounted) {\n          this.setState({ loading: false, qualityGate, updatedConditionId: undefined });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  handleAddCondition = (condition: T.Condition) => {\n    this.setState(({ qualityGate }) => {\n      if (!qualityGate) {\n        return null;\n      }\n      addGlobalSuccessMessage(translate('quality_gates.condition_added'));\n      return {\n        qualityGate: addCondition(qualityGate, condition),\n        updatedConditionId: condition.id\n      };\n    });\n  };\n\n  handleSaveCondition = (newCondition: T.Condition, oldCondition: T.Condition) => {\n    this.setState(({ qualityGate }) => {\n      if (!qualityGate) {\n        return null;\n      }\n      addGlobalSuccessMessage(translate('quality_gates.condition_updated'));\n      return {\n        qualityGate: replaceCondition(qualityGate, newCondition, oldCondition),\n        updatedConditionId: newCondition.id\n      };\n    });\n  };\n\n  handleRemoveCondition = (condition: T.Condition) => {\n    this.setState(({ qualityGate }) => {\n      if (!qualityGate) {\n        return null;\n      }\n      addGlobalSuccessMessage(translate('quality_gates.condition_deleted'));\n      return {\n        qualityGate: deleteCondition(qualityGate, condition),\n        updatedConditionId: undefined\n      };\n    });\n  };\n\n  handleSetDefault = () => {\n    this.setState(({ qualityGate }) => {\n      if (!qualityGate) {\n        return null;\n      }\n      this.props.onSetDefault(qualityGate);\n      const newQualityGate: T.QualityGate = {\n        ...qualityGate,\n        actions: { ...qualityGate.actions, delete: false, setAsDefault: false }\n      };\n      return { qualityGate: newQualityGate };\n    });\n  };\n\n  render() {\n    const { metrics, refreshQualityGates } = this.props;\n    const { loading, qualityGate, updatedConditionId } = this.state;\n\n    return (\n      <div className=\"layout-page-main\">\n        <DeferredSpinner loading={loading} timeout={200}>\n          {qualityGate && (\n            <>\n              <Helmet defer={false} title={qualityGate.name} />\n              <DetailsHeader\n                onSetDefault={this.handleSetDefault}\n                qualityGate={qualityGate}\n                refreshItem={this.fetchDetails}\n                refreshList={refreshQualityGates}\n              />\n              <DetailsContent\n                isDefault={checkIfDefault(qualityGate, this.props.qualityGates)}\n                metrics={metrics}\n                onAddCondition={this.handleAddCondition}\n                onRemoveCondition={this.handleRemoveCondition}\n                onSaveCondition={this.handleSaveCondition}\n                qualityGate={qualityGate}\n                updatedConditionId={updatedConditionId}\n              />\n            </>\n          )}\n        </DeferredSpinner>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps: DispatchToProps = { fetchMetrics };\n\nconst mapStateToProps = (state: Store): StateToProps => ({\n  metrics: getMetrics(state)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Details);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Link } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getQualityGateUrl } from '../../../helpers/urls';\nimport BuiltInQualityGateBadge from './BuiltInQualityGateBadge';\n\ninterface Props {\n  qualityGates: T.QualityGate[];\n}\n\nexport default function List({ qualityGates }: Props) {\n  return (\n    <div className=\"list-group\">\n      {qualityGates.map(qualityGate => (\n        <Link\n          activeClassName=\"active\"\n          className=\"list-group-item display-flex-center\"\n          data-id={qualityGate.id}\n          key={qualityGate.id}\n          to={getQualityGateUrl(String(qualityGate.id))}>\n          <span className=\"flex-1\">{qualityGate.name}</span>\n          {qualityGate.isDefault && (\n            <span className=\"badge little-spacer-left\">{translate('default')}</span>\n          )}\n          {qualityGate.isBuiltIn && <BuiltInQualityGateBadge className=\"little-spacer-left\" />}\n        </Link>\n      ))}\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { createQualityGate } from '../../../api/quality-gates';\nimport { Router, withRouter } from '../../../components/hoc/withRouter';\nimport { getQualityGateUrl } from '../../../helpers/urls';\n\ninterface Props {\n  onClose: () => void;\n  onCreate: () => Promise<void>;\n  router: Pick<Router, 'push'>;\n}\n\ninterface State {\n  name: string;\n}\n\nexport class CreateQualityGateForm extends React.PureComponent<Props, State> {\n  state: State = { name: '' };\n\n  handleNameChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handleCreate = async () => {\n    const { name } = this.state;\n\n    if (name) {\n      const qualityGate = await createQualityGate({ name });\n\n      await this.props.onCreate();\n\n      this.props.router.push(getQualityGateUrl(String(qualityGate.id)));\n    }\n  };\n\n  render() {\n    const { name } = this.state;\n    return (\n      <ConfirmModal\n        confirmButtonText={translate('save')}\n        confirmDisable={!name}\n        header={translate('quality_gates.create')}\n        onClose={this.props.onClose}\n        onConfirm={this.handleCreate}\n        size=\"small\">\n        <div className=\"modal-field\">\n          <label htmlFor=\"quality-gate-form-name\">\n            {translate('name')}\n            <em className=\"mandatory\">*</em>\n          </label>\n          <input\n            autoFocus={true}\n            id=\"quality-gate-form-name\"\n            maxLength={100}\n            onChange={this.handleNameChange}\n            required={true}\n            size={50}\n            type=\"text\"\n            value={name}\n          />\n        </div>\n      </ConfirmModal>\n    );\n  }\n}\n\nexport default withRouter(CreateQualityGateForm);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ModalButton from 'sonar-ui-common/components/controls/ModalButton';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport DocumentationTooltip from '../../../components/common/DocumentationTooltip';\nimport CreateQualityGateForm from './CreateQualityGateForm';\n\ninterface Props {\n  canCreate: boolean;\n  refreshQualityGates: () => Promise<void>;\n}\n\nexport default function ListHeader({ canCreate, refreshQualityGates }: Props) {\n  return (\n    <header className=\"page-header\">\n      {canCreate && (\n        <div className=\"page-actions\">\n          <ModalButton\n            modal={({ onClose }) => (\n              <CreateQualityGateForm onClose={onClose} onCreate={refreshQualityGates} />\n            )}>\n            {({ onClick }) => (\n              <Button data-test=\"quality-gates__add\" onClick={onClick}>\n                {translate('create')}\n              </Button>\n            )}\n          </ModalButton>\n        </div>\n      )}\n\n      <div className=\"display-flex-center\">\n        <h1 className=\"page-title\">{translate('quality_gates.page')}</h1>\n        <DocumentationTooltip\n          className=\"spacer-left\"\n          content={translate('quality_gates.help')}\n          links={[\n            {\n              href: '/documentation/user-guide/quality-gates/',\n              label: translate('learn_more')\n            }\n          ]}\n        />\n      </div>\n    </header>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { WithRouterProps } from 'react-router';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  addSideBarClass,\n  addWhitePageClass,\n  removeSideBarClass,\n  removeWhitePageClass\n} from 'sonar-ui-common/helpers/pages';\nimport { fetchQualityGates } from '../../../api/quality-gates';\nimport Suggestions from '../../../app/components/embed-docs-modal/Suggestions';\nimport ScreenPositionHelper from '../../../components/common/ScreenPositionHelper';\nimport '../../../components/search-navigator.css';\nimport { getQualityGateUrl } from '../../../helpers/urls';\nimport '../styles.css';\nimport Details from './Details';\nimport List from './List';\nimport ListHeader from './ListHeader';\n\ninterface State {\n  canCreate: boolean;\n  loading: boolean;\n  qualityGates: T.QualityGate[];\n}\n\nclass App extends React.PureComponent<Pick<WithRouterProps, 'params' | 'router'>, State> {\n  mounted = false;\n  state: State = { canCreate: false, loading: true, qualityGates: [] };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchQualityGates();\n    addWhitePageClass();\n    addSideBarClass();\n  }\n\n  componentDidUpdate(prevProps: WithRouterProps) {\n    if (prevProps.params.id !== undefined && this.props.params.id === undefined) {\n      this.openDefault(this.state.qualityGates);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n    removeWhitePageClass();\n    removeSideBarClass();\n  }\n\n  fetchQualityGates = () => {\n    return fetchQualityGates().then(\n      ({ actions, qualitygates: qualityGates }) => {\n        if (this.mounted) {\n          this.setState({ canCreate: actions.create, loading: false, qualityGates });\n\n          if (!this.props.params.id) {\n            this.openDefault(qualityGates);\n          }\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  openDefault(qualityGates: T.QualityGate[]) {\n    const defaultQualityGate = qualityGates.find(gate => Boolean(gate.isDefault))!;\n    this.props.router.replace(getQualityGateUrl(String(defaultQualityGate.id)));\n  }\n\n  handleSetDefault = (qualityGate: T.QualityGate) => {\n    this.setState(({ qualityGates }) => {\n      return {\n        qualityGates: qualityGates.map(candidate => {\n          if (candidate.isDefault || candidate.id === qualityGate.id) {\n            return { ...candidate, isDefault: candidate.id === qualityGate.id };\n          }\n          return candidate;\n        })\n      };\n    });\n  };\n\n  render() {\n    const { id } = this.props.params;\n    const { canCreate, qualityGates } = this.state;\n    const defaultTitle = translate('quality_gates.page');\n\n    return (\n      <>\n        <Helmet defaultTitle={defaultTitle} defer={false} titleTemplate={`%s - ${defaultTitle}`} />\n        <div className=\"layout-page\" id=\"quality-gates-page\">\n          <Suggestions suggestions=\"quality_gates\" />\n\n          <ScreenPositionHelper className=\"layout-page-side-outer\">\n            {({ top }) => (\n              <div className=\"layout-page-side\" style={{ top }}>\n                <div className=\"layout-page-side-inner\">\n                  <div className=\"layout-page-filters\">\n                    <ListHeader\n                      canCreate={canCreate}\n                      refreshQualityGates={this.fetchQualityGates}\n                    />\n                    <DeferredSpinner loading={this.state.loading}>\n                      <List qualityGates={qualityGates} />\n                    </DeferredSpinner>\n                  </div>\n                </div>\n              </div>\n            )}\n          </ScreenPositionHelper>\n\n          {id !== undefined && (\n            <Details\n              id={id}\n              onSetDefault={this.handleSetDefault}\n              qualityGates={this.state.qualityGates}\n              refreshQualityGates={this.fetchQualityGates}\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { SuggestionsContext } from './SuggestionsContext';\n\ninterface Props {\n  suggestions: string;\n}\n\nexport default function Suggestions({ suggestions }: Props) {\n  return (\n    <SuggestionsContext.Consumer>\n      {({ addSuggestions, removeSuggestions }) => (\n        <SuggestionsInner\n          addSuggestions={addSuggestions}\n          removeSuggestions={removeSuggestions}\n          suggestions={suggestions}\n        />\n      )}\n    </SuggestionsContext.Consumer>\n  );\n}\n\ninterface SuggestionsInnerProps {\n  addSuggestions: (key: string) => void;\n  removeSuggestions: (key: string) => void;\n  suggestions: string;\n}\n\nclass SuggestionsInner extends React.PureComponent<SuggestionsInnerProps> {\n  componentDidMount() {\n    this.props.addSuggestions(this.props.suggestions);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.suggestions !== this.props.suggestions) {\n      this.props.removeSuggestions(this.props.suggestions);\n      this.props.addSuggestions(prevProps.suggestions);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeSuggestions(this.props.suggestions);\n  }\n\n  render() {\n    return null;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as globalMessages from '../../store/globalMessages';\nimport getStore from './getStore';\n\nexport default function addGlobalSuccessMessage(message: string): void {\n  const store = getStore();\n  store.dispatch(globalMessages.addGlobalSuccessMessage(message));\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { debounce } from 'lodash';\nimport * as React from 'react';\n\ninterface Props {\n  className?: string;\n  children: (position: { top: number; left: number }) => React.ReactElement<any>;\n}\n\nexport default class ScreenPositionHelper extends React.PureComponent<Props> {\n  container?: HTMLDivElement;\n  debouncedOnResize: () => void;\n\n  constructor(props: Props) {\n    super(props);\n    this.debouncedOnResize = debounce(() => this.forceUpdate(), 250);\n  }\n\n  componentDidMount() {\n    this.forceUpdate();\n    window.addEventListener('resize', this.debouncedOnResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.debouncedOnResize);\n  }\n\n  getPosition = () => {\n    const containerPos = this.container && this.container.getBoundingClientRect();\n    if (!containerPos) {\n      return { top: 0, left: 0 };\n    }\n    return {\n      top: window.pageYOffset + containerPos.top,\n      left: window.pageXOffset + containerPos.left\n    };\n  };\n\n  render() {\n    return (\n      <div\n        className={this.props.className}\n        ref={container => (this.container = container as HTMLDivElement)}>\n        {this.props.children(this.getPosition())}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Link } from 'react-router';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport DetachIcon from 'sonar-ui-common/components/icons/DetachIcon';\nimport { isWebUri } from 'valid-url';\n\nexport interface DocumentationTooltipProps {\n  children?: React.ReactNode;\n  className?: string;\n  content?: React.ReactNode;\n  links?: Array<{ href: string; label: string; inPlace?: boolean }>;\n  title?: string;\n}\n\nexport default function DocumentationTooltip(props: DocumentationTooltipProps) {\n  const { className, content, links, title } = props;\n\n  return (\n    <HelpTooltip\n      className={className}\n      overlay={\n        <div className=\"big-padded-top big-padded-bottom\">\n          {title && (\n            <div className=\"spacer-bottom\">\n              <strong>{title}</strong>\n            </div>\n          )}\n\n          {content && <p>{content}</p>}\n\n          {links && (\n            <>\n              <hr className=\"big-spacer-top big-spacer-bottom\" />\n\n              {links.map(({ href, label, inPlace }) => (\n                <div className=\"little-spacer-bottom\" key={label}>\n                  {inPlace ? (\n                    <Link to={href}>\n                      <span>{label}</span>\n                    </Link>\n                  ) : (\n                    <a\n                      className=\"display-inline-flex-center link-with-icon\"\n                      href={href}\n                      rel=\"noopener noreferrer\"\n                      target=\"_blank\">\n                      {isWebUri(href) && <DetachIcon size={14} className=\"spacer-right\" />}\n                      <span>{label}</span>\n                    </a>\n                  )}\n                </div>\n              ))}\n            </>\n          )}\n        </div>\n      }>\n      {props.children}\n    </HelpTooltip>\n  );\n}\n","var api = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../node_modules/postcss-loader/src/index.js??postcss!./search-navigator.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".search-navigator.sticky .search-navigator-workspace-header{position:fixed;z-index:50;top:0;left:300px;right:0}.search-navigator.sticky .search-navigator-workspace-details,.search-navigator.sticky .search-navigator-workspace-list{padding-top:43px}.search-navigator-facet-box{background-color:#f3f3f3;font-size:13px}.search-navigator-facet-box.leak-facet-box{background-color:#fbf3d5;border:1px solid #f1e8cb}.search-navigator-facet-box.is-inner{margin-left:8px;padding-left:12px;border-left:1px solid #e6e6e6}.search-navigator-facet-box.is-inner .search-navigator-facet-header{padding-top:6px;padding-bottom:6px}.leak-facet-box:not(.hidden)+.leak-facet-box{border-top:none}.search-navigator-facet-box-forbidden{background-color:transparent;opacity:.5}.search-navigator-facet-box-forbidden .search-navigator-facet-container,.search-navigator-facet-box-forbidden .search-navigator-facet-empty,.search-navigator-facet-box-forbidden .search-navigator-facet-list{display:none}.search-navigator-facet-box-forbidden .search-navigator-facet-header{color:#777}.search-navigator-facet-box-forbidden .search-navigator-facet-header:hover{color:#4b9fd5}.search-navigator-facet-box-forbidden .search-navigator-facet-header{cursor:default}.search-navigator-facet-box-forbidden .search-navigator-facet-header:hover{color:#777}.search-navigator-facet{position:relative;display:inline-flex;justify-content:space-between;align-items:center;width:100%;height:24px;margin:0 0 1px;padding:0 6px;border:1px solid transparent;border-radius:2px;box-sizing:border-box;white-space:normal;opacity:.3;cursor:not-allowed;transition:none}a.search-navigator-facet{opacity:1;cursor:pointer}a.search-navigator-facet .facet-name{color:#444}.search-navigator-facet.active,a.search-navigator-facet:focus,a.search-navigator-facet:hover{border-color:#4b9fd5}.search-navigator-facet.facet-category{opacity:1;cursor:default}.search-navigator-facet.facet-category .facet-name{color:#777}.search-navigator-facet .facet-name{flex:1 1 auto;min-width:0;line-height:16px;padding:1px 0;color:#777;font-size:12px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.search-navigator-facet .facet-stat{display:flex;align-items:center;margin-left:8px;color:#777;font-size:12px}.search-navigator-facet .facet-toggle{display:none;float:left;height:16px;line-height:16px;margin-top:-1px;padding:0 5px;border-radius:2px;font-size:11px;text-transform:lowercase}.search-navigator-facet .facet-toggle:hover{color:#444}.search-navigator-facet .facet-toggle-active.facet-toggle-green{background-color:#0a0;color:#fff}.search-navigator-facet .facet-toggle-active.facet-toggle-red{background-color:#d4333f;color:#fff}.leak-facet-box .search-navigator-facet .facet-name,.leak-facet-box .search-navigator-facet .facet-stat{background-color:#fbf3d5}.leak-facet-box .search-navigator-facet .facet-stat:before{background-image:linear-gradient(90deg,rgba(251,243,213,0),#fbf3d5 75%)}.search-navigator-facet.active{background-color:#cae3f2;text-decoration:none}.search-navigator-facet.active .facet-toggle{display:inline}.search-navigator-facet.compare .facet-toggle{cursor:not-allowed;opacity:.5}.search-navigator-facet.compare .facet-toggle.facet-toggle-green{background-color:#0a0;color:#fff}.search-navigator-facet.compare .facet-toggle.facet-toggle-red{background-color:transparent;color:#777}.search-navigator-facet-half{width:45%}.search-navigator-facet-half:nth-child(odd){margin-right:10%}.search-navigator-facet-highlight-under-container{margin-bottom:1px}.search-navigator-facet-highlight-under-container .search-navigator-facet{margin-bottom:0}.search-navigator-facet-highlight-under-container .search-navigator-facet.active,.search-navigator-facet-highlight-under-container .search-navigator-facet:hover{border-bottom:none;padding-bottom:1px;border-radius:2px 2px 0 0}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet,.search-navigator-facet-highlight-under-container .search-navigator-facet:hover~.search-navigator-facet{border-top:none;border-bottom:none;border-left-color:#4b9fd5;border-right-color:#4b9fd5;border-radius:0}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:last-of-type,.search-navigator-facet-highlight-under-container .search-navigator-facet:hover~.search-navigator-facet:last-of-type{border-bottom:1px solid #4b9fd5;border-radius:0 0 2px 2px}.search-navigator-facet-highlight-under-container .search-navigator-facet.active:last-of-type,.search-navigator-facet-highlight-under-container .search-navigator-facet:hover:last-of-type{border-bottom:1px solid #4b9fd5;border-radius:2px}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet{background-color:#cae3f2;text-decoration:none}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet .facet-toggle{display:inline}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:hover,.search-navigator-facet-highlight-under-container .search-navigator-facet:hover~.search-navigator-facet.active{border-top:1px solid #4b9fd5}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:hover,.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:hover~.search-navigator-facet{background-color:#a1cde8;text-decoration:none}.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:hover .facet-toggle,.search-navigator-facet-highlight-under-container .search-navigator-facet.active~.search-navigator-facet:hover~.search-navigator-facet .facet-toggle{display:inline}.search-navigator-facet-header{display:block;flex-shrink:0;padding:8px 0;color:#444;font-weight:600;overflow:hidden;white-space:nowrap}.search-navigator-facet-header>a{border-bottom:none;color:#444}.search-navigator-facet-header>a:focus,.search-navigator-facet-header>a:hover{color:#4b9fd5}.search-navigator-facet-header>.note{font-weight:400}.search-navigator-facet-header-value{display:block;overflow:hidden}.search-navigator-facet-header-value>.badge{display:block}.search-navigator-facet-header-button{flex-shrink:0;margin-left:auto}.search-navigator-facet-header-wrapper{display:flex;align-items:center}.search-navigator-facet-list{padding-bottom:8px;font-size:0}.search-navigator-facet-list-title{margin:0 8px 4px;font-size:12px;font-weight:700}.search-navigator-facet-list+.search-navigator-facet-list>.search-navigator-facet-list-title{border-top:1px solid #e6e6e6;padding-top:8px}.search-navigator-facet-empty{margin:0;padding:0 10px 10px;color:#444;font-size:12px;white-space:nowrap}.search-navigator-facet-footer{display:block;padding-bottom:8px;border-bottom:none}.search-navigator-facet-container{margin-top:6px;padding:0 10px 16px}.search-navigator-date-facet-selection{position:relative;padding-left:8px;font-size:12px}.search-navigator-date-facet-selection:after,.search-navigator-date-facet-selection:before{display:table;content:\\\"\\\";line-height:0}.search-navigator-date-facet-selection:after{clear:both}.search-navigator-date-facet-selection .date-input-control-input{width:115px!important}.search-navigator-date-facet-selection-dropdown-left{float:left;border-bottom:none}.search-navigator-date-facet-selection-dropdown-right{float:right;border-bottom:none}.search-navigator-date-facet-selection-input-left{position:absolute;left:0;width:100px;visibility:hidden}.search-navigator-date-facet-selection-input-right{position:absolute;right:0;width:100px;visibility:hidden}.search-navigator-date-facet-selection .date-input-control:not(:first-of-type) .date-input-calendar{left:auto;right:0}.search-navigator-filters{position:relative;padding:5px 10px;background-color:#f3f3f3}.search-navigator-filters:after,.search-navigator-filters:before{display:table;content:\\\"\\\";line-height:0}.search-navigator-filters:after{clear:both}.search-navigator-filters-header{margin-bottom:12px;padding-bottom:11px;border-bottom:1px solid #e6e6e6}.search-navigator-intro{width:500px;margin:0 auto;padding-top:100px}\", \"\"]);\n// Exports\nmodule.exports = exports;\n"],"sourceRoot":""}