{"version":3,"sources":["webpack:///./src/main/js/apps/projectActivity/utils.ts","webpack:///./src/main/js/app/components/ComponentContext.tsx","webpack:///./src/main/js/api/projectActivity.ts","webpack:///./src/main/js/apps/projectActivity/components/DefinitionChangeEventInner.tsx","webpack:///./src/main/js/apps/projectActivity/components/RichQualityGateEventInner.tsx","webpack:///./src/main/js/api/newCodePeriod.ts","webpack:///./src/main/js/apps/projectBaseline/utils.ts","webpack:///./src/main/js/apps/projectBaseline/components/BaselineSettingDays.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BaselineSettingPreviousVersion.tsx","webpack:///./src/main/js/apps/projectActivity/components/EventInner.tsx","webpack:///./src/main/js/apps/projectActivity/components/forms/ChangeEventForm.tsx","webpack:///./src/main/js/apps/projectActivity/components/forms/RemoveEventForm.tsx","webpack:///./src/main/js/apps/projectActivity/components/Event.tsx","webpack:///./src/main/js/apps/projectActivity/components/Events.tsx","webpack:///./src/main/js/apps/projectBaseline/styles.css?25cb","webpack:///./src/main/js/apps/projectBaseline/styles.css","webpack:///./src/main/js/apps/projectBaseline/components/AppHeader.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BaselineSettingAnalysis.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BaselineSettingReferenceBranch.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchAnalysisListRenderer.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchAnalysisList.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchBaselineSettingModal.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchListRow.tsx","webpack:///./src/main/js/apps/projectBaseline/components/BranchList.tsx","webpack:///./src/main/js/apps/projectBaseline/components/ProjectBaselineSelector.tsx","webpack:///./src/main/js/apps/projectBaseline/components/App.tsx","webpack:///./src/main/js/apps/projectBaseline/components/AppContainer.ts","webpack:///./src/main/js/app/components/embed-docs-modal/Suggestions.tsx","webpack:///./src/main/js/components/activity-graph/utils.ts","webpack:///./src/main/js/types/project-activity.ts","webpack:///./src/main/js/components/icons/BranchLikeIcon.tsx"],"names":["EVENT_TYPES","APPLICATION_EVENT_TYPES","activityQueryChanged","prevQuery","nextQuery","category","datesQueryChanged","customMetricsChanged","customMetrics","from","to","historyQueryChanged","graph","getAnalysesByVersionByDay","analyses","query","reduce","acc","analysis","currentVersion","length","versionEvent","events","find","event","newVersion","version","name","key","byDay","Object","keys","push","day","date","getTime","toString","matchFilters","isAfterFrom","isBeforeTo","hasSelectedCategoryEvents","parseQuery","urlQuery","value","includes","project","selectedDate","serializeQuery","serializeUrlQuery","custom_metrics","undefined","id","selected_date","ComponentContext","branchLike","component","getProjectActivity","data","catch","createEvent","description","then","r","deleteEvent","changeEvent","deleteAnalysis","isDefinitionChangeEvent","definitionChange","state","expanded","stopPropagation","toggleProjectsList","setState","renderProjectLink","branch","onClick","title","renderBranch","className","renderProjectChange","mainBranch","this","props","changeType","message","defaultMessage","values","newBranch","oldBranch","render","turned","projects","map","isRichQualityGateEvent","qualityGate","stillFailing","status","level","small","failing","getNewCodePeriod","setNewCodePeriod","resetNewCodePeriod","listBranchesNewCodePeriod","validateDays","days","parsed","parseInt","isNaN","String","getSettingValue","referenceBranch","validateSetting","currentSetting","currentSettingValue","overrideGeneralSetting","selected","isChanged","isValid","BaselineSettingDays","disabled","onChangeDays","onSelect","error","isInvalid","label","required","onChange","e","currentTarget","type","BaselineSettingPreviousVersion","isDefault","EventInner","RichQualityGateEventInner","Consumer","DefinitionChangeEventInner","content","overlay","changeInput","target","handleSubmit","confirmButtonText","confirmDisable","header","onClose","onConfirm","size","autoFocus","RemoveEventForm","analysisKey","removeEventQuestion","isDestructive","canAdmin","isFirst","changing","setChanging","deleting","setDeleting","isOther","isVersion","canChange","canDelete","onDelete","showActions","sortedEvents","api","__esModule","default","module","i","options","exported","locals","exports","___CSS_LOADER_API_IMPORT___","AppHeader","link","BaselineSettingAnalysis","renderBranchOption","option","isMain","BaselineSettingReferenceBranch","branchList","settingLevel","currentBranch","b","htmlFor","autofocus","defaultOptions","minimumQueryLength","onSearch","q","Promise","resolve","filter","onChangeReferenceBranch","renderOption","BranchAnalysisListRenderer","loading","range","selectedAnalysisKey","byVersionByDay","hasFilteredData","autoBlur","clearable","handleRangeChange","searchable","onScroll","handleScroll","ref","registerScrollableNode","idx","first","sticky","shouldStick","registerBadgeNode","mouseEnterDelay","Number","long","args","onSelectAnalysis","valueOf","formattedTime","dateTime","toISOString","Events","checked","onCheck","renderAnalysis","mounted","badges","scroll","updateScroll","scrollTop","el","getAttribute","setAttribute","offsetTop","badge","componentDidMount","fetchAnalyses","componentWillUnmount","scrollToSelected","selectedNode","document","querySelector","scrollableNode","parent","bottomOffset","initial","Date","result","a","branchToOption","preventDefault","analysisDate","saving","effectiveValue","requestClose","handleSelectAnalysis","handleSelectDays","handleSelectReferenceBranch","handleSelectSetting","otherBranches","defaultBranch","getValueFromProps","newCodePeriod","contentLabel","onRequestClose","onSubmit","role","BranchListRow","settingWarning","existingBranches","inheritedSetting","branchInheritsItselfAsReference","referenceBranchDoesNotExist","BranchLikeIcon","renderNewCodePeriodSetting","ActionsDropdown","onOpenEditModal","onResetToDefault","branches","updateBranchNewCodePeriod","newSetting","updated","slice","openEditModal","editedBranch","closeEditModal","resetToDefault","fetchBranches","sortAndFilterBranches","branchLikes","branchSettings","newCodePeriods","ncp","branchesWithBaseline","branchKey","ProjectBaselineSelector","branchesEnabled","generalSetting","onToggleSpecificSetting","setting","renderGeneralSetting","onSelectSetting","onSelectDays","onSelectReferenceBranch","invisible","Alert","variant","onCancel","DEFAULT_GENERAL_SETTING","resetSuccess","success","resetSetting","handleCancel","getUpdatedState","handleToggleSpecificSetting","fetchLeakPeriodSetting","componentDidUpdate","prevProps","params","defaultDays","Boolean","all","inherited","Suggestions","suggestions","addSuggestions","removeSuggestions","SuggestionsInner","DEFAULT_GRAPH","issues","GRAPHS_METRICS_DISPLAYED","bugs","code_smells","vulnerabilities","coverage","lines_to_cover","uncovered_lines","duplications","ncloc","duplicated_lines","GRAPHS_METRICS","concat","reliability_rating","security_rating","sqale_rating","duplicated_lines_density","isCustomGraph","custom","getGraphTypes","ignoreCustom","graphs","hasDataValues","serie","some","point","y","hasHistoryData","series","getSeriesMetricType","getDisplayedHistoryMetrics","getHistoryMetrics","splitSeriesInGraphs","maxGraph","maxSeries","generateSeries","measuresHistory","metrics","displayedMetrics","measure","indexOf","metric","uncoveredLines","linesToCover","history","x","translatedName","generateCoveredLinesMetric","Array","isArray","findMetric","saveActivityGraph","namespace","join","getActivityGraph","customGraphs","split","GraphType"],"mappings":"ofA4CaA,EAAc,CAAC,UAAW,eAAgB,kBAAmB,SAC7DC,EAA0B,CAAC,eAAgB,oBAAqB,SAEvE,SAAUC,EAAqBC,EAAkBC,GACrD,OAAOD,EAAUE,WAAaD,EAAUC,UAAYC,EAAkBH,EAAWC,GAG7E,SAAUG,EAAqBJ,EAAkBC,GACrD,OAAQ,IAAQD,EAAUK,cAAeJ,EAAUI,eAG/C,SAAUF,EAAkBH,EAAkBC,GAClD,OAAQ,IAAQD,EAAUM,KAAML,EAAUK,QAAU,IAAQN,EAAUO,GAAIN,EAAUM,IAGhF,SAAUC,EAAoBR,EAAkBC,GACpD,OAAOD,EAAUS,QAAUR,EAAUQ,MAajC,SAAUC,EACdC,EACAC,GAEA,OAAOD,EAASE,QAAwB,SAACC,EAAKC,GAC5C,IAAIC,EAAiBF,EAAIA,EAAIG,OAAS,GAChCC,EAAeH,EAASI,OAAOC,MAAK,SAAAC,GAAS,kBAAAA,EAAMnB,YACzD,GAAIgB,EAAc,CAChB,IAAMI,EAAa,CAAEC,QAASL,EAAaM,KAAMC,IAAKP,EAAaO,IAAKC,MAAO,KAC1EV,GAAkBW,OAAOC,KAAKZ,EAAeU,OAAOT,OAAS,EAChEH,EAAIe,KAAKP,GAETR,EAAIA,EAAIG,OAAS,GAAKK,EAExBN,EAAiBM,OACPN,IAEVA,EAAiB,CAAEO,QAAS,KAAME,IAAK,KAAMC,MAAO,IACpDZ,EAAIe,KAAKb,IAGX,IAAMc,EAAM,EAAW,oBAAUf,EAASgB,OACvCC,UACAC,WAECC,GAAe,EACnB,GAAItB,EAAMV,UAAYU,EAAMN,MAAQM,EAAML,GAAI,CAC5C,IAAM4B,GAAevB,EAAMN,MAAQS,EAASgB,MAAQnB,EAAMN,KACpD8B,GAAcxB,EAAML,IAAMQ,EAASgB,MAAQnB,EAAML,GACjD8B,GACHzB,EAAMV,UAAgF,MAApEa,EAASI,OAAOC,MAAK,SAAAC,GAAS,OAAAA,EAAMnB,WAAaU,EAAnB,YACnDsB,EAAeC,GAAeC,GAAcC,EAS9C,OANIH,IACGlB,EAAeU,MAAMI,KACxBd,EAAeU,MAAMI,GAAO,IAE9Bd,EAAeU,MAAMI,GAAKD,KAAKd,IAE1BD,IACN,IAGC,SAAUwB,EAAWC,GACzB,MAAO,CACLrC,SAAU,wBAAcqC,EAAQ,UAChClC,cAAe,uBAAakC,EAAQ,eAAoB,iBACxDjC,KAAM,sBAAYiC,EAAQ,MAC1B9B,OA4BgB+B,EA5BED,EAAQ,MA6BtB9B,EAAQ,wBAAc+B,GACrBb,OAAOC,KAAK,KAAWa,SAAShC,GAAUA,EAAsB,KA7BrEiC,QAAS,wBAAcH,EAAQ,IAC/BhC,GAAI,sBAAYgC,EAAQ,IACxBI,aAAc,sBAAYJ,EAAQ,gBAyBtC,IAAoBC,EACZ/B,EAtBF,SAAUmC,EAAehC,GAC7B,OAAO,qBAAW,CAChBV,SAAU,0BAAgBU,EAAMV,UAChCI,KAAM,wBAAcM,EAAMN,MAC1BoC,QAAS,0BAAgB9B,EAAM8B,SAC/BnC,GAAI,wBAAcK,EAAML,MAItB,SAAUsC,EAAkBjC,GAChC,OAAO,qBAAW,CAChBV,SAAU,0BAAgBU,EAAMV,UAChC4C,eAAgB,+BAAqBlC,EAAMP,eAC3CC,KAAM,wBAAcM,EAAMN,MAC1BG,OAYoB+B,EAZE5B,EAAMH,MAavB+B,IAAU,SAAgBO,EAAYP,GAZ3CQ,GAAI,0BAAgBpC,EAAM8B,SAC1BnC,GAAI,wBAAcK,EAAML,IACxB0C,cAAe,wBAAcrC,EAAM+B,gBASvC,IAAwBH,I,kCC3JxB,8CA2BaU,EAAmB,gBAA0C,CACxEC,gBAAYJ,EACZK,eAAWL,K,kCC7Bb,+LAuBM,SAAUM,EACdC,GAQA,OAAO,kBAAQ,+BAAgCA,GAAMC,MAAM,KAWvD,SAAUC,EACdzC,EACAS,EACAtB,EACAuD,GAEA,IAAMH,EAAoB,CAAEvC,SAAQ,EAAES,KAAI,GAO1C,OANItB,IACFoD,EAAKpD,SAAWA,GAEduD,IACFH,EAAKG,YAAcA,GAEd,mBAAS,qCAAsCH,GAAMI,MAAK,SAAAC,GAAK,OAAAA,EAAA,QAAS,KAG3E,SAAUC,EAAYvC,GAC1B,OAAO,eAAK,qCAAsC,CAAEA,MAAK,IAAIkC,MAAM,KAG/D,SAAUM,EACdxC,EACAG,EACAiC,GAEA,IAAMH,EAAoB,CAAEjC,MAAK,GAOjC,OANIG,IACF8B,EAAK9B,KAAOA,GAEViC,IACFH,EAAKG,YAAcA,GAEd,mBAAS,qCAAsCH,GAAMI,MAAK,SAAAC,GAAK,OAAAA,EAAA,QAAS,KAG3E,SAAUG,EAAe/C,GAC7B,OAAO,eAAK,+BAAgC,CAAEA,SAAQ,IAAIwC,MAAM,O,iiBC7C5D,SAAUQ,EAAwB1C,GACtC,MAA0B,sBAAnBA,EAAMnB,eAA+D6C,IAA3B1B,EAAM2C,iBAYzD,6E,OACE,EAAAC,MAAe,CAAEC,UAAU,GAE3B,EAAAC,gBAAkB,SAAC9C,GACjBA,EAAM8C,mBAGR,EAAAC,mBAAqB,WACnB,EAAKC,UAAS,SAAAJ,GAAS,MAAC,CAAEC,UAAWD,EAAd,cAGzB,EAAAK,kBAAoB,SAAC5B,EAAwC6B,GAA+B,OAC1F,gBAAC,IAAI,CACHC,QAAS,EAAKL,gBACdM,MAAO/B,EAAQlB,KACfjB,GAAI,YAAcmC,EAAQjB,IAAK8C,IAC9B,6BAAmB7B,EAAQlB,KAL4D,MAS5F,EAAAkD,aAAe,SAACH,GAA+C,YAA/C,IAAAA,MAAS,oBAAU,yBACjC,wBAAMI,UAAU,SAASF,MAAOF,GAC9B,gBAAC,IAAU,CAACI,UAAU,qCACrBJ,I,EA2FP,OAlHgD,OA2B9C,YAAAK,oBAAA,SAAoBlC,GAQlB,IAAMmC,GAAcC,KAAKC,MAAM5B,YAAc,YAAa2B,KAAKC,MAAM5B,YAErE,GAA2B,UAAvBT,EAAQsC,WAAwB,CAClC,IAAMC,EAAUJ,EACZ,gCACA,uCACJ,OACE,uBAAKF,UAAU,iBACb,gBAAC,mBAAgB,CACfO,eAAgB,oBAAUD,GAC1BjC,GAAIiC,EACJE,OAAQ,CACNzC,QAASoC,KAAKR,kBAAkB5B,EAASA,EAAQ6B,QACjDA,OAAQO,KAAKJ,aAAahC,EAAQ6B,YAKrC,GAA2B,YAAvB7B,EAAQsC,WAA0B,CACrCC,EAAUJ,EACZ,kCACA,yCACJ,OACE,uBAAKF,UAAU,iBACb,gBAAC,mBAAgB,CACfO,eAAgB,oBAAUD,GAC1BjC,GAAIiC,EACJE,OAAQ,CACNzC,QAASoC,KAAKR,kBAAkB5B,EAASA,EAAQ6B,QACjDA,OAAQO,KAAKJ,aAAahC,EAAQ6B,YAKrC,MAA2B,mBAAvB7B,EAAQsC,WAEf,gBAAC,mBAAgB,CACfE,eAAgB,oBAAU,2CAC1BlC,GAAG,0CACHmC,OAAQ,CACNzC,QAASoC,KAAKR,kBAAkB5B,EAASA,EAAQ0C,WACjDC,UAAWP,KAAKJ,aAAahC,EAAQ2C,WACrCD,UAAWN,KAAKJ,aAAahC,EAAQ0C,cAKtC,MAGT,YAAAE,OAAA,sBACUjE,EAAUyD,KAAKC,MAAV,MACLb,EAAaY,KAAKb,MAAV,SAChB,OACE,gCACE,wBAAMU,UAAU,QAAQ,oBAAU,iBAAkBtD,EAAMnB,UAAkB,KAE5E,2BACE,gBAAC,kBAAe,CACdyE,UAAU,yCACVH,QAASM,KAAKV,mBACdD,iBAAiB,GAChBD,EAAW,oBAAU,QAAU,oBAAU,QAC1C,gBAAC,IAAY,CAACS,UAAU,qBAAqBY,OAAQrB,MAIxDA,GACC,sBAAIS,UAAU,0BACXtD,EAAM2C,iBAAiBwB,SAASC,KAAI,SAAA/C,GAAW,OAC9C,sBAAIiC,UAAU,iCAAiClD,IAAKiB,EAAQjB,KACzD,EAAKmD,oBAFsC,UAU5D,EAlHA,CAAgD,kB,+gBCjB1C,SAAUc,EAAuBrE,GACrC,MAA0B,iBAAnBA,EAAMnB,eAAqD6C,IAAtB1B,EAAMsE,YAWpD,6E,OACE,EAAA1B,MAAe,CAAEC,UAAU,GAE3B,EAAAC,gBAAkB,SAAC9C,GACjBA,EAAM8C,mBAGR,EAAAC,mBAAqB,WACnB,EAAKC,UAAS,SAAAJ,GAAS,MAAC,CAAEC,UAAWD,EAAd,c,EA0D3B,OAlE+C,OAW7C,YAAAqB,OAAA,sBACUjE,EAAUyD,KAAKC,MAAV,MACLb,EAAaY,KAAKb,MAAV,SAChB,OACE,gCACE,wBAAMU,UAAU,qBAAqB,oBAAU,iBAAkBtD,EAAMnB,UAAkB,KACxFmB,EAAMsE,YAAYC,aACjB,gBAAC,mBAAgB,CACfV,eAAgB,oBAAU,8BAC1BlC,GAAG,6BACHmC,OAAQ,CAAEU,OAAQ,gBAAC,IAAK,CAACC,MAAOzE,EAAMsE,YAAYE,OAAQE,OAAO,OAGnE,gBAAC,IAAK,CAACD,MAAOzE,EAAMsE,YAAYE,OAAQE,OAAO,IAGjD,2BACG1E,EAAMsE,YAAYK,QAAQ/E,OAAS,GAClC,gBAAC,kBAAe,CACd0D,UAAU,yCACVH,QAASM,KAAKV,mBACdD,iBAAiB,GAChBD,EAAW,oBAAU,QAAU,oBAAU,QAC1C,gBAAC,IAAY,CAACS,UAAU,qBAAqBY,OAAQrB,MAK1DA,GACC,sBAAIS,UAAU,0BACXtD,EAAMsE,YAAYK,QAAQP,KAAI,SAAA/C,GAAW,OACxC,sBAAIiC,UAAU,iCAAiClD,IAAKiB,EAAQjB,KAC1D,gBAAC,IAAK,cACQ,oBAAU,wBACtBkD,UAAU,eACVmB,MAAOzE,EAAMsE,YAAYE,OACzBE,OAAO,IAET,uBAAKpB,UAAU,wBACb,gBAAC,IAAI,CACHH,QAAS,EAAKL,gBACdM,MAAO/B,EAAQlB,KACfjB,GAAI,YAAcmC,EAAQjB,IAAKiB,EAAQ6B,SACvC,qCAAkB,kCAAwB,YAAa7B,EAAQlB,OAC5DkB,EAd+B,eAyBtD,EAlEA,CAA+C,kB,kCC1C/C,6JAsBM,SAAUuD,EAAiB3C,GAI/B,OAAO,kBAAQ,6BAA8BA,GAAMC,MAAM,KAGrD,SAAU2C,EAAiB5C,GAM/B,OAAO,eAAK,4BAA6BA,GAAMC,MAAM,KAGjD,SAAU4C,EAAmB7C,GACjC,OAAO,eAAK,8BAA+BA,GAAMC,MAAM,KAGnD,SAAU6C,EAA0B9C,GAGxC,OAAO,kBAAQ,6BAA8BA,GAAMC,MAAM,O,kCC1BrD,SAAU8C,EAAaC,GAC3B,IAAMC,EAASC,SAASF,EAAM,IAE9B,QAASA,EAAKrF,OAAS,GAAKwF,MAAMF,IAAWA,EAAS,GAAKG,OAAOH,KAAYD,GAG1E,SAAUK,EAAgB,G,IAC9B5F,EAAQ,WACRuF,EAAI,OACJM,EAAe,kBAQf,OAPI,QAQF,IAAK,iBACH,OAAON,EACT,IAAK,mBACH,OAAOM,EACT,IAAK,oBACH,OAAO7F,EACT,QACE,QAIA,SAAU8F,EAAgB5C,GAU5B,MAOEA,EAPW,SAAblD,OAAQ,IAAG,KAAE,EACb+F,EAME7C,EANY,eACd8C,EAKE9C,EALiB,oBACnBqC,EAIErC,EAJE,KACJ+C,EAGE/C,EAHoB,uBACtB,EAEEA,EAFkB,gBAApB2C,OAAe,IAAG,KAAE,EACpBK,EACEhD,EADM,SAsBV,MAAO,CAAEiD,UAlBJJ,QAA6C/D,IAA3BiE,GAIQ,IAA3BA,GACAC,IAAaH,GACC,mBAAbG,GAAiCX,IAASS,GAC7B,sBAAbE,GAAoClG,IAAagG,GACpC,qBAAbE,GAAmCL,IAAoBG,EAP9CC,EAiBMG,SANS,IAA3BH,GACa,qBAAbC,GACc,sBAAbA,GAAoClG,EAASE,OAAS,GACzC,mBAAbgG,GAAiCZ,EAAaC,IACjC,qBAAbW,GAAmCL,EAAgB3F,OAAS,GApFjE,uG,kCCAA,2FAmCc,SAAUmG,EAAoBrC,GAClC,IAAAJ,EAAoFI,EAA3E,UAAEuB,EAAyEvB,EAArE,KAAEsC,EAAmEtC,EAA3D,SAAEmC,EAAyDnC,EAAhD,UAAEoC,EAA8CpC,EAAvC,QAAEuC,EAAqCvC,EAAzB,aAAEwC,EAAuBxC,EAAf,SAAEkC,EAAalC,EAAL,SACvF,OACE,gBAAC,IAAS,CACRJ,UAAWA,EACX0C,SAAUA,EACV7C,QAAS,WAAM,OAAA+C,EAAA,mBACfN,SAAUA,EACVxC,MAAO,oBAAU,yBACjB,gCACE,qBAAGE,UAAU,qBAAqB,oBAAU,qCAC3CsC,GACC,gBAAC,IAAe,CACdO,WAAOzE,EACPC,GAAG,0BACHyE,UAAWP,IAAcC,EACzBA,QAASD,GAAaC,EACtBO,MAAO,oBAAU,yBACjBC,UAAU,GACV,yBAAOC,SAAU,SAAAC,GAAK,OAAAP,EAAaO,EAAEC,cAAf,QAAqCC,KAAK,OAAOvF,MAAO8D,S,kCCtD1F,yEA8Bc,SAAU0B,EAA+BjD,GAC7C,IAAAsC,EAA4CtC,EAApC,SAAEkD,EAAkClD,EAAzB,UAAEwC,EAAuBxC,EAAf,SAAEkC,EAAalC,EAAL,SAC/C,OACE,gBAAC,IAAS,CACRsC,SAAUA,EACV7C,QAAS,WAAM,OAAA+C,EAAA,qBACfN,SAAUA,EACVxC,MACE,oBAAU,8BAAgCwD,EAAY,KAAK,oBAAU,WAAU,IAAM,KAEvF,yBAAI,oBAAU,6C,6JCVN,SAAUC,EAAW,G,IAAE7G,EAAK,QACxC,GAAI,YAAuBA,GACzB,OAAO,gBAAC8G,EAAA,EAAyB,CAAC9G,MAAOA,IACpC,GAAI,YAAwBA,GACjC,OACE,gBAAC6B,EAAA,EAAiBkF,SAAQ,MACvB,SAAC,G,IAAEjF,EAAU,aAAO,uBAACkF,EAAA,EAA0B,CAAClF,WAAYA,EAAY9B,MAAOA,OAIpF,IAAMiH,EACJ,wBAAM3D,UAAU,eACd,wBAAMA,UAAU,4BACb,oBAAU,iBAAkBtD,EAAMnB,UAC9B,KACP,0BAAQyE,UAAU,gBAAgBtD,EAAMG,OAG5C,OAAOH,EAAMoC,YAAc,gBAAC,IAAO,CAAC8E,QAASlH,EAAMoC,aAAc6E,GAAqBA,E,oWCd1F,YACE,WAAYvD,GAAZ,MACE,YAAMA,IAAM,K,OAId,EAAAyD,YAAc,SAACnH,GACb,EAAKgD,SAAS,CAAE7C,KAAMH,EAAMoH,OAAOjG,SAGrC,EAAAkG,aAAe,WACb,OAAO,EAAK3D,MAAMlB,YAAY,EAAKkB,MAAM1D,MAAMI,IAAK,EAAKwC,MAAMzC,OAR/D,EAAKyC,MAAQ,CAAEzC,KAAMuD,EAAM1D,MAAMG,M,EA4BrC,OA/B6C,OAc3C,YAAA8D,OAAA,WACU,IAAA9D,EAASsD,KAAKb,MAAV,KACZ,OACE,gBAAC,IAAY,CACX0E,kBAAmB,oBAAU,eAC7BC,gBAAiBpH,GAAQA,IAASsD,KAAKC,MAAM1D,MAAMG,KACnDqH,OAAQ/D,KAAKC,MAAM8D,OACnBC,QAAShE,KAAKC,MAAM+D,QACpBC,UAAWjE,KAAK4D,aAChBM,KAAK,SACL,uBAAKrE,UAAU,eACb,6BAAQ,oBAAU,SAClB,yBAAOsE,WAAW,EAAMrB,SAAU9C,KAAK0D,YAAaT,KAAK,OAAOvF,MAAOhB,OAKjF,EA/BA,CAA6C,iBCF/B,SAAU0H,EAAgBnE,GAC9B,IAAAoE,EAAoDpE,EAAzC,YAAE1D,EAAuC0D,EAAlC,MAAE8D,EAAgC9D,EAA1B,OAAEqE,EAAwBrE,EAAL,oBACvD,OACE,gBAAC,IAAY,CACX4D,kBAAmB,oBAAU,UAC7BE,OAAQA,EACRQ,eAAe,EACfP,QAAS/D,EAAM+D,QACfC,UAAW,WAAM,OAAAhE,EAAMgE,UAAUI,EAAa9H,EAA7B,OAChB+H,GC2EQ,cA/ET,SAAgBrE,GACZ,IAAAoE,EAA0CpE,EAA/B,YAAE1D,EAA6B0D,EAAxB,MAAEuE,EAAsBvE,EAAd,SAAEwE,EAAYxE,EAAL,QAEvC,EAA0B,YAAe,GAAxCyE,EAAQ,KAAEC,EAAW,KACtB,EAA0B,YAAe,GAAxCC,EAAQ,KAAEC,EAAW,KAEtBC,EAA6B,UAAnBvI,EAAMnB,SAChB2J,EAA+B,YAAnBxI,EAAMnB,SAClB4J,GAAaF,GAAWC,IAAc9E,EAAM6C,SAC5CmC,GAAaH,GAAYC,IAAcN,IAAaxE,EAAMiF,SAC1DC,EAAcX,IAAaQ,GAAaC,GAE9C,OACE,uBAAKpF,UAAU,0BACb,gBAAC,IAAgB,CACfA,UAAW,EACT,8DACAtD,EAAMnB,YAIV,gBAACgI,EAAU,CAAC7G,MAAOA,IAElB4I,GACC,wBAAMtF,UAAU,UACbmF,GACC,gBAAC,aAAU,cACG,oBAAU,wCACtBnF,UAAU,eAAc,YACd,+BACVH,QAAS,WAAM,OAAAiF,GAAA,IACftF,iBAAiB,IAGpB4F,GACC,gBAAC,eAAY,cACC,oBAAU,0CACtBpF,UAAU,eAAc,YACd,iCACVH,QAAS,WAAM,OAAAmF,GAAA,IACfxF,iBAAiB,KAMxBqF,GAAYzE,EAAM6C,UACjB,gBAAC,EAAe,CACd/D,YAAakB,EAAM6C,SACnBvG,MAAOA,EACPwH,OACEgB,EACI,oBAAU,mCACV,oBAAU,wCAEhBf,QAAS,WAAM,OAAAW,GAAA,MAIlBC,GAAY3E,EAAMiF,UACjB,gBAACd,EAAe,CACdC,YAAaA,EACb9H,MAAOA,EACPwH,OACEgB,EACI,oBAAU,mCACV,oBAAU,wCAEhBf,QAAS,WAAM,OAAAa,GAAA,IACfZ,UAAWhE,EAAMiF,SACjBZ,oBAAqB,oBACnB,qBAAoBS,EAAY,iBAAmB,uBAAqB,mBChDrE,YA5BT,SAAiB9E,GACb,IAAAoE,EAA2CpE,EAAhC,YAAEuE,EAA8BvE,EAAtB,SAAE5D,EAAoB4D,EAAd,OAAEwE,EAAYxE,EAAL,QAExCmF,EAAe,IACnB/I,GAEA,SAAAE,GAAS,MAAoB,YAAnBA,EAAMnB,SAAyB,EAAhC,IAET,YAGF,OACE,uBAAKyE,UAAU,kBACZuF,EAAazE,KAAI,SAAApE,GAAS,OACzB,gBAAC,EAAK,CACJ8H,YAAaA,EACbG,SAAUA,EACVjI,MAAOA,EACPkI,QAASA,EACT9H,IAAKJ,EAAMI,IACXmG,SAAU7C,EAAM6C,SAChBoC,SAAUjF,EARa,mB,qBC7CjC,IAAIoF,EAAM,EAAQ,KACF7B,EAAU,EAAQ,MAIC,iBAFvBA,EAAUA,EAAQ8B,WAAa9B,EAAQ+B,QAAU/B,KAG/CA,EAAU,CAAC,CAACgC,EAAOC,EAAIjC,EAAS,MAG9C,IAAIkC,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAIhBC,GAFSN,EAAI7B,EAASkC,GAEXlC,EAAQoC,OAASpC,EAAQoC,OAAS,IAIjDJ,EAAOK,QAAUF,G,sBClBjBE,EADkC,EAAQ,IAChCC,EAA4B,IAE9B/I,KAAK,CAACyI,EAAOC,EAAI,00DAA20D,KAEp2DD,EAAOK,QAAUA,G,iNCsBH,SAAUE,EAAU9F,GACxB,IAAAuE,EAAavE,EAAL,SAEhB,OACE,0BAAQJ,UAAU,eAChB,sBAAIA,UAAU,cAAc,oBAAU,0BACtC,qBAAGA,UAAU,oBACX,gBAAC,mBAAgB,CACfO,eAAgB,oBAAU,qCAC1BlC,GAAG,oCACHmC,OAAQ,CACN2F,KACE,gBAAC,IAAI,CAACvK,GAAG,0DACN,oBAAU,8CAKnB,2BACC+I,GACC,gBAAC,mBAAgB,CACfpE,eAAgB,oBAAU,sCAC1BlC,GAAG,qCACHmC,OAAQ,CACN2F,KACE,gBAAC,IAAI,CAACvK,GAAG,4CACN,oBAAU,iD,0DCzBf,SAAUwK,EAAwB,G,IAAE1D,EAAQ,WAAEE,EAAQ,WAAEN,EAAQ,WAC5E,OACE,gBAAC,IAAS,CACRI,SAAUA,EACV7C,QAAS,WAAM,OAAA+C,EAAA,sBACfN,SAAUA,EACVxC,MAAO,oBAAU,+BACjB,qBAAGE,UAAU,qBAAqB,oBAAU,4C,8ECSlD,SAASqG,EAAmBC,GAC1B,OAAOA,EAAOxD,UACZ,gBAAC,IAAO,CACNc,QAAS,kCAAwB,2CAA4C0C,EAAOzI,QACpF,4BACGyI,EAAOzI,M,IAAO,gBAAC,IAAc,QAIlC,gCACE,wBACEiC,MACEwG,EAAO5D,SAAW,oBAAU,mDAAgDtE,GAE7EkI,EAAOzI,OAETyI,EAAOC,QACN,uBAAKvG,UAAU,qBAAqB,oBAAU,0BAMxC,SAAUwG,EAA+BpG,GAC7C,IAAAqG,EAA6ErG,EAAnE,WAAEJ,EAAiEI,EAAxD,UAAEsC,EAAsDtC,EAA9C,SAAE6B,EAA4C7B,EAA7B,gBAAEkC,EAA2BlC,EAAnB,SAAEsG,EAAiBtG,EAAL,aAE1EuG,EAAgBF,EAAWhK,MAAK,SAAAmK,GAAK,OAAAA,EAAE/I,QAAF,MAAgC,CACzEA,MAAOoE,EACPsE,QAAQ,EACRzD,WAAW,GAGb,OACE,gBAAC,IAAS,CACR9C,UAAWA,EACX0C,SAAUA,EACV7C,QAAS,WAAM,OAAAO,EAAMwC,SAAN,qBACfN,SAAUA,EACVxC,MAAO,oBAAU,8BACjB,gCACE,yBAAI,oBAAU,0CACbwC,GACC,gCACoB,YAAjBoE,GACC,qBAAG1G,UAAU,cAAc,oBAAU,2CAEvC,uBAAKA,UAAU,sCACb,yBAAOA,UAAU,cAAc6G,QAAQ,oBACrC,8BAAS,oBAAU,qCACnB,sBAAI7G,UAAU,aAAW,MAE3B,gBAAC,IAAY,CACX8G,WAAW,EACX9G,UAAU,kCACV+G,eAAgBN,EAChBO,mBAAoB,EACpBC,SAAU,SAAAC,GAAK,OAAAC,QAAQC,QAAQX,EAAWY,QAAO,SAAAT,GAAK,OAAAA,EAAE/I,MAAMC,SAAR,QACtD8E,SAAU,SAAA0D,GAAU,OAAAlG,EAAMkH,wBAAwBhB,EAA9B,QACpBiB,aAAclB,EACdxI,MAAO8I,Q,+ICvBT,SAAUa,EAA2BpH,GACzC,IAAApE,EAAkDoE,EAA1C,SAAEqH,EAAwCrH,EAAjC,QAAEsH,EAA+BtH,EAA1B,MAAEuH,EAAwBvH,EAAL,oBAE/CwH,EAAiB,WACrB,WACE,mBAA0B5L,EAAU,CAClCT,SAAU,OAEd,CAACS,IAGG6L,EACJD,EAAetL,OAAS,GACG,IAA1BsL,EAAetL,QAAgBU,OAAOC,KAAK2K,EAAe,GAAG7K,OAAOT,OAAS,EAEhF,OACE,gCACE,uBAAK0D,UAAU,iBACZ,oBAAU,0BACX,gBAAC,IAAM,CACL8H,UAAU,EACV9H,UAAU,2BACV+H,WAAW,EACX9E,SAAU7C,EAAM4H,kBAChBnC,QAAS,CACP,CACE9C,MAAO,oBAAU,0CACjBlF,MAAO,IAET,CACEkF,MAAO,oBAAU,2CACjBlF,MAAO,IAGXoK,YAAY,EACZpK,MAAO6J,KAGX,uBAAK1H,UAAU,gCACb,uBACEA,UAAU,gCACVkI,SAAU9H,EAAM+H,aAChBC,IAAKhI,EAAMiI,wBACVZ,GAAW,gBAAC,IAAe,CAACzH,UAAU,mBAErCyH,GAAYI,EAKZ,0BACGD,EAAe9G,KAAI,SAAClE,EAAS0L,GAC5B,IAAM3G,EAAO3E,OAAOC,KAAKL,EAAQG,OACjC,OAAI4E,EAAKrF,QAAU,EACV,KAGP,sBAAIQ,IAAKF,EAAQE,KAAO,aACrBF,EAAQA,SACP,uBACEoD,UAAW,EAAW,gCAAiC,CACrDuI,MAAe,IAARD,EACPE,OAAQpI,EAAMqI,YAAY7L,EAAQA,WAEpCwL,IAAKhI,EAAMsI,kBAAkB9L,EAAQA,UACrC,gBAAC,IAAO,CACN+L,gBAAiB,GACjB/E,QAAY,oBAAU,WAAU,IAAIhH,EAAQA,SAC5C,wBAAMoD,UAAU,SAASpD,EAAQA,WAIvC,sBAAIoD,UAAU,6BACX2B,EAAKb,KAAI,SAAA3D,GAAO,OACf,sBACE6C,UAAU,sBAAqB,WACrB,gCAAsB4I,OAAOzL,IACvCL,IAAKK,GACL,uBAAK6C,UAAU,wBACb,gBAAC,IAAa,CAAC5C,KAAMwL,OAAOzL,GAAM0L,MAAM,KAE1C,sBAAI7I,UAAU,iCACW,MAAtBpD,EAAQG,MAAMI,IACbP,EAAQG,MAAMI,GAAK2D,KAAI,SAAA1E,GACrB,OAxHhC,SAAwB0M,GAMd,IAAA1M,EAA6D0M,EAArD,SAAElE,EAAmDkE,EAA5C,QAAEC,EAA0CD,EAA1B,iBAAEnB,EAAwBmB,EAAL,oBAChE,OACE,sBACE9I,UAAW,EAAW,kBAAmB,CACvCsC,SAAUlG,EAASU,MAAQ6K,IAC3B,YACS,oBAAUvL,EAASgB,MAAM4L,UACpClM,IAAKV,EAASU,IACd+C,QAAS,WAAM,OAAAkJ,EAAA,KACf,uBAAK/I,UAAU,qCACb,gBAAC,IAAa,CAAC5C,KAAM,oBAAUhB,EAASgB,MAAOyL,MAAM,IAClD,SAAAI,GAAiB,OAChB,wBAAMjJ,UAAU,cAAckJ,SAAU,oBAAU9M,EAASgB,MAAM+L,eADjD,OAQrB/M,EAASI,OAAOF,OAAS,GACxB,gBAAC8M,EAAA,EAAM,CAAC5E,YAAapI,EAASU,IAAKN,OAAQJ,EAASI,OAAQoI,QAASA,IAGvE,uBAAK5E,UAAU,6BACb,gBAAC,IAAK,CAACqJ,QAASjN,EAASU,MAAQ6K,EAAqB2B,QAAS,aAAUzL,MAAM,OA0FvD0L,CAAe,CACbnN,SAAQ,EACRuL,oBAAmB,EACnB/C,QAAS5I,EAAS,GAAGc,MAAQV,EAASU,IACtCiM,iBAAkB3I,EAAM2I,iCA1C9C,uBAAK/I,UAAU,2CACZ,oBAAU,4B,yiBCrFzB,YAWE,WAAYI,GAAZ,MACE,YAAMA,IAAM,K,OAXd,EAAAoJ,SAAU,EACV,EAAAC,OAAiC,GAEjC,EAAAnK,MAAe,CACbtD,SAAU,GACVyL,SAAS,EACTC,MAAO,GACPgC,OAAQ,GAuDV,EAAAvB,aAAe,SAACjF,GACVA,EAAEC,eACJ,EAAKwG,aAAazG,EAAEC,cAAcyG,YAItC,EAAAD,aAAe,SAACD,GACd,EAAKhK,SAAS,CAAEgK,OAAM,KAGxB,EAAAhB,kBAAoB,SAAC9L,GAAoB,gBAACiN,GACpCA,IACGA,EAAGC,aAAa,oBACnBD,EAAGE,aAAa,kBAAmBhI,OAAO8H,EAAGG,YAE/C,EAAKP,OAAO7M,GAAWiN,KAI3B,EAAApB,YAAc,SAAC7L,GACb,IAAMqN,EAAQ,EAAKR,OAAO7M,GAC1B,QACIqN,GACFrB,OAAOqB,EAAMH,aAAa,oBAAsB,EAAKxK,MAAMoK,OAxF9B,IA4FjC,EAAA1B,kBAAoB,SAAC,G,IAAEnK,EAAK,QAC1B,EAAK6B,SAAS,CAAEgI,MAAO7J,IAAS,WAAM,6BA9EtC,EAAK8L,aAAe,IAAS,EAAKA,aAAc,I,EAsGpD,OAnHgD,QAgB9C,YAAAO,kBAAA,WACE/J,KAAKqJ,SAAU,EACfrJ,KAAKgK,eAAc,IAGrB,YAAAC,qBAAA,WACEjK,KAAKqJ,SAAU,GAGjB,YAAAa,iBAAA,WACE,IAAMC,EAAeC,SAASC,cAAc,6BACxCrK,KAAKsK,gBAAkBH,GACzB,0BAAgBA,EAAc,CAAEI,OAAQvK,KAAKsK,eAAgBE,aAAc,MAI/E,YAAAR,cAAA,SAAcS,GAAd,gBAAc,IAAAA,OAAA,GACN,MAAkCzK,KAAKC,MAArChE,EAAQ,WAAEwD,EAAM,SAAEnB,EAAS,YAC3BiJ,EAAUvH,KAAKb,MAAV,MAGb,OAFAa,KAAKT,SAAS,CAAE+H,SAAS,IAElB,YAAmB,CACxB7H,OAAM,EACN7B,QAASU,EACT9C,KAAM+L,EAAQ,gCAAsB,kBAAQ,IAAImD,KAAQnD,SAAUtJ,IACjEW,MAAK,SAAC+L,GAEHF,GAAWxO,IAAa0O,EAAO9O,SAASS,MAAK,SAAAsO,GAAK,OAAAA,EAAEjO,MAAF,KACpD,EAAKkL,kBAAkB,CAAEnK,MAAO,IAIlC,EAAK6B,SACH,CACE1D,SAAU8O,EAAO9O,SAAS8E,KAAI,SAAA1E,GAAY,gBACrCA,GAAQ,CACXgB,KAAM,oBAAUhB,EAFwB,WAI1CqL,SAAS,IAEX,WACE,EAAK4C,0BAqCb,YAAA1J,OAAA,sBACQ,EAAiCR,KAAKC,MAApChE,EAAQ,WAAE2M,EAAgB,mBAC5B,EAA+B5I,KAAKb,MAAlCtD,EAAQ,WAAEyL,EAAO,UAAEC,EAAK,QAEhC,OACE,gBAACF,EAA0B,CACzBxL,SAAUA,EACVgM,kBAAmB7H,KAAK6H,kBACxBG,aAAchI,KAAKgI,aACnBV,QAASA,EACTsB,iBAAkBA,EAClBrB,MAAOA,EACPgB,kBAAmBvI,KAAKuI,kBACxBL,uBAAwB,SAAAwB,GACtB,EAAKY,eAAiBZ,GAExBlC,oBAAqBvL,EACrBqM,YAAatI,KAAKsI,eAI1B,EAnHA,CAAgD,iB,qWCOhD,YAGE,WAAYrI,GAAZ,MACE,YAAMA,IAAM,KAHd,EAAAoJ,SAAU,EA+BV,EAAAwB,eAAiB,SAACpE,GAAc,MAAC,CAC/B/I,MAAO+I,EAAE/J,KACT0J,OAAQK,EAAEL,OACV7D,SAAUkE,EAAE/J,OAAS,EAAKuD,MAAMR,OAAO/C,OAGzC,EAAAkH,aAAe,SAACb,GACdA,EAAE+H,iBAEI,MAAwB,EAAK7K,MAA3BR,EAAM,SAAEnB,EAAS,YACnB,EAAoE,EAAKa,MAAvElD,EAAQ,WAAE8O,EAAY,eAAEvJ,EAAI,OAAEM,EAAe,kBAAYmB,EAAI,WAE/DvF,EAAQ,YAAgB,CAAEuF,KAAI,EAAEhH,SAAQ,EAAEuF,KAAI,EAAEM,gBAAe,IAEjEmB,IACF,EAAK1D,SAAS,CAAEyL,QAAQ,IACxB,YAAiB,CACfpN,QAASU,EACT2E,KAAI,EACJvF,MAAK,EACL+B,OAAQA,EAAO/C,OACdkC,MACD,WACE,EAAKW,SAAS,CACZyL,QAAQ,IAEV,EAAK/K,MAAM+D,QAAQvE,EAAO/C,KAAM,CAC9BuG,KAAI,EACJvF,MAAK,EACLuN,eAAgBF,GAAgB,2BAAiBA,QAGrD,WACE,EAAKxL,SAAS,CACZyL,QAAQ,SAOlB,EAAAE,aAAe,WAAM,SAAKjL,MAAL,WAErB,EAAAkL,qBAAuB,SAAClP,GACtB,SAAKsD,SAAS,CAAEtD,SAAUA,EAASU,IAAKoO,aAAc9O,EAASgB,QAEjE,EAAAmO,iBAAmB,SAAC5J,GAAiB,SAAKjC,SAAS,CAAEiC,KAAhB,KAErC,EAAA6J,4BAA8B,SAACvJ,GAA4B,SAAKvC,SAAS,CAAEuC,gBAAhB,KAE3D,EAAAwJ,oBAAsB,SAACnJ,GAAyC,SAAK5C,SAAS,CAAE4C,SAAhB,KA5E9D,IAAMoJ,EAAgBtL,EAAMqG,WAAWY,QAAO,SAAAT,GAAK,OAAAA,EAAE/J,OAASuD,EAAMR,OAAjB,QAC7C+L,EAAgBD,EAAcpP,OAAS,EAAIoP,EAAc,GAAG7O,KAAO,G,OAEzE,EAAKyC,MAAQ,CACXlD,SAAU,EAAKwP,kBAAkB,sBAAwB,GACzDjK,KAAM,EAAKiK,kBAAkB,mBAAqB,KAClD3J,gBAAiB,EAAK2J,kBAAkB,qBAAuBD,EAC/DR,QAAQ,EACR7I,SAAU,EAAKlC,MAAMR,OAAOiM,eAAiB,EAAKzL,MAAMR,OAAOiM,cAAczI,M,EA8InF,OA5JwD,QAkBtD,YAAA8G,kBAAA,WACE/J,KAAKqJ,SAAU,GAGjB,YAAAY,qBAAA,WACEjK,KAAKqJ,SAAU,GAGjB,YAAAoC,kBAAA,SAAkBxI,GAChB,OAAOjD,KAAKC,MAAMR,OAAOiM,eAAiB1L,KAAKC,MAAMR,OAAOiM,cAAczI,OAASA,EAC/EjD,KAAKC,MAAMR,OAAOiM,cAAchO,MAChC,MAuDN,YAAA8C,OAAA,WACQ,MAAyBR,KAAKC,MAA5BR,EAAM,SAAE6G,EAAU,aACpB,EAAwDtG,KAAKb,MAA3DlD,EAAQ,WAAEuF,EAAI,OAAEM,EAAe,kBAAEkJ,EAAM,SAAE7I,EAAQ,WAEnD4B,EAAS,kCAAwB,wCAAyCtE,EAAO/C,MAEjFsF,EAAiBvC,EAAOiM,eAAiBjM,EAAOiM,cAAczI,KAC9DhB,EAAsBxC,EAAOiM,eAAiBjM,EAAOiM,cAAchO,MAEnE,EAAyB,YAAgB,CAC7CzB,SAAQ,EACR+F,eAAc,EACdC,oBAAmB,EACnBT,KAAI,EACJM,gBAAe,EACfK,SAAQ,IANFC,EAAS,YAAEC,EAAO,UAS1B,OACE,gBAAC,IAAK,CAACsJ,aAAc5H,EAAQ6H,eAAgB5L,KAAKkL,aAAchH,KAAK,SACnE,0BAAQrE,UAAU,cAChB,0BAAKkE,IAEP,wBAAM8H,SAAU7L,KAAK4D,cACnB,uBAAK/D,UAAU,4DACb,uBAAKA,UAAU,sCAAsCiM,KAAK,cACxD,gBAAC5I,EAAA,EAA8B,CAC7BC,WAAW,EACXV,SAAUzC,KAAKsL,oBACfnJ,SAAuB,qBAAbA,IAEZ,gBAACG,EAAA,EAAmB,CAClBd,KAAMA,EACNY,UAAWA,EACXC,QAASA,EACTG,aAAcxC,KAAKoL,iBACnB3I,SAAUzC,KAAKsL,oBACfnJ,SAAuB,mBAAbA,IAEZ,gBAAC8D,EAAuB,CACtBxD,SAAUzC,KAAKsL,oBACfnJ,SAAuB,sBAAbA,IAEZ,gBAACkE,EAA8B,CAC7BC,WAAYA,EAAW3F,IAAIX,KAAK6K,gBAChC1D,wBAAyBnH,KAAKqL,4BAC9B5I,SAAUzC,KAAKsL,oBACfxJ,gBAAiBA,EACjBK,SAAuB,qBAAbA,EACVoE,aAAa,YAGH,sBAAbpE,GACC,gBAAC,GAAkB,CACjBlG,SAAUA,EACVwD,OAAQA,EAAO/C,KACf4B,UAAW0B,KAAKC,MAAM3B,UACtBsK,iBAAkB5I,KAAKmL,wBAI7B,0BAAQtL,UAAU,cAChB,gBAAC,IAAe,CAACA,UAAU,eAAeyH,QAAS0D,IACnD,gBAAC,eAAY,CAACzI,UAAWH,GAAa4I,IAAW3I,GAC9C,oBAAU,SAEb,gBAAC,kBAAe,CAAC3C,QAASM,KAAKC,MAAM+D,SAAU,oBAAU,eAMrE,EA5JA,CAAwD,iB,0ECmC1C,SAAU+H,GAAc9L,G,MAGhC+L,EAFIvM,EAA+CQ,EAAzC,OAAEgM,EAAuChM,EAAvB,iBAAEiM,EAAqBjM,EAAL,iBAelD,OAvCF,SACER,EACAyM,GAEA,OACGzM,EAAOiM,eACkB,qBAA1BQ,EAAiBjJ,MACjBxD,EAAO/C,OAASwP,EAAiBxO,MAoB/ByO,CAAgC1M,EAAQyM,GAhB9C,SACEzM,EACAwM,GAEA,OACExM,EAAOiM,eACPjM,EAAOiM,cAAchO,OACS,qBAA9B+B,EAAOiM,cAAczI,OACpBgJ,EAAiBtO,SAAS8B,EAAOiM,cAAchO,OAavC0O,CAA4B3M,EAAQwM,KAC7CD,EAAiB,kCACf,4CACoB,QAApB,EAAAvM,EAAOiM,qBAAa,eAAEhO,QAAS,KAPjCsO,EAAiB,kCACf,mDACAvM,EAAO/C,MAUT,sBAAImD,UAAWmM,EAAiB,yBAA2B,IACzD,sBAAInM,UAAU,UACZ,gBAACwM,GAAA,EAAc,CAAChO,WAAYoB,EAAQI,UAAU,wBAC7CJ,EAAO/C,KACP+C,EAAO2G,QACN,uBAAKvG,UAAU,qBAAqB,oBAAU,0BAGlD,sBAAIA,UAAU,4BACZ,gBAAC,IAAO,CAAC4D,QAASuI,GAChB,4BACGA,GAAkB,gBAAC,KAAW,CAACnM,UAAU,wBACzCJ,EAAOiM,cA5EpB,SAAoCA,GAClC,OAAQA,EAAczI,MACpB,IAAK,oBACH,OACE,gCACM,oBAAU,8BAA6B,KAC1CyI,EAAcT,eACb,gBAAC,KAAiB,CAAChO,KAAMyO,EAAcT,iBAEvC,KAIR,IAAK,iBACH,OAAU,oBAAU,wBAAuB,KAAKS,EAAchO,MAChE,IAAK,mBACH,OAAO,oBAAU,6BACnB,IAAK,mBACH,OAAU,oBAAU,6BAA4B,KAAKgO,EAAchO,MACrE,QACE,OAAOgO,EAAczI,MAyDXqJ,CAA2B7M,EAAOiM,eAClC,oBAAU,kCAIpB,sBAAI7L,UAAU,cACZ,gBAAC,KAAe,KACd,gBAAC0M,GAAA,oBAAmB,CAAC7M,QAAS,WAAM,OAAAO,EAAMuM,gBAAN,KACjC,oBAAU,SAEZ/M,EAAOiM,eACN,gBAACa,GAAA,oBAAmB,CAAC7M,QAAS,WAAM,OAAAO,EAAMwM,iBAAiBhN,EAAvB,QACjC,oBAAU,wB,0jBCvFzB,uE,OACE,EAAA4J,SAAU,EACV,EAAAlK,MAAe,CACbuN,SAAU,GACVpF,SAAS,GA8CX,EAAAqF,0BAA4B,SAAClN,EAAgBmN,GACnC,IAAAF,EAAa,EAAKvN,MAAV,SAEV0N,EAAUH,EAASpQ,MAAK,SAAAmK,GAAK,OAAAA,EAAE/J,OAAF,KAInC,OAHImQ,IACFA,EAAQnB,cAAgBkB,GAEnBF,EAASI,MAAM,IAGxB,EAAAC,cAAgB,SAACtN,GACf,EAAKF,SAAS,CAAEyN,aAAcvN,KAGhC,EAAAwN,eAAiB,SAACxN,EAAiBmN,GAC7BnN,EACF,EAAKF,SAAS,CACZmN,SAAU,EAAKC,0BAA0BlN,EAAQmN,GACjDI,kBAAc/O,IAGhB,EAAKsB,SAAS,CAAEyN,kBAAc/O,KAIlC,EAAAiP,eAAiB,SAACzN,GAChB,OAAO,YAAmB,CACxB7B,QAAS,EAAKqC,MAAM3B,UAAU3B,IAC9B8C,OAAM,IACLb,MAAK,WACN,EAAKW,SAAS,CAAEmN,SAAU,EAAKC,0BAA0BlN,OAAQxB,S,EAoDvE,OApIwC,QAOtC,YAAA8L,kBAAA,WACE/J,KAAKqJ,SAAU,EACfrJ,KAAKmN,iBAGP,YAAAlD,qBAAA,WACEjK,KAAKqJ,SAAU,GAGjB,YAAA+D,sBAAA,SAAsBC,GACpB,YADoB,IAAAA,MAAA,IACb,YAAaA,EAAYnG,OAAO,OAGzC,YAAAiG,cAAA,sBACQvP,EAAUoC,KAAKC,MAAM3B,UAAU3B,IACrCqD,KAAKT,SAAS,CAAE+H,SAAS,IAEzB,YAA0B,CAAE1J,QAAO,IAAIgB,MACrC,SAAA0O,GACE,IAAMC,EAAiBD,EAAeC,eAClCD,EAAeC,eAAerG,QAAO,SAAAsG,GAAO,OAACA,EAAD,aAC5C,GAEEC,EAAuB,EAAKxN,MAAMqG,WAAW3F,KAAI,SAAA8F,GACrD,IAAMiF,EAAgB6B,EAAejR,MAAK,SAAAkR,GAAO,OAAAA,EAAIE,YAAcjH,EAAlB,QACjD,IAAKiF,EACH,OAAOjF,EAED,MAAqDiF,EAA5B,KAAzBzI,OAAI,IAAG,qBAAkB,EAAEvF,EAA0BgO,EAArB,MAAET,EAAmBS,EAAL,eACxD,gBACKjF,GAAC,CACJiF,cAAe,CAAEzI,KAAI,EAAEvF,MAAK,EAAEuN,eAAc,QAIhD,EAAK1L,SAAS,CAAEmN,SAAUe,EAAsBnG,SAAS,OAE3D,WACE,EAAK/H,SAAS,CAAE+H,SAAS,QAuC/B,YAAA9G,OAAA,sBACQ,EAAmCR,KAAKC,MAAtCqG,EAAU,aAAE4F,EAAgB,mBAC9B,EAAsClM,KAAKb,MAAzCuN,EAAQ,WAAEM,EAAY,eAAE1F,EAAO,UAEvC,OAAIoF,EAASvQ,OAAS,EACb,KAGLmL,EACK,gBAAC,IAAe,MAIvB,gCACE,yBAAOzH,UAAU,cACf,6BACE,0BACE,0BAAK,oBAAU,uBACf,sBAAIA,UAAU,4BACX,oBAAU,gCAEb,sBAAIA,UAAU,eAAe,oBAAU,0BAG3C,6BACG6M,EAAS/L,KAAI,SAAAlB,GAAU,OACtB,gBAACsM,GAAa,CACZtM,OAAQA,EACRwM,iBAAkB3F,EAAW3F,KAAI,SAAA8F,GAAK,OAAAA,EAAA,QACtCyF,iBAAkBA,EAClBvP,IAAK8C,EAAO/C,KACZ8P,gBAAiB,EAAKO,cACtBN,iBAAkB,EAPE,sBAY3BO,GACC,gBAAC,GAA0B,CACzBvN,OAAQuN,EACR1G,WAAYA,EACZhI,UAAW0B,KAAKC,MAAM3B,UAAU3B,IAChCqH,QAAShE,KAAKiN,mBAM1B,EApIA,CAAwC,iB,UCqCxC,SAASpC,GAAepE,GACtB,MAAO,CAAE/I,MAAO+I,EAAE/J,KAAM0J,OAAQK,EAAEL,QAGtB,SAAUuH,GAAwB1N,GAE5C,IAAAhE,EAYEgE,EAZM,SACRqG,EAWErG,EAXQ,WACV2N,EAUE3N,EAVa,gBACf3B,EASE2B,EATO,UACT+B,EAQE/B,EARY,eACdgC,EAOEhC,EAPiB,oBACnBuB,EAMEvB,EANE,KACJ4N,EAKE5N,EALY,eACdiC,EAIEjC,EAJoB,uBACtB6B,EAGE7B,EAHa,gBACf+K,EAEE/K,EAFI,OACNkC,EACElC,EADM,SAGJ,EAAyB,YAAgB,CAC7ChE,SAAQ,EACR+F,eAAc,EACdC,oBAAmB,EACnBT,KAAI,EACJU,uBAAsB,EACtBJ,gBAAe,EACfK,SAAQ,IAPFC,EAAS,YAAEC,EAAO,UAU1B,OACE,wBAAMxC,UAAU,4BAA4BgM,SAAU5L,EAAM4L,UAC1D,uBAAKhM,UAAU,+BAA+BiM,KAAK,cACjD,gBAAC,IAAK,CACJ5C,SAAUhH,EACVrC,UAAU,oBACVsJ,QAAS,WAAM,OAAAlJ,EAAM6N,yBAAN,IACfpQ,MAAM,WACL,oBAAU,qCAEb,uBAAKmC,UAAU,mBA7DvB,SAA8BgO,GAC5B,IAAIE,EACApP,EAYJ,MAX4B,mBAAxBkP,EAAe5K,MACjB8K,EAAa,oBAAU,wBAAuB,KAAK,kCACjD,gBACAF,EAAenQ,OAAS,KACzB,IACDiB,EAAc,oBAAU,sCAExBoP,EAAU,oBAAU,6BACpBpP,EAAc,oBAAU,0CAIxB,uBAAKkB,UAAU,mBACb,8BAASkO,G,KAAoBpP,GA6COqP,CAAqBH,IAEvD,gBAAC,IAAK,CACJ3E,QAAShH,EACTrC,UAAU,kBACVsJ,QAAS,WAAM,OAAAlJ,EAAM6N,yBAAN,IACfpQ,MAAM,YACL,oBAAU,uCAIf,uBAAKmC,UAAU,6DACb,uBAAKA,UAAU,qCAAqCiM,KAAK,cACvD,gBAAC5I,EAAA,EAA8B,CAC7BX,UAAWL,EACXO,SAAUxC,EAAMgO,gBAChB9L,SAAUD,GAAuC,qBAAbC,IAEtC,gBAACG,EAAA,EAAmB,CAClBd,KAAMA,EACNe,UAAWL,EACXE,UAAWA,EACXC,QAASA,EACTG,aAAcvC,EAAMiO,aACpBzL,SAAUxC,EAAMgO,gBAChB9L,SAAUD,GAAuC,mBAAbC,IAErCyL,EACC,gBAACvH,EAA8B,CAC7BC,WAAYA,EAAW3F,IAAIkK,IAC3BtI,UAAWL,EACXiF,wBAAyBlH,EAAMkO,wBAC/B1L,SAAUxC,EAAMgO,gBAChBnM,gBAAiBA,GAAmB,GACpCK,SAAUD,GAAuC,qBAAbC,EACpCoE,aAAa,YAGf,gBAACN,EAAuB,CACtB1D,UAAWL,EACXO,SAAUxC,EAAMgO,gBAChB9L,SAAUD,GAAuC,sBAAbC,KAI5B,sBAAbA,GACC,gBAAC,GAAkB,CACjBlG,SAAUA,GAAY,GACtBwD,OAAO,SACPnB,UAAWA,EACXsK,iBAAkB3I,EAAM2I,oBAI9B,uBAAK/I,UAAW,EAAW,iBAAkB,CAAEuO,WAAYhM,KACzD,gBAACiM,GAAA,MAAK,CAACC,QAAQ,OAAOzO,UAAU,iBAC7B,oBAAU,kCAEb,gBAAC,IAAe,CAACA,UAAU,eAAeyH,QAAS0D,IACnD,gBAAC,eAAY,CAACzI,SAAUyI,IAAW3I,IAAYD,GAAY,oBAAU,SACrE,gBAAC,kBAAe,CAACvC,UAAU,cAAcH,QAASO,EAAMsO,UACrD,oBAAU,a,sWCvHfC,GAAgE,CACpEvL,KAAM,oB,GAGR,uE,OACE,EAAAoG,SAAU,EACV,EAAAlK,MAAe,CACbmH,WAAY,GACZ9E,KAV2B,KAW3B8F,SAAS,EACT0D,QAAQ,GAIV,EAAAyD,aAAe,KAAS,WAAM,SAAKlP,SAAS,CAAEmP,aAAhB,MAAuC,KAiFrE,EAAAC,aAAe,WACb,EAAKpP,SAAS,CAAEyL,QAAQ,IACxB,YAAmB,CAAEpN,QAAS,EAAKqC,MAAM3B,UAAU3B,MAAOiC,MACxD,WACE,EAAKW,SAAS,CACZyL,QAAQ,EACRhJ,oBAAgB/D,EAChBkE,cAAUlE,EACVyQ,SAAS,IAEX,EAAKD,kBAEP,WACE,EAAKlP,SAAS,CAAEyL,QAAQ,QAK9B,EAAAG,qBAAuB,SAAClP,GAA+B,SAAKsD,SAAS,CAAEtD,SAAUA,EAA1B,OAEvD,EAAAmP,iBAAmB,SAAC5J,GAAiB,SAAKjC,SAAS,CAAEiC,KAAhB,KAErC,EAAA6J,4BAA8B,SAACvJ,GAC7B,EAAKvC,SAAS,CAAEuC,gBAAe,KAGjC,EAAA8M,aAAe,WACb,SAAKrP,UACH,SAAC,G,IAAE,IAAAsO,sBAAc,IAAG,EAAAW,GAAuB,EAAExM,EAAc,iBAAEC,EAAmB,sBAC9E,SAAK4M,gBAAgB,CAAEhB,eAAc,EAAE7L,eAAc,EAAEC,oBAAmB,QAGhF,EAAAqJ,oBAAsB,SAACnJ,GAA0C,SAAK5C,SAAS,CAAE4C,SAAhB,KAEjE,EAAA2M,4BAA8B,SAAC5M,GAC7B,SAAK3C,SAAS,CAAE2C,uBAAsB,KAExC,EAAA0B,aAAe,SAACb,GACdA,EAAE+H,iBAEM,IAAAxM,EAAc,EAAK2B,MAAV,UACX,EAA8E,EAAKd,MAAjFlD,EAAQ,WAAEuF,EAAI,OAAYyB,EAAI,WAAEnB,EAAe,kBAEvD,GAF+E,yBAE/E,CAKA,IAAMpE,EAAQ,YAAgB,CAAEuF,KAAI,EAAEhH,SAAQ,EAAEuF,KAAI,EAAEM,gBAAe,IAEjEmB,IACF,EAAK1D,SAAS,CAAEyL,QAAQ,IACxB,YAAiB,CACfpN,QAASU,EAAU3B,IACnBsG,KAAI,EACJvF,MAAK,IACJkB,MACD,WACE,EAAKW,SAAS,CACZyL,QAAQ,EACRhJ,eAAgBiB,EAChBhB,oBAAqBvE,QAASO,EAC9ByQ,SAAS,IAEX,EAAKD,kBAEP,WACE,EAAKlP,SAAS,CAAEyL,QAAQ,aAvB5B,EAAK2D,gB,EA+GX,OAtPiC,QAY/B,YAAA5E,kBAAA,WACE/J,KAAKqJ,SAAU,EACfrJ,KAAK+O,yBACL/O,KAAKoN,sBAAsBpN,KAAKC,MAAMoN,cAGxC,YAAA2B,mBAAA,SAAmBC,GACbA,EAAU5B,cAAgBrN,KAAKC,MAAMoN,aACvCrN,KAAKoN,sBAAsBpN,KAAKC,MAAMoN,cAI1C,YAAApD,qBAAA,WACEjK,KAAKqJ,SAAU,GAGjB,YAAAwF,gBAAA,SAAgBK,GAKN,IAAAlN,EAAwDkN,EAA1C,eAAEjN,EAAwCiN,EAArB,oBAAErB,EAAmBqB,EAAL,eACnDpN,EAAoB9B,KAAKb,MAAV,gBAEjBgQ,EACqB,mBAAxBtB,EAAe5K,MAA6B4K,EAAenQ,OA3CnC,KA6C3B,MAAO,CACL4J,SAAS,EACTtF,eAAc,EACdC,oBAAmB,EACnB4L,eAAc,EACd1L,SAAUH,GAAkB6L,EAAe5K,KAC3Cf,uBAAwBkN,QAAQpN,GAChCR,KAA0B,mBAAnBQ,GAAuCC,GAAwBkN,EACtElT,SAA8B,sBAAnB+F,GAA0CC,GAAwB,GAC7EH,gBACsB,qBAAnBE,GAAyCC,GAAwBH,IAIxE,YAAAsL,sBAAA,SAAsBC,QAAA,IAAAA,MAAA,IACpB,IAAM/G,EAAa,YAAa+G,EAAYnG,OAAO,MACnDlH,KAAKT,SAAS,CAAE+G,WAAU,EAAExE,gBAAiBwE,EAAW,GAAG5J,QAG7D,YAAAqS,uBAAA,sBACE/O,KAAKT,SAAS,CAAE+H,SAAS,IAEzBN,QAAQqI,IAAI,CACV,cACA,YAAiB,CACf5P,OAASO,KAAKC,MAAM2N,qBAA6B3P,EAAX,SACtCL,QAASoC,KAAKC,MAAM3B,UAAU3B,QAE/BiC,MACD,SAAC,G,IAACiP,EAAc,KAAEE,EAAO,KACvB,GAAI,EAAK1E,QAAS,CACXwE,EAAe5K,OAClB4K,EAAiBW,IAEnB,IAAMvM,EAAsB8L,EAAQrQ,MAC9BsE,EAAiB+L,EAAQuB,eAAYrR,EAAY8P,EAAQ9K,MAAQ,mBAEvE,EAAK1D,SACH,EAAKsP,gBAAgB,CACnBhB,eAAc,EACd7L,eAAc,EACdC,oBAAmB,SAK3B,WACE,EAAK1C,SAAS,CAAE+H,SAAS,QA8E/B,YAAA9G,OAAA,WACQ,MAA2CR,KAAKC,MAA9C2N,EAAe,kBAAEpJ,EAAQ,WAAElG,EAAS,YACtC,EAaF0B,KAAKb,MAZPlD,EAAQ,WACRqK,EAAU,aACVtE,EAAc,iBACdR,EAAI,OACJqM,EAAc,iBACdvG,EAAO,UACPrF,EAAmB,sBACnBC,EAAsB,yBACtBJ,EAAe,kBACfkJ,EAAM,SACN7I,EAAQ,WACRuM,EAAO,UAGT,OACE,gCACE,gBAACa,EAAA,EAAW,CAACC,YAAY,qBACzB,uBAAK3P,UAAU,qBACb,gBAACkG,EAAS,CAACvB,WAAYA,IACtB8C,EACC,gBAAC,IAAe,MAEhB,uBAAKzH,UAAU,gCACZ+N,GAAmB,0BAAK,oBAAU,qCAElCC,QAA6C5P,IAA3BiE,GACjB,gBAACyL,GAAuB,CACtB1R,SAAUA,EACVqK,WAAYA,EACZsH,gBAAiBA,EACjBtP,UAAWA,EAAU3B,IACrBqF,eAAgBA,EAChBC,oBAAqBA,EACrBT,KAAMA,EACNqM,eAAgBA,EAChBU,SAAUvO,KAAK4O,aACfhG,iBAAkB5I,KAAKmL,qBACvB+C,aAAclO,KAAKoL,iBACnB+C,wBAAyBnO,KAAKqL,4BAC9B4C,gBAAiBjO,KAAKsL,oBACtBO,SAAU7L,KAAK4D,aACfkK,wBAAyB9N,KAAK8O,4BAC9B5M,uBAAwBA,EACxBJ,gBAAiBA,EACjBkJ,OAAQA,EACR7I,SAAUA,IAId,uBAAKtC,UAAW,EAAW,aAAc,CAAEuO,UAAWpD,IAAW0D,KAC/D,wBAAM7O,UAAU,gBACd,gBAAC,IAAgB,CAACA,UAAU,iBAC3B,oBAAU,0BAGdgO,GAAkBD,GACjB,uBAAK/N,UAAU,4CACb,2BACA,0BAAK,oBAAU,wCACf,gBAAC,GAAU,CACTyG,WAAYA,EACZhI,UAAWA,EACX4N,iBACElK,EACI,CACEiB,KAAMjB,EACNtE,MAAOuE,GAET4L,SAW1B,EAtPA,CAAiC,iBCnClB,uBALS,SAAC1O,GAAiB,MAAC,CACzCyO,gBAAiB,sBAAYzO,GAAOyO,gBACpCpJ,SAAU,sBAAYrF,GAAOqF,YAGhB,CAAyB,K,oaCF1B,SAAU+K,EAAY,G,IAAEC,EAAW,cAC/C,OACE,gBAAC,IAAmBlM,SAAQ,MACzB,SAAC,G,IAAEmM,EAAc,iBAAEC,EAAiB,oBAAO,OAC1C,gBAACC,EAAgB,CACfF,eAAgBA,EAChBC,kBAAmBA,EACnBF,YAAaA,OAavB,+B,+CAmBA,OAnB+B,OAC7B,YAAAzF,kBAAA,WACE/J,KAAKC,MAAMwP,eAAezP,KAAKC,MAAMuP,cAGvC,YAAAR,mBAAA,SAAmBC,GACbA,EAAUO,cAAgBxP,KAAKC,MAAMuP,cACvCxP,KAAKC,MAAMyP,kBAAkB1P,KAAKC,MAAMuP,aACxCxP,KAAKC,MAAMwP,eAAeR,EAAUO,eAIxC,YAAAvF,qBAAA,WACEjK,KAAKC,MAAMyP,kBAAkB1P,KAAKC,MAAMuP,cAG1C,YAAAhP,OAAA,WACE,OAAO,MAEX,EAnBA,CAA+B,kB,6uBCpBlBoP,EAAgB,IAAUC,OAEjCC,IAAwB,MAC3B,IAAUD,QAAS,CAAC,IAAUE,KAAM,IAAUC,YAAa,IAAUC,iBACtE,EAAC,IAAUC,UAAW,CAAC,IAAUC,eAAgB,IAAUC,iBAC3D,EAAC,IAAUC,cAAe,CAAC,IAAUC,MAAO,IAAUC,kBACvD,GAEKC,IAAc,MACjB,IAAUX,QAASC,EAAyB,IAAUD,QAAQY,OAAO,CACpE,IAAUC,mBACV,IAAUC,gBACV,IAAUC,eAEZ,EAAC,IAAUV,UAAQ,EAAOJ,EAAyB,IAAUI,UAAS,CAAE,IAAUA,WAClF,EAAC,IAAUG,cAAY,EAClBP,EAAyB,IAAUO,cAAa,CACnD,IAAUQ,2BAEb,GAEK,SAAUC,EAAcnV,GAC5B,OAAOA,IAAU,IAAUoV,OAGvB,SAAUC,EAAcC,QAAA,IAAAA,OAAA,GAC5B,IAAMC,EAAS,CAAC,IAAUrB,OAAQ,IAAUK,SAAU,IAAUG,cAChE,OAAOY,EAAeC,EAAQ,EAAKA,EAAM,CAAE,IAAUH,SAGjD,SAAUI,EAAcC,GAC5B,OAAOA,EAAM5S,KAAK6S,MAAK,SAAAC,GAAS,OAAAlC,QAAQkC,EAAMC,GAAd,IAAmBD,EAAMC,MAGrD,SAAUC,EAAeC,GAC7B,OAAOA,EAAOJ,MAAK,SAAAD,GAAS,OAAAA,EAAM5S,MAAQ4S,EAAM5S,KAAKrC,OAAzB,KAGxB,SAAUuV,EAAoBD,GAClC,OAAOA,EAAOtV,OAAS,EAAIsV,EAAO,GAAGxO,KAAO,MAGxC,SAAU0O,EAA2BhW,EAAkBJ,GAC3D,OAAOuV,EAAcnV,GAASJ,EAAgBuU,EAAyBnU,GAGnE,SAAUiW,EAAkBjW,EAAkBJ,GAClD,OAAOuV,EAAcnV,GAASJ,EAAgBiV,EAAe7U,GAOzD,SAAUkW,EAAoBJ,EAAiBK,EAAkBC,GACrE,OAAO,IACL,IAAQN,GAAQ,SAAAL,GAAS,OAAAA,EAAA,SACzB,SAAAnO,GAAQ,WAAMA,EAAN,MACR6J,MAAM,EAAGgF,GAqBP,SAAUE,EACdC,EACAtW,EACAuW,EACAC,GAEA,OAAIA,EAAiBhW,QAAU,QAAyB8B,IAApBgU,EAC3B,GAEF,IACLA,EACG/K,QAAO,SAAAkL,GAAW,OAAAD,EAAiBE,QAAQD,EAAQE,SAAjC,KAClB3R,KAAI,SAAAyR,GACH,GAAIA,EAAQE,SAAW,IAAUlC,kBAAoBU,EAAcnV,GACjE,OAhCJ,SACJ4W,EACAN,GAEA,IAAMO,EAAeP,EAAgB3V,MAAK,SAAA8V,GAAW,OAAAA,EAAQE,SAAW,IAAnB,kBACrD,MAAO,CACL9T,KAAMgU,EACFD,EAAeE,QAAQ9R,KAAI,SAAC1E,EAAUkM,GAAQ,MAAC,CAC7CuK,EAAGzW,EAASgB,KACZsU,EAAG9I,OAAO+J,EAAaC,QAAQtK,GAAKzK,OAAS+K,OAAOxM,EAASyB,WAE/D,GACJhB,KAAM,gBACNiW,eAAgB,oBAAU,gDAC1B1P,KAAM,OAkBO2P,CAA2BR,EAASH,GAE7C,IAAMK,EAuCd,SAAoB3V,EAAauV,GAC/B,GAAIW,MAAMC,QAAQZ,GAChB,OAAOA,EAAQ5V,MAAK,SAAAgW,GAAU,OAAAA,EAAO3V,MAAP,KAEhC,OAAOuV,EAAQvV,GA3CMoW,CAAWX,EAAQE,OAAQJ,GAC1C,MAAO,CACL1T,KAAM4T,EAAQK,QAAQ9R,KAAI,SAAA1E,GAAY,MAAC,CACrCyW,EAAGzW,EAASgB,KACZsU,EAAGe,GAA0B,UAAhBA,EAAOrP,KAAmBhH,EAASyB,MAAQ+K,OAAOxM,EAASyB,WAE1EhB,KAAM0V,EAAQE,OACdK,eAAgBL,EAAS,iCAAuBA,GAAU,yBAAeF,EAAQE,QACjFrP,KAAMqP,EAASA,EAAOrP,KAAO,WAGnC,SAAAmO,GACE,OAAAe,EAAiBE,QAAuB,kBAAfjB,EAAM1U,KAA2B,kBAAoB0U,EAAM1U,SAIpF,SAAUsW,EACdC,EACArV,EACAjC,EACAuW,QAAA,IAAAA,MAAA,IAEA,eAAKe,EAAWtX,EAAOiC,GACnBkT,EAAcnV,IAChB,eAAQsX,EAAS,UAAWf,EAAQgB,KAAK,KAAMtV,GAI7C,SAAUuV,EACdF,EACArV,GAEA,IAAMwV,EAAe,cAAOH,EAAS,UAAWrV,GAChD,MAAO,CACLjC,MAAQ,cAAIsX,EAAWrV,IAA0BgS,EACjDwD,aAAcA,EAAeA,EAAaC,MAAM,KAAO,M,iCCzI3D,IAAYC,EAnBZ,kCAmBA,SAAYA,GACV,kBACA,sBACA,8BACA,kBAJF,CAAYA,MAAS,M,upBCWP,SAAUjH,EAAe,GAAE,IAAAhO,EAAU,aAAK4B,EAAK,IAAtB,gBACrC,OAAI,YAAc5B,GACT,gBAAC,IAAe,KAAK4B,IAErB,gBAAC,IAAU,KAAKA","file":"js/303.1613385090031.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as startOfDay from 'date-fns/start_of_day';\nimport { isEqual } from 'lodash';\nimport { parseDate } from 'sonar-ui-common/helpers/dates';\nimport {\n  cleanQuery,\n  parseAsArray,\n  parseAsDate,\n  parseAsString,\n  serializeDate,\n  serializeString,\n  serializeStringArray\n} from 'sonar-ui-common/helpers/query';\nimport { DEFAULT_GRAPH } from '../../components/activity-graph/utils';\nimport { GraphType } from '../../types/project-activity';\n\nexport interface Query {\n  category: string;\n  customMetrics: string[];\n  from?: Date;\n  graph: GraphType;\n  project: string;\n  selectedDate?: Date;\n  to?: Date;\n}\n\nexport const EVENT_TYPES = ['VERSION', 'QUALITY_GATE', 'QUALITY_PROFILE', 'OTHER'];\nexport const APPLICATION_EVENT_TYPES = ['QUALITY_GATE', 'DEFINITION_CHANGE', 'OTHER'];\n\nexport function activityQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return prevQuery.category !== nextQuery.category || datesQueryChanged(prevQuery, nextQuery);\n}\n\nexport function customMetricsChanged(prevQuery: Query, nextQuery: Query) {\n  return !isEqual(prevQuery.customMetrics, nextQuery.customMetrics);\n}\n\nexport function datesQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return !isEqual(prevQuery.from, nextQuery.from) || !isEqual(prevQuery.to, nextQuery.to);\n}\n\nexport function historyQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return prevQuery.graph !== nextQuery.graph;\n}\n\nexport function selectedDateQueryChanged(prevQuery: Query, nextQuery: Query) {\n  return !isEqual(prevQuery.selectedDate, nextQuery.selectedDate);\n}\n\ninterface AnalysesByDay {\n  byDay: T.Dict<T.ParsedAnalysis[]>;\n  version: string | null;\n  key: string | null;\n}\n\nexport function getAnalysesByVersionByDay(\n  analyses: T.ParsedAnalysis[],\n  query: Pick<Query, 'category' | 'from' | 'to'>\n) {\n  return analyses.reduce<AnalysesByDay[]>((acc, analysis) => {\n    let currentVersion = acc[acc.length - 1];\n    const versionEvent = analysis.events.find(event => event.category === 'VERSION');\n    if (versionEvent) {\n      const newVersion = { version: versionEvent.name, key: versionEvent.key, byDay: {} };\n      if (!currentVersion || Object.keys(currentVersion.byDay).length > 0) {\n        acc.push(newVersion);\n      } else {\n        acc[acc.length - 1] = newVersion;\n      }\n      currentVersion = newVersion;\n    } else if (!currentVersion) {\n      // APPs don't have version events, so let's create a fake one\n      currentVersion = { version: null, key: null, byDay: {} };\n      acc.push(currentVersion);\n    }\n\n    const day = startOfDay(parseDate(analysis.date))\n      .getTime()\n      .toString();\n\n    let matchFilters = true;\n    if (query.category || query.from || query.to) {\n      const isAfterFrom = !query.from || analysis.date >= query.from;\n      const isBeforeTo = !query.to || analysis.date <= query.to;\n      const hasSelectedCategoryEvents =\n        !query.category || analysis.events.find(event => event.category === query.category) != null;\n      matchFilters = isAfterFrom && isBeforeTo && hasSelectedCategoryEvents;\n    }\n\n    if (matchFilters) {\n      if (!currentVersion.byDay[day]) {\n        currentVersion.byDay[day] = [];\n      }\n      currentVersion.byDay[day].push(analysis);\n    }\n    return acc;\n  }, []);\n}\n\nexport function parseQuery(urlQuery: T.RawQuery): Query {\n  return {\n    category: parseAsString(urlQuery['category']),\n    customMetrics: parseAsArray(urlQuery['custom_metrics'], parseAsString),\n    from: parseAsDate(urlQuery['from']),\n    graph: parseGraph(urlQuery['graph']),\n    project: parseAsString(urlQuery['id']),\n    to: parseAsDate(urlQuery['to']),\n    selectedDate: parseAsDate(urlQuery['selected_date'])\n  };\n}\n\nexport function serializeQuery(query: Query): T.RawQuery {\n  return cleanQuery({\n    category: serializeString(query.category),\n    from: serializeDate(query.from),\n    project: serializeString(query.project),\n    to: serializeDate(query.to)\n  });\n}\n\nexport function serializeUrlQuery(query: Query): T.RawQuery {\n  return cleanQuery({\n    category: serializeString(query.category),\n    custom_metrics: serializeStringArray(query.customMetrics),\n    from: serializeDate(query.from),\n    graph: serializeGraph(query.graph),\n    id: serializeString(query.project),\n    to: serializeDate(query.to),\n    selected_date: serializeDate(query.selectedDate)\n  });\n}\n\nfunction parseGraph(value?: string) {\n  const graph = parseAsString(value);\n  return Object.keys(GraphType).includes(graph) ? (graph as GraphType) : DEFAULT_GRAPH;\n}\n\nfunction serializeGraph(value?: GraphType) {\n  return value === DEFAULT_GRAPH ? undefined : value;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { BranchLike } from '../../types/branch-like';\n\ninterface ComponentContextType {\n  branchLike: BranchLike | undefined;\n  component: T.Component | undefined;\n}\n\nexport const ComponentContext = React.createContext<ComponentContextType>({\n  branchLike: undefined,\n  component: undefined\n});\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON, RequestData } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { BranchParameters } from '../types/branch-like';\n\nexport function getProjectActivity(\n  data: {\n    project: string;\n    category?: string;\n    from?: string;\n    p?: number;\n    ps?: number;\n  } & BranchParameters\n): Promise<{ analyses: T.Analysis[]; paging: T.Paging }> {\n  return getJSON('/api/project_analyses/search', data).catch(throwGlobalError);\n}\n\ninterface CreateEventResponse {\n  analysis: string;\n  key: string;\n  name: string;\n  category: string;\n  description?: string;\n}\n\nexport function createEvent(\n  analysis: string,\n  name: string,\n  category?: string,\n  description?: string\n): Promise<CreateEventResponse> {\n  const data: RequestData = { analysis, name };\n  if (category) {\n    data.category = category;\n  }\n  if (description) {\n    data.description = description;\n  }\n  return postJSON('/api/project_analyses/create_event', data).then(r => r.event, throwGlobalError);\n}\n\nexport function deleteEvent(event: string): Promise<void | Response> {\n  return post('/api/project_analyses/delete_event', { event }).catch(throwGlobalError);\n}\n\nexport function changeEvent(\n  event: string,\n  name?: string,\n  description?: string\n): Promise<CreateEventResponse> {\n  const data: RequestData = { event };\n  if (name) {\n    data.name = name;\n  }\n  if (description) {\n    data.description = description;\n  }\n  return postJSON('/api/project_analyses/update_event', data).then(r => r.event, throwGlobalError);\n}\n\nexport function deleteAnalysis(analysis: string): Promise<void | Response> {\n  return post('/api/project_analyses/delete', { analysis }).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { ResetButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport DropdownIcon from 'sonar-ui-common/components/icons/DropdownIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { limitComponentName } from 'sonar-ui-common/helpers/path';\nimport { isMainBranch } from '../../../helpers/branch-like';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { BranchLike } from '../../../types/branch-like';\n\nexport type DefinitionChangeEvent = T.AnalysisEvent &\n  Required<Pick<T.AnalysisEvent, 'definitionChange'>>;\n\nexport function isDefinitionChangeEvent(event: T.AnalysisEvent): event is DefinitionChangeEvent {\n  return event.category === 'DEFINITION_CHANGE' && event.definitionChange !== undefined;\n}\n\ninterface Props {\n  branchLike: BranchLike | undefined;\n  event: DefinitionChangeEvent;\n}\n\ninterface State {\n  expanded: boolean;\n}\n\nexport class DefinitionChangeEventInner extends React.PureComponent<Props, State> {\n  state: State = { expanded: false };\n\n  stopPropagation = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.stopPropagation();\n  };\n\n  toggleProjectsList = () => {\n    this.setState(state => ({ expanded: !state.expanded }));\n  };\n\n  renderProjectLink = (project: { key: string; name: string }, branch: string | undefined) => (\n    <Link\n      onClick={this.stopPropagation}\n      title={project.name}\n      to={getProjectUrl(project.key, branch)}>\n      {limitComponentName(project.name, 28)}\n    </Link>\n  );\n\n  renderBranch = (branch = translate('branches.main_branch')) => (\n    <span className=\"nowrap\" title={branch}>\n      <BranchIcon className=\"little-spacer-left text-text-top\" />\n      {branch}\n    </span>\n  );\n\n  renderProjectChange(project: {\n    changeType: string;\n    key: string;\n    name: string;\n    branch?: string;\n    newBranch?: string;\n    oldBranch?: string;\n  }) {\n    const mainBranch = !this.props.branchLike || isMainBranch(this.props.branchLike);\n\n    if (project.changeType === 'ADDED') {\n      const message = mainBranch\n        ? 'event.definition_change.added'\n        : 'event.definition_change.branch_added';\n      return (\n        <div className=\"text-ellipsis\">\n          <FormattedMessage\n            defaultMessage={translate(message)}\n            id={message}\n            values={{\n              project: this.renderProjectLink(project, project.branch),\n              branch: this.renderBranch(project.branch)\n            }}\n          />\n        </div>\n      );\n    } else if (project.changeType === 'REMOVED') {\n      const message = mainBranch\n        ? 'event.definition_change.removed'\n        : 'event.definition_change.branch_removed';\n      return (\n        <div className=\"text-ellipsis\">\n          <FormattedMessage\n            defaultMessage={translate(message)}\n            id={message}\n            values={{\n              project: this.renderProjectLink(project, project.branch),\n              branch: this.renderBranch(project.branch)\n            }}\n          />\n        </div>\n      );\n    } else if (project.changeType === 'BRANCH_CHANGED') {\n      return (\n        <FormattedMessage\n          defaultMessage={translate('event.definition_change.branch_replaced')}\n          id=\"event.definition_change.branch_replaced\"\n          values={{\n            project: this.renderProjectLink(project, project.newBranch),\n            oldBranch: this.renderBranch(project.oldBranch),\n            newBranch: this.renderBranch(project.newBranch)\n          }}\n        />\n      );\n    }\n    return null;\n  }\n\n  render() {\n    const { event } = this.props;\n    const { expanded } = this.state;\n    return (\n      <>\n        <span className=\"note\">{translate('event.category', event.category)}:</span>\n\n        <div>\n          <ResetButtonLink\n            className=\"project-activity-event-inner-more-link\"\n            onClick={this.toggleProjectsList}\n            stopPropagation={true}>\n            {expanded ? translate('hide') : translate('more')}\n            <DropdownIcon className=\"little-spacer-left\" turned={expanded} />\n          </ResetButtonLink>\n        </div>\n\n        {expanded && (\n          <ul className=\"spacer-left spacer-top\">\n            {event.definitionChange.projects.map(project => (\n              <li className=\"display-flex-center spacer-top\" key={project.key}>\n                {this.renderProjectChange(project)}\n              </li>\n            ))}\n          </ul>\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { ResetButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport DropdownIcon from 'sonar-ui-common/components/icons/DropdownIcon';\nimport Level from 'sonar-ui-common/components/ui/Level';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { getProjectUrl } from '../../../helpers/urls';\n\nexport type RichQualityGateEvent = T.AnalysisEvent & Required<Pick<T.AnalysisEvent, 'qualityGate'>>;\n\nexport function isRichQualityGateEvent(event: T.AnalysisEvent): event is RichQualityGateEvent {\n  return event.category === 'QUALITY_GATE' && event.qualityGate !== undefined;\n}\n\ninterface Props {\n  event: RichQualityGateEvent;\n}\n\ninterface State {\n  expanded: boolean;\n}\n\nexport class RichQualityGateEventInner extends React.PureComponent<Props, State> {\n  state: State = { expanded: false };\n\n  stopPropagation = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.stopPropagation();\n  };\n\n  toggleProjectsList = () => {\n    this.setState(state => ({ expanded: !state.expanded }));\n  };\n\n  render() {\n    const { event } = this.props;\n    const { expanded } = this.state;\n    return (\n      <>\n        <span className=\"note spacer-right\">{translate('event.category', event.category)}:</span>\n        {event.qualityGate.stillFailing ? (\n          <FormattedMessage\n            defaultMessage={translate('event.quality_gate.still_x')}\n            id=\"event.quality_gate.still_x\"\n            values={{ status: <Level level={event.qualityGate.status} small={true} /> }}\n          />\n        ) : (\n          <Level level={event.qualityGate.status} small={true} />\n        )}\n\n        <div>\n          {event.qualityGate.failing.length > 0 && (\n            <ResetButtonLink\n              className=\"project-activity-event-inner-more-link\"\n              onClick={this.toggleProjectsList}\n              stopPropagation={true}>\n              {expanded ? translate('hide') : translate('more')}\n              <DropdownIcon className=\"little-spacer-left\" turned={expanded} />\n            </ResetButtonLink>\n          )}\n        </div>\n\n        {expanded && (\n          <ul className=\"spacer-left spacer-top\">\n            {event.qualityGate.failing.map(project => (\n              <li className=\"display-flex-center spacer-top\" key={project.key}>\n                <Level\n                  aria-label={translate('quality_gates.status')}\n                  className=\"spacer-right\"\n                  level={event.qualityGate.status}\n                  small={true}\n                />\n                <div className=\"flex-1 text-ellipsis\">\n                  <Link\n                    onClick={this.stopPropagation}\n                    title={project.name}\n                    to={getProjectUrl(project.key, project.branch)}>\n                    <span aria-label={translateWithParameters('project_x', project.name)}>\n                      {project.name}\n                    </span>\n                  </Link>\n                </div>\n              </li>\n            ))}\n          </ul>\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\n\nexport function getNewCodePeriod(data?: {\n  project?: string;\n  branch?: string;\n}): Promise<T.Omit<T.NewCodePeriod, 'effectiveValue'>> {\n  return getJSON('/api/new_code_periods/show', data).catch(throwGlobalError);\n}\n\nexport function setNewCodePeriod(data: {\n  project?: string;\n  branch?: string;\n  type: T.NewCodePeriodSettingType;\n  value?: string;\n}): Promise<void> {\n  return post('/api/new_code_periods/set', data).catch(throwGlobalError);\n}\n\nexport function resetNewCodePeriod(data: { project?: string; branch?: string }): Promise<void> {\n  return post('/api/new_code_periods/unset', data).catch(throwGlobalError);\n}\n\nexport function listBranchesNewCodePeriod(data: {\n  project: string;\n}): Promise<{ newCodePeriods: T.NewCodePeriodBranch[] }> {\n  return getJSON('/api/new_code_periods/list', data).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport function validateDays(days: string) {\n  const parsed = parseInt(days, 10);\n\n  return !(days.length < 1 || isNaN(parsed) || parsed < 1 || String(parsed) !== days);\n}\n\nexport function getSettingValue({\n  analysis,\n  days,\n  referenceBranch,\n  type\n}: {\n  analysis?: string;\n  days?: string;\n  referenceBranch?: string;\n  type?: T.NewCodePeriodSettingType;\n}) {\n  switch (type) {\n    case 'NUMBER_OF_DAYS':\n      return days;\n    case 'REFERENCE_BRANCH':\n      return referenceBranch;\n    case 'SPECIFIC_ANALYSIS':\n      return analysis;\n    default:\n      return undefined;\n  }\n}\n\nexport function validateSetting(state: {\n  analysis?: string;\n  currentSetting?: T.NewCodePeriodSettingType;\n  currentSettingValue?: string;\n  days: string;\n  overrideGeneralSetting?: boolean;\n  referenceBranch?: string;\n  selected?: T.NewCodePeriodSettingType;\n}) {\n  const {\n    analysis = '',\n    currentSetting,\n    currentSettingValue,\n    days,\n    overrideGeneralSetting,\n    referenceBranch = '',\n    selected\n  } = state;\n\n  let isChanged;\n  if (!currentSetting && overrideGeneralSetting !== undefined) {\n    isChanged = overrideGeneralSetting;\n  } else {\n    isChanged =\n      overrideGeneralSetting === false ||\n      selected !== currentSetting ||\n      (selected === 'NUMBER_OF_DAYS' && days !== currentSettingValue) ||\n      (selected === 'SPECIFIC_ANALYSIS' && analysis !== currentSettingValue) ||\n      (selected === 'REFERENCE_BRANCH' && referenceBranch !== currentSettingValue);\n  }\n\n  const isValid =\n    overrideGeneralSetting === false ||\n    selected === 'PREVIOUS_VERSION' ||\n    (selected === 'SPECIFIC_ANALYSIS' && analysis.length > 0) ||\n    (selected === 'NUMBER_OF_DAYS' && validateDays(days)) ||\n    (selected === 'REFERENCE_BRANCH' && referenceBranch.length > 0);\n\n  return { isChanged, isValid };\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport RadioCard from 'sonar-ui-common/components/controls/RadioCard';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface Props {\n  className?: string;\n  days: string;\n  disabled?: boolean;\n  isChanged: boolean;\n  isValid: boolean;\n  onChangeDays: (value: string) => void;\n  onSelect: (selection: T.NewCodePeriodSettingType) => void;\n  selected: boolean;\n}\n\nexport default function BaselineSettingDays(props: Props) {\n  const { className, days, disabled, isChanged, isValid, onChangeDays, onSelect, selected } = props;\n  return (\n    <RadioCard\n      className={className}\n      disabled={disabled}\n      onClick={() => onSelect('NUMBER_OF_DAYS')}\n      selected={selected}\n      title={translate('baseline.number_days')}>\n      <>\n        <p className=\"big-spacer-bottom\">{translate('baseline.number_days.description')}</p>\n        {selected && (\n          <ValidationInput\n            error={undefined}\n            id=\"baseline_number_of_days\"\n            isInvalid={isChanged && !isValid}\n            isValid={isChanged && isValid}\n            label={translate('baseline.specify_days')}\n            required={true}>\n            <input onChange={e => onChangeDays(e.currentTarget.value)} type=\"text\" value={days} />\n          </ValidationInput>\n        )}\n      </>\n    </RadioCard>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport RadioCard from 'sonar-ui-common/components/controls/RadioCard';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface Props {\n  disabled?: boolean;\n  isDefault?: boolean;\n  onSelect: (selection: T.NewCodePeriodSettingType) => void;\n  selected: boolean;\n}\n\nexport default function BaselineSettingPreviousVersion(props: Props) {\n  const { disabled, isDefault, onSelect, selected } = props;\n  return (\n    <RadioCard\n      disabled={disabled}\n      onClick={() => onSelect('PREVIOUS_VERSION')}\n      selected={selected}\n      title={\n        translate('baseline.previous_version') + (isDefault ? ` (${translate('default')})` : '')\n      }>\n      <p>{translate('baseline.previous_version.description')}</p>\n    </RadioCard>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { ComponentContext } from '../../../app/components/ComponentContext';\nimport { DefinitionChangeEventInner, isDefinitionChangeEvent } from './DefinitionChangeEventInner';\nimport { isRichQualityGateEvent, RichQualityGateEventInner } from './RichQualityGateEventInner';\n\nexport interface EventInnerProps {\n  event: T.AnalysisEvent;\n}\n\nexport default function EventInner({ event }: EventInnerProps) {\n  if (isRichQualityGateEvent(event)) {\n    return <RichQualityGateEventInner event={event} />;\n  } else if (isDefinitionChangeEvent(event)) {\n    return (\n      <ComponentContext.Consumer>\n        {({ branchLike }) => <DefinitionChangeEventInner branchLike={branchLike} event={event} />}\n      </ComponentContext.Consumer>\n    );\n  } else {\n    const content = (\n      <span className=\"text-middle\">\n        <span className=\"note little-spacer-right\">\n          {translate('event.category', event.category)}:\n        </span>\n        <strong className=\"spacer-right\">{event.name}</strong>\n      </span>\n    );\n    return event.description ? <Tooltip overlay={event.description}>{content}</Tooltip> : content;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\ninterface Props {\n  changeEvent: (event: string, name: string) => Promise<void>;\n  event: T.AnalysisEvent;\n  header: string;\n  onClose: () => void;\n}\n\ninterface State {\n  name: string;\n}\n\nexport default class ChangeEventForm extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { name: props.event.name };\n  }\n\n  changeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ name: event.target.value });\n  };\n\n  handleSubmit = () => {\n    return this.props.changeEvent(this.props.event.key, this.state.name);\n  };\n\n  render() {\n    const { name } = this.state;\n    return (\n      <ConfirmModal\n        confirmButtonText={translate('change_verb')}\n        confirmDisable={!name || name === this.props.event.name}\n        header={this.props.header}\n        onClose={this.props.onClose}\n        onConfirm={this.handleSubmit}\n        size=\"small\">\n        <div className=\"modal-field\">\n          <label>{translate('name')}</label>\n          <input autoFocus={true} onChange={this.changeInput} type=\"text\" value={name} />\n        </div>\n      </ConfirmModal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ConfirmModal from 'sonar-ui-common/components/controls/ConfirmModal';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface RemoveEventFormProps {\n  analysisKey: string;\n  event: T.AnalysisEvent;\n  header: string;\n  removeEventQuestion: string;\n  onClose: () => void;\n  onConfirm: (analysis: string, event: string) => Promise<void>;\n}\n\nexport default function RemoveEventForm(props: RemoveEventFormProps) {\n  const { analysisKey, event, header, removeEventQuestion } = props;\n  return (\n    <ConfirmModal\n      confirmButtonText={translate('delete')}\n      header={header}\n      isDestructive={true}\n      onClose={props.onClose}\n      onConfirm={() => props.onConfirm(analysisKey, event.key)}>\n      {removeEventQuestion}\n    </ConfirmModal>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { DeleteButton, EditButton } from 'sonar-ui-common/components/controls/buttons';\nimport ProjectEventIcon from 'sonar-ui-common/components/icons/ProjectEventIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport EventInner from './EventInner';\nimport ChangeEventForm from './forms/ChangeEventForm';\nimport RemoveEventForm from './forms/RemoveEventForm';\n\nexport interface EventProps {\n  analysisKey: string;\n  canAdmin?: boolean;\n  event: T.AnalysisEvent;\n  isFirst?: boolean;\n  onChange?: (event: string, name: string) => Promise<void>;\n  onDelete?: (analysisKey: string, event: string) => Promise<void>;\n}\n\nexport function Event(props: EventProps) {\n  const { analysisKey, event, canAdmin, isFirst } = props;\n\n  const [changing, setChanging] = React.useState(false);\n  const [deleting, setDeleting] = React.useState(false);\n\n  const isOther = event.category === 'OTHER';\n  const isVersion = event.category === 'VERSION';\n  const canChange = (isOther || isVersion) && props.onChange;\n  const canDelete = (isOther || (isVersion && !isFirst)) && props.onDelete;\n  const showActions = canAdmin && (canChange || canDelete);\n\n  return (\n    <div className=\"project-activity-event\">\n      <ProjectEventIcon\n        className={classNames(\n          'project-activity-event-icon little-spacer-right text-middle',\n          event.category\n        )}\n      />\n\n      <EventInner event={event} />\n\n      {showActions && (\n        <span className=\"nowrap\">\n          {canChange && (\n            <EditButton\n              aria-label={translate('project_activity.events.tooltip.edit')}\n              className=\"button-small\"\n              data-test=\"project-activity__edit-event\"\n              onClick={() => setChanging(true)}\n              stopPropagation={true}\n            />\n          )}\n          {canDelete && (\n            <DeleteButton\n              aria-label={translate('project_activity.events.tooltip.delete')}\n              className=\"button-small\"\n              data-test=\"project-activity__delete-event\"\n              onClick={() => setDeleting(true)}\n              stopPropagation={true}\n            />\n          )}\n        </span>\n      )}\n\n      {changing && props.onChange && (\n        <ChangeEventForm\n          changeEvent={props.onChange}\n          event={event}\n          header={\n            isVersion\n              ? translate('project_activity.change_version')\n              : translate('project_activity.change_custom_event')\n          }\n          onClose={() => setChanging(false)}\n        />\n      )}\n\n      {deleting && props.onDelete && (\n        <RemoveEventForm\n          analysisKey={analysisKey}\n          event={event}\n          header={\n            isVersion\n              ? translate('project_activity.remove_version')\n              : translate('project_activity.remove_custom_event')\n          }\n          onClose={() => setDeleting(false)}\n          onConfirm={props.onDelete}\n          removeEventQuestion={translate(\n            `project_activity.${isVersion ? 'remove_version' : 'remove_custom_event'}.question`\n          )}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(Event);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { sortBy } from 'lodash';\nimport * as React from 'react';\nimport Event from './Event';\n\nexport interface EventsProps {\n  analysisKey: string;\n  canAdmin?: boolean;\n  events: T.AnalysisEvent[];\n  isFirst?: boolean;\n  onChange?: (event: string, name: string) => Promise<void>;\n  onDelete?: (analysis: string, event: string) => Promise<void>;\n}\n\nexport function Events(props: EventsProps) {\n  const { analysisKey, canAdmin, events, isFirst } = props;\n\n  const sortedEvents = sortBy(\n    events,\n    // versions last\n    event => (event.category === 'VERSION' ? 1 : 0),\n    // then the rest sorted by category\n    'category'\n  );\n\n  return (\n    <div className=\"big-spacer-top\">\n      {sortedEvents.map(event => (\n        <Event\n          analysisKey={analysisKey}\n          canAdmin={canAdmin}\n          event={event}\n          isFirst={isFirst}\n          key={event.key}\n          onChange={props.onChange}\n          onDelete={props.onDelete}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default React.memo(Events);\n","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../node_modules/postcss-loader/src/index.js??postcss!./styles.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".project-baseline{padding:32px}.project-baseline-setting{display:flex;flex-direction:column;max-height:60vh;padding-top:2px}.project-baseline-selector .general-setting{margin-left:7px}.branch-baseline-selector>hr{margin:0 -32px 32px}.branch-baseline-setting-modal{min-height:450px;display:flex;flex-direction:column}.branch-analysis-list-wrapper{display:flex;flex-direction:column;overflow:hidden;position:relative;min-height:200px}.branch-analysis-list{overflow-y:auto;padding-left:12px;padding-right:15px;min-height:50px}.branch-analysis-list>ul{padding-top:18px}.branch-analysis-date{margin-bottom:16px;font-size:15px;font-weight:700}.branch-analysis-day{margin-top:8px;margin-bottom:24px}.branch-analysis{display:flex;justify-content:space-between;cursor:pointer;padding:8px;border-top:1px solid #e6e6e6;border-bottom:1px solid #e6e6e6}.branch-analysis+.branch-analysis{border-top:none}.branch-analysis:hover{background-color:#cae3f2}.branch-analysis>.project-activity-events{flex:1 0 50%}.branch-analysis-time{width:150px}.branch-analysis-version-badge{margin-left:-12px;padding-top:8px;padding-bottom:8px;background-color:#fff}.branch-analysis-version-badge.sticky+.branch-analysis-days-list{padding-top:36px}.branch-analysis-version-badge.first,.branch-analysis-version-badge.sticky{position:absolute;top:1px;left:13px;right:16px;padding-top:24px;z-index:1}.branch-analysis-version-badge .badge{max-width:385px;border-radius:0 2px 2px 0;font-weight:700;font-size:12px;letter-spacing:0;overflow:hidden;text-overflow:ellipsis}.branch-setting-warning{background-color:#fcf8e3!important}.project-activity-event-icon.VERSION{color:#4b9fd5}.project-activity-event-icon.QUALITY_GATE{color:#9139d4}.project-activity-event-icon.QUALITY_PROFILE{color:#ccc}.project-activity-event-icon.DEFINITION_CHANGE{color:#33a759}.project-activity-event-icon.OTHER{color:#442d1b}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface AppHeaderProps {\n  canAdmin: boolean;\n}\n\nexport default function AppHeader(props: AppHeaderProps) {\n  const { canAdmin } = props;\n\n  return (\n    <header className=\"page-header\">\n      <h1 className=\"page-title\">{translate('project_baseline.page')}</h1>\n      <p className=\"page-description\">\n        <FormattedMessage\n          defaultMessage={translate('project_baseline.page.description')}\n          id=\"project_baseline.page.description\"\n          values={{\n            link: (\n              <Link to=\"/documentation/project-administration/new-code-period/\">\n                {translate('project_baseline.page.description.link')}\n              </Link>\n            )\n          }}\n        />\n        <br />\n        {canAdmin && (\n          <FormattedMessage\n            defaultMessage={translate('project_baseline.page.description2')}\n            id=\"project_baseline.page.description2\"\n            values={{\n              link: (\n                <Link to=\"/admin/settings?category=new_code_period\">\n                  {translate('project_baseline.page.description2.link')}\n                </Link>\n              )\n            }}\n          />\n        )}\n      </p>\n    </header>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport RadioCard from 'sonar-ui-common/components/controls/RadioCard';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\nexport interface Props {\n  disabled?: boolean;\n  onSelect: (selection: T.NewCodePeriodSettingType) => void;\n  selected: boolean;\n}\n\nexport default function BaselineSettingAnalysis({ disabled, onSelect, selected }: Props) {\n  return (\n    <RadioCard\n      disabled={disabled}\n      onClick={() => onSelect('SPECIFIC_ANALYSIS')}\n      selected={selected}\n      title={translate('baseline.specific_analysis')}>\n      <p className=\"big-spacer-bottom\">{translate('baseline.specific_analysis.description')}</p>\n    </RadioCard>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport RadioCard from 'sonar-ui-common/components/controls/RadioCard';\nimport SearchSelect from 'sonar-ui-common/components/controls/SearchSelect';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport AlertErrorIcon from 'sonar-ui-common/components/icons/AlertErrorIcon';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\n\nexport interface BaselineSettingReferenceBranchProps {\n  branchList: BranchOption[];\n  className?: string;\n  configuredBranchName?: string;\n  disabled?: boolean;\n  onChangeReferenceBranch: (value: string) => void;\n  onSelect: (selection: T.NewCodePeriodSettingType) => void;\n  referenceBranch: string;\n  selected: boolean;\n  settingLevel: 'project' | 'branch';\n}\n\nexport interface BranchOption {\n  disabled?: boolean;\n  isInvalid?: boolean;\n  isMain: boolean;\n  value: string;\n}\n\nfunction renderBranchOption(option: BranchOption) {\n  return option.isInvalid ? (\n    <Tooltip\n      overlay={translateWithParameters('baseline.reference_branch.does_not_exist', option.value)}>\n      <span>\n        {option.value} <AlertErrorIcon />\n      </span>\n    </Tooltip>\n  ) : (\n    <>\n      <span\n        title={\n          option.disabled ? translate('baseline.reference_branch.cannot_be_itself') : undefined\n        }>\n        {option.value}\n      </span>\n      {option.isMain && (\n        <div className=\"badge spacer-left\">{translate('branches.main_branch')}</div>\n      )}\n    </>\n  );\n}\n\nexport default function BaselineSettingReferenceBranch(props: BaselineSettingReferenceBranchProps) {\n  const { branchList, className, disabled, referenceBranch, selected, settingLevel } = props;\n\n  const currentBranch = branchList.find(b => b.value === referenceBranch) || {\n    value: referenceBranch,\n    isMain: false,\n    isInvalid: true\n  };\n\n  return (\n    <RadioCard\n      className={className}\n      disabled={disabled}\n      onClick={() => props.onSelect('REFERENCE_BRANCH')}\n      selected={selected}\n      title={translate('baseline.reference_branch')}>\n      <>\n        <p>{translate('baseline.reference_branch.description')}</p>\n        {selected && (\n          <>\n            {settingLevel === 'project' && (\n              <p className=\"spacer-top\">{translate('baseline.reference_branch.description2')}</p>\n            )}\n            <div className=\"big-spacer-top display-flex-column\">\n              <label className=\"text-middle\" htmlFor=\"reference_branch\">\n                <strong>{translate('baseline.reference_branch.choose')}</strong>\n                <em className=\"mandatory\">*</em>\n              </label>\n              <SearchSelect<BranchOption>\n                autofocus={false}\n                className=\"little-spacer-top spacer-bottom\"\n                defaultOptions={branchList}\n                minimumQueryLength={1}\n                onSearch={q => Promise.resolve(branchList.filter(b => b.value.includes(q)))}\n                onSelect={option => props.onChangeReferenceBranch(option.value)}\n                renderOption={renderBranchOption}\n                value={currentBranch}\n              />\n            </div>\n          </>\n        )}\n      </>\n    </RadioCard>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport Select from 'sonar-ui-common/components/controls/Select';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport DateFormatter from 'sonar-ui-common/components/intl/DateFormatter';\nimport TimeFormatter from 'sonar-ui-common/components/intl/TimeFormatter';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { parseDate, toShortNotSoISOString } from 'sonar-ui-common/helpers/dates';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport Events from '../../projectActivity/components/Events';\nimport { getAnalysesByVersionByDay } from '../../projectActivity/utils';\n\nexport interface BranchAnalysisListRendererProps {\n  analyses: T.ParsedAnalysis[];\n  handleRangeChange: ({ value }: { value: number }) => void;\n  handleScroll: (e: React.SyntheticEvent<HTMLDivElement>) => void;\n  loading: boolean;\n  onSelectAnalysis: (analysis: T.ParsedAnalysis) => void;\n  range: number;\n  registerBadgeNode: (version: string) => (el: HTMLDivElement) => void;\n  registerScrollableNode: (el: HTMLDivElement) => void;\n  selectedAnalysisKey: string;\n  shouldStick: (version: string) => boolean;\n}\n\nfunction renderAnalysis(args: {\n  analysis: T.ParsedAnalysis;\n  isFirst: boolean;\n  onSelectAnalysis: (analysis: T.ParsedAnalysis) => void;\n  selectedAnalysisKey: string;\n}) {\n  const { analysis, isFirst, onSelectAnalysis, selectedAnalysisKey } = args;\n  return (\n    <li\n      className={classNames('branch-analysis', {\n        selected: analysis.key === selectedAnalysisKey\n      })}\n      data-date={parseDate(analysis.date).valueOf()}\n      key={analysis.key}\n      onClick={() => onSelectAnalysis(analysis)}>\n      <div className=\"branch-analysis-time spacer-right\">\n        <TimeFormatter date={parseDate(analysis.date)} long={false}>\n          {formattedTime => (\n            <time className=\"text-middle\" dateTime={parseDate(analysis.date).toISOString()}>\n              {formattedTime}\n            </time>\n          )}\n        </TimeFormatter>\n      </div>\n\n      {analysis.events.length > 0 && (\n        <Events analysisKey={analysis.key} events={analysis.events} isFirst={isFirst} />\n      )}\n\n      <div className=\"analysis-selection-button\">\n        <Radio checked={analysis.key === selectedAnalysisKey} onCheck={() => {}} value=\"\" />\n      </div>\n    </li>\n  );\n}\n\nexport default function BranchAnalysisListRenderer(props: BranchAnalysisListRendererProps) {\n  const { analyses, loading, range, selectedAnalysisKey } = props;\n\n  const byVersionByDay = React.useMemo(\n    () =>\n      getAnalysesByVersionByDay(analyses, {\n        category: ''\n      }),\n    [analyses]\n  );\n\n  const hasFilteredData =\n    byVersionByDay.length > 1 ||\n    (byVersionByDay.length === 1 && Object.keys(byVersionByDay[0].byDay).length > 0);\n\n  return (\n    <>\n      <div className=\"spacer-bottom\">\n        {translate('baseline.analysis_from')}\n        <Select\n          autoBlur={true}\n          className=\"input-medium spacer-left\"\n          clearable={false}\n          onChange={props.handleRangeChange}\n          options={[\n            {\n              label: translate('baseline.branch_analyses.ranges.30days'),\n              value: 30\n            },\n            {\n              label: translate('baseline.branch_analyses.ranges.allTime'),\n              value: 0\n            }\n          ]}\n          searchable={false}\n          value={range}\n        />\n      </div>\n      <div className=\"branch-analysis-list-wrapper\">\n        <div\n          className=\"bordered branch-analysis-list\"\n          onScroll={props.handleScroll}\n          ref={props.registerScrollableNode}>\n          {loading && <DeferredSpinner className=\"big-spacer-top\" />}\n\n          {!loading && !hasFilteredData ? (\n            <div className=\"big-spacer-top big-spacer-bottom strong\">\n              {translate('baseline.no_analyses')}\n            </div>\n          ) : (\n            <ul>\n              {byVersionByDay.map((version, idx) => {\n                const days = Object.keys(version.byDay);\n                if (days.length <= 0) {\n                  return null;\n                }\n                return (\n                  <li key={version.key || 'noversion'}>\n                    {version.version && (\n                      <div\n                        className={classNames('branch-analysis-version-badge', {\n                          first: idx === 0,\n                          sticky: props.shouldStick(version.version)\n                        })}\n                        ref={props.registerBadgeNode(version.version)}>\n                        <Tooltip\n                          mouseEnterDelay={0.5}\n                          overlay={`${translate('version')} ${version.version}`}>\n                          <span className=\"badge\">{version.version}</span>\n                        </Tooltip>\n                      </div>\n                    )}\n                    <ul className=\"branch-analysis-days-list\">\n                      {days.map(day => (\n                        <li\n                          className=\"branch-analysis-day\"\n                          data-day={toShortNotSoISOString(Number(day))}\n                          key={day}>\n                          <div className=\"branch-analysis-date\">\n                            <DateFormatter date={Number(day)} long={true} />\n                          </div>\n                          <ul className=\"branch-analysis-analyses-list\">\n                            {version.byDay[day] != null &&\n                              version.byDay[day].map(analysis =>\n                                renderAnalysis({\n                                  analysis,\n                                  selectedAnalysisKey,\n                                  isFirst: analyses[0].key === analysis.key,\n                                  onSelectAnalysis: props.onSelectAnalysis\n                                })\n                              )}\n                          </ul>\n                        </li>\n                      ))}\n                    </ul>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { subDays } from 'date-fns';\nimport { throttle } from 'lodash';\nimport * as React from 'react';\nimport { parseDate, toShortNotSoISOString } from 'sonar-ui-common/helpers/dates';\nimport { scrollToElement } from 'sonar-ui-common/helpers/scrolling';\nimport { getProjectActivity } from '../../../api/projectActivity';\nimport BranchAnalysisListRenderer from './BranchAnalysisListRenderer';\n\ninterface Props {\n  analysis: string;\n  branch: string;\n  component: string;\n  onSelectAnalysis: (analysis: T.ParsedAnalysis) => void;\n}\n\ninterface State {\n  analyses: T.ParsedAnalysis[];\n  loading: boolean;\n  range: number;\n  scroll: number;\n}\n\nconst STICKY_BADGE_SCROLL_OFFSET = 10;\n\nexport default class BranchAnalysisList extends React.PureComponent<Props, State> {\n  mounted = false;\n  badges: T.Dict<HTMLDivElement> = {};\n  scrollableNode?: HTMLDivElement;\n  state: State = {\n    analyses: [],\n    loading: true,\n    range: 30,\n    scroll: 0\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.updateScroll = throttle(this.updateScroll, 20);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchAnalyses(true);\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  scrollToSelected() {\n    const selectedNode = document.querySelector('.branch-analysis.selected');\n    if (this.scrollableNode && selectedNode) {\n      scrollToElement(selectedNode, { parent: this.scrollableNode, bottomOffset: 40 });\n    }\n  }\n\n  fetchAnalyses(initial = false) {\n    const { analysis, branch, component } = this.props;\n    const { range } = this.state;\n    this.setState({ loading: true });\n\n    return getProjectActivity({\n      branch,\n      project: component,\n      from: range ? toShortNotSoISOString(subDays(new Date(), range)) : undefined\n    }).then((result: { analyses: T.Analysis[] }) => {\n      // If the selected analysis wasn't found in the default 30 days range, redo the search\n      if (initial && analysis && !result.analyses.find(a => a.key === analysis)) {\n        this.handleRangeChange({ value: 0 });\n        return;\n      }\n\n      this.setState(\n        {\n          analyses: result.analyses.map(analysis => ({\n            ...analysis,\n            date: parseDate(analysis.date)\n          })) as T.ParsedAnalysis[],\n          loading: false\n        },\n        () => {\n          this.scrollToSelected();\n        }\n      );\n    });\n  }\n\n  handleScroll = (e: React.SyntheticEvent<HTMLDivElement>) => {\n    if (e.currentTarget) {\n      this.updateScroll(e.currentTarget.scrollTop);\n    }\n  };\n\n  updateScroll = (scroll: number) => {\n    this.setState({ scroll });\n  };\n\n  registerBadgeNode = (version: string) => (el: HTMLDivElement) => {\n    if (el) {\n      if (!el.getAttribute('originOffsetTop')) {\n        el.setAttribute('originOffsetTop', String(el.offsetTop));\n      }\n      this.badges[version] = el;\n    }\n  };\n\n  shouldStick = (version: string) => {\n    const badge = this.badges[version];\n    return (\n      !!badge &&\n      Number(badge.getAttribute('originOffsetTop')) < this.state.scroll + STICKY_BADGE_SCROLL_OFFSET\n    );\n  };\n\n  handleRangeChange = ({ value }: { value: number }) => {\n    this.setState({ range: value }, () => this.fetchAnalyses());\n  };\n\n  render() {\n    const { analysis, onSelectAnalysis } = this.props;\n    const { analyses, loading, range } = this.state;\n\n    return (\n      <BranchAnalysisListRenderer\n        analyses={analyses}\n        handleRangeChange={this.handleRangeChange}\n        handleScroll={this.handleScroll}\n        loading={loading}\n        onSelectAnalysis={onSelectAnalysis}\n        range={range}\n        registerBadgeNode={this.registerBadgeNode}\n        registerScrollableNode={el => {\n          this.scrollableNode = el;\n        }}\n        selectedAnalysisKey={analysis}\n        shouldStick={this.shouldStick}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Modal from 'sonar-ui-common/components/controls/Modal';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { toNotSoISOString } from 'sonar-ui-common/helpers/dates';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { setNewCodePeriod } from '../../../api/newCodePeriod';\nimport { Branch, BranchWithNewCodePeriod } from '../../../types/branch-like';\nimport { getSettingValue, validateSetting } from '../utils';\nimport BaselineSettingAnalysis from './BaselineSettingAnalysis';\nimport BaselineSettingDays from './BaselineSettingDays';\nimport BaselineSettingPreviousVersion from './BaselineSettingPreviousVersion';\nimport BaselineSettingReferenceBranch from './BaselineSettingReferenceBranch';\nimport BranchAnalysisList from './BranchAnalysisList';\n\ninterface Props {\n  branch: BranchWithNewCodePeriod;\n  branchList: Branch[];\n  component: string;\n  onClose: (branch?: string, newSetting?: T.NewCodePeriod) => void;\n}\n\ninterface State {\n  analysis: string;\n  analysisDate?: Date;\n  days: string;\n  referenceBranch: string;\n  saving: boolean;\n  selected?: T.NewCodePeriodSettingType;\n}\n\nexport default class BranchBaselineSettingModal extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    const otherBranches = props.branchList.filter(b => b.name !== props.branch.name);\n    const defaultBranch = otherBranches.length > 0 ? otherBranches[0].name : '';\n\n    this.state = {\n      analysis: this.getValueFromProps('SPECIFIC_ANALYSIS') || '',\n      days: this.getValueFromProps('NUMBER_OF_DAYS') || '30',\n      referenceBranch: this.getValueFromProps('REFERENCE_BRANCH') || defaultBranch,\n      saving: false,\n      selected: this.props.branch.newCodePeriod && this.props.branch.newCodePeriod.type\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  getValueFromProps(type: T.NewCodePeriodSettingType) {\n    return this.props.branch.newCodePeriod && this.props.branch.newCodePeriod.type === type\n      ? this.props.branch.newCodePeriod.value\n      : null;\n  }\n\n  branchToOption = (b: Branch) => ({\n    value: b.name,\n    isMain: b.isMain,\n    disabled: b.name === this.props.branch.name // cannot itself be used as a reference branch\n  });\n\n  handleSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const { branch, component } = this.props;\n    const { analysis, analysisDate, days, referenceBranch, selected: type } = this.state;\n\n    const value = getSettingValue({ type, analysis, days, referenceBranch });\n\n    if (type) {\n      this.setState({ saving: true });\n      setNewCodePeriod({\n        project: component,\n        type,\n        value,\n        branch: branch.name\n      }).then(\n        () => {\n          this.setState({\n            saving: false\n          });\n          this.props.onClose(branch.name, {\n            type,\n            value,\n            effectiveValue: analysisDate && toNotSoISOString(analysisDate)\n          });\n        },\n        () => {\n          this.setState({\n            saving: false\n          });\n        }\n      );\n    }\n  };\n\n  requestClose = () => this.props.onClose();\n\n  handleSelectAnalysis = (analysis: T.ParsedAnalysis) =>\n    this.setState({ analysis: analysis.key, analysisDate: analysis.date });\n\n  handleSelectDays = (days: string) => this.setState({ days });\n\n  handleSelectReferenceBranch = (referenceBranch: string) => this.setState({ referenceBranch });\n\n  handleSelectSetting = (selected: T.NewCodePeriodSettingType) => this.setState({ selected });\n\n  render() {\n    const { branch, branchList } = this.props;\n    const { analysis, days, referenceBranch, saving, selected } = this.state;\n\n    const header = translateWithParameters('baseline.new_code_period_for_branch_x', branch.name);\n\n    const currentSetting = branch.newCodePeriod && branch.newCodePeriod.type;\n    const currentSettingValue = branch.newCodePeriod && branch.newCodePeriod.value;\n\n    const { isChanged, isValid } = validateSetting({\n      analysis,\n      currentSetting,\n      currentSettingValue,\n      days,\n      referenceBranch,\n      selected\n    });\n\n    return (\n      <Modal contentLabel={header} onRequestClose={this.requestClose} size=\"large\">\n        <header className=\"modal-head\">\n          <h2>{header}</h2>\n        </header>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"modal-body modal-container branch-baseline-setting-modal\">\n            <div className=\"display-flex-row huge-spacer-bottom\" role=\"radiogroup\">\n              <BaselineSettingPreviousVersion\n                isDefault={false}\n                onSelect={this.handleSelectSetting}\n                selected={selected === 'PREVIOUS_VERSION'}\n              />\n              <BaselineSettingDays\n                days={days}\n                isChanged={isChanged}\n                isValid={isValid}\n                onChangeDays={this.handleSelectDays}\n                onSelect={this.handleSelectSetting}\n                selected={selected === 'NUMBER_OF_DAYS'}\n              />\n              <BaselineSettingAnalysis\n                onSelect={this.handleSelectSetting}\n                selected={selected === 'SPECIFIC_ANALYSIS'}\n              />\n              <BaselineSettingReferenceBranch\n                branchList={branchList.map(this.branchToOption)}\n                onChangeReferenceBranch={this.handleSelectReferenceBranch}\n                onSelect={this.handleSelectSetting}\n                referenceBranch={referenceBranch}\n                selected={selected === 'REFERENCE_BRANCH'}\n                settingLevel=\"branch\"\n              />\n            </div>\n            {selected === 'SPECIFIC_ANALYSIS' && (\n              <BranchAnalysisList\n                analysis={analysis}\n                branch={branch.name}\n                component={this.props.component}\n                onSelectAnalysis={this.handleSelectAnalysis}\n              />\n            )}\n          </div>\n          <footer className=\"modal-foot\">\n            <DeferredSpinner className=\"spacer-right\" loading={saving} />\n            <SubmitButton disabled={!isChanged || saving || !isValid}>\n              {translate('save')}\n            </SubmitButton>\n            <ResetButtonLink onClick={this.props.onClose}>{translate('cancel')}</ResetButtonLink>\n          </footer>\n        </form>\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport ActionsDropdown, {\n  ActionsDropdownItem\n} from 'sonar-ui-common/components/controls/ActionsDropdown';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport WarningIcon from 'sonar-ui-common/components/icons/WarningIcon';\nimport DateTimeFormatter from 'sonar-ui-common/components/intl/DateTimeFormatter';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport BranchLikeIcon from '../../../components/icons/BranchLikeIcon';\nimport { BranchWithNewCodePeriod } from '../../../types/branch-like';\n\nexport interface BranchListRowProps {\n  branch: BranchWithNewCodePeriod;\n  existingBranches: Array<string>;\n  inheritedSetting: T.NewCodePeriod;\n  onOpenEditModal: (branch: BranchWithNewCodePeriod) => void;\n  onResetToDefault: (branchName: string) => void;\n}\n\nfunction renderNewCodePeriodSetting(newCodePeriod: T.NewCodePeriod) {\n  switch (newCodePeriod.type) {\n    case 'SPECIFIC_ANALYSIS':\n      return (\n        <>\n          {`${translate('baseline.specific_analysis')}: `}\n          {newCodePeriod.effectiveValue ? (\n            <DateTimeFormatter date={newCodePeriod.effectiveValue} />\n          ) : (\n            '?'\n          )}\n        </>\n      );\n    case 'NUMBER_OF_DAYS':\n      return `${translate('baseline.number_days')}: ${newCodePeriod.value}`;\n    case 'PREVIOUS_VERSION':\n      return translate('baseline.previous_version');\n    case 'REFERENCE_BRANCH':\n      return `${translate('baseline.reference_branch')}: ${newCodePeriod.value}`;\n    default:\n      return newCodePeriod.type;\n  }\n}\n\nfunction branchInheritsItselfAsReference(\n  branch: BranchWithNewCodePeriod,\n  inheritedSetting: T.NewCodePeriod\n) {\n  return (\n    !branch.newCodePeriod &&\n    inheritedSetting.type === 'REFERENCE_BRANCH' &&\n    branch.name === inheritedSetting.value\n  );\n}\n\nfunction referenceBranchDoesNotExist(\n  branch: BranchWithNewCodePeriod,\n  existingBranches: Array<string>\n) {\n  return (\n    branch.newCodePeriod &&\n    branch.newCodePeriod.value &&\n    branch.newCodePeriod.type === 'REFERENCE_BRANCH' &&\n    !existingBranches.includes(branch.newCodePeriod.value)\n  );\n}\n\nexport default function BranchListRow(props: BranchListRowProps) {\n  const { branch, existingBranches, inheritedSetting } = props;\n\n  let settingWarning: string | undefined;\n  if (branchInheritsItselfAsReference(branch, inheritedSetting)) {\n    settingWarning = translateWithParameters(\n      'baseline.reference_branch.invalid_branch_setting',\n      branch.name\n    );\n  } else if (referenceBranchDoesNotExist(branch, existingBranches)) {\n    settingWarning = translateWithParameters(\n      'baseline.reference_branch.does_not_exist',\n      branch.newCodePeriod?.value || ''\n    );\n  }\n\n  return (\n    <tr className={settingWarning ? 'branch-setting-warning' : ''}>\n      <td className=\"nowrap\">\n        <BranchLikeIcon branchLike={branch} className=\"little-spacer-right\" />\n        {branch.name}\n        {branch.isMain && (\n          <div className=\"badge spacer-left\">{translate('branches.main_branch')}</div>\n        )}\n      </td>\n      <td className=\"huge-spacer-right nowrap\">\n        <Tooltip overlay={settingWarning}>\n          <span>\n            {settingWarning && <WarningIcon className=\"little-spacer-right\" />}\n            {branch.newCodePeriod\n              ? renderNewCodePeriodSetting(branch.newCodePeriod)\n              : translate('branch_list.default_setting')}\n          </span>\n        </Tooltip>\n      </td>\n      <td className=\"text-right\">\n        <ActionsDropdown>\n          <ActionsDropdownItem onClick={() => props.onOpenEditModal(branch)}>\n            {translate('edit')}\n          </ActionsDropdownItem>\n          {branch.newCodePeriod && (\n            <ActionsDropdownItem onClick={() => props.onResetToDefault(branch.name)}>\n              {translate('reset_to_default')}\n            </ActionsDropdownItem>\n          )}\n        </ActionsDropdown>\n      </td>\n    </tr>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { listBranchesNewCodePeriod, resetNewCodePeriod } from '../../../api/newCodePeriod';\nimport { isBranch, sortBranches } from '../../../helpers/branch-like';\nimport { Branch, BranchLike, BranchWithNewCodePeriod } from '../../../types/branch-like';\nimport BranchBaselineSettingModal from './BranchBaselineSettingModal';\nimport BranchListRow from './BranchListRow';\n\ninterface Props {\n  branchList: Branch[];\n  component: T.Component;\n  inheritedSetting: T.NewCodePeriod;\n}\n\ninterface State {\n  branches: BranchWithNewCodePeriod[];\n  editedBranch?: BranchWithNewCodePeriod;\n  loading: boolean;\n}\n\nexport default class BranchList extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    branches: [],\n    loading: true\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchBranches();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  sortAndFilterBranches(branchLikes: BranchLike[] = []) {\n    return sortBranches(branchLikes.filter(isBranch));\n  }\n\n  fetchBranches() {\n    const project = this.props.component.key;\n    this.setState({ loading: true });\n\n    listBranchesNewCodePeriod({ project }).then(\n      branchSettings => {\n        const newCodePeriods = branchSettings.newCodePeriods\n          ? branchSettings.newCodePeriods.filter(ncp => !ncp.inherited)\n          : [];\n\n        const branchesWithBaseline = this.props.branchList.map(b => {\n          const newCodePeriod = newCodePeriods.find(ncp => ncp.branchKey === b.name);\n          if (!newCodePeriod) {\n            return b;\n          }\n          const { type = 'PREVIOUS_VERSION', value, effectiveValue } = newCodePeriod;\n          return {\n            ...b,\n            newCodePeriod: { type, value, effectiveValue }\n          };\n        });\n\n        this.setState({ branches: branchesWithBaseline, loading: false });\n      },\n      () => {\n        this.setState({ loading: false });\n      }\n    );\n  }\n\n  updateBranchNewCodePeriod = (branch: string, newSetting: T.NewCodePeriod | undefined) => {\n    const { branches } = this.state;\n\n    const updated = branches.find(b => b.name === branch);\n    if (updated) {\n      updated.newCodePeriod = newSetting;\n    }\n    return branches.slice(0);\n  };\n\n  openEditModal = (branch: BranchWithNewCodePeriod) => {\n    this.setState({ editedBranch: branch });\n  };\n\n  closeEditModal = (branch?: string, newSetting?: T.NewCodePeriod) => {\n    if (branch) {\n      this.setState({\n        branches: this.updateBranchNewCodePeriod(branch, newSetting),\n        editedBranch: undefined\n      });\n    } else {\n      this.setState({ editedBranch: undefined });\n    }\n  };\n\n  resetToDefault = (branch: string) => {\n    return resetNewCodePeriod({\n      project: this.props.component.key,\n      branch\n    }).then(() => {\n      this.setState({ branches: this.updateBranchNewCodePeriod(branch, undefined) });\n    });\n  };\n\n  render() {\n    const { branchList, inheritedSetting } = this.props;\n    const { branches, editedBranch, loading } = this.state;\n\n    if (branches.length < 1) {\n      return null;\n    }\n\n    if (loading) {\n      return <DeferredSpinner />;\n    }\n\n    return (\n      <>\n        <table className=\"data zebra\">\n          <thead>\n            <tr>\n              <th>{translate('branch_list.branch')}</th>\n              <th className=\"nowrap huge-spacer-right\">\n                {translate('branch_list.current_setting')}\n              </th>\n              <th className=\"thin nowrap\">{translate('branch_list.actions')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {branches.map(branch => (\n              <BranchListRow\n                branch={branch}\n                existingBranches={branchList.map(b => b.name)}\n                inheritedSetting={inheritedSetting}\n                key={branch.name}\n                onOpenEditModal={this.openEditModal}\n                onResetToDefault={this.resetToDefault}\n              />\n            ))}\n          </tbody>\n        </table>\n        {editedBranch && (\n          <BranchBaselineSettingModal\n            branch={editedBranch}\n            branchList={branchList}\n            component={this.props.component.key}\n            onClose={this.closeEditModal}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { Branch } from '../../../types/branch-like';\nimport { validateSetting } from '../utils';\nimport BaselineSettingAnalysis from './BaselineSettingAnalysis';\nimport BaselineSettingDays from './BaselineSettingDays';\nimport BaselineSettingPreviousVersion from './BaselineSettingPreviousVersion';\nimport BaselineSettingReferenceBranch from './BaselineSettingReferenceBranch';\nimport BranchAnalysisList from './BranchAnalysisList';\n\nexport interface ProjectBaselineSelectorProps {\n  analysis?: string;\n  branchList: Branch[];\n  branchesEnabled?: boolean;\n  component: string;\n  currentSetting?: T.NewCodePeriodSettingType;\n  currentSettingValue?: string;\n  days: string;\n  generalSetting: T.NewCodePeriod;\n  onCancel: () => void;\n  onSelectAnalysis: (analysis: T.ParsedAnalysis) => void;\n  onSelectDays: (value: string) => void;\n  onSelectReferenceBranch: (value: string) => void;\n  onSelectSetting: (value?: T.NewCodePeriodSettingType) => void;\n  onSubmit: (e: React.SyntheticEvent<HTMLFormElement>) => void;\n  onToggleSpecificSetting: (selection: boolean) => void;\n  referenceBranch?: string;\n  saving: boolean;\n  selected?: T.NewCodePeriodSettingType;\n  overrideGeneralSetting: boolean;\n}\n\nfunction renderGeneralSetting(generalSetting: T.NewCodePeriod) {\n  let setting: string;\n  let description: string;\n  if (generalSetting.type === 'NUMBER_OF_DAYS') {\n    setting = `${translate('baseline.number_days')} (${translateWithParameters(\n      'duration.days',\n      generalSetting.value || '?'\n    )})`;\n    description = translate('baseline.number_days.description');\n  } else {\n    setting = translate('baseline.previous_version');\n    description = translate('baseline.previous_version.description');\n  }\n\n  return (\n    <div className=\"general-setting\">\n      <strong>{setting}</strong>: {description}\n    </div>\n  );\n}\n\nfunction branchToOption(b: Branch) {\n  return { value: b.name, isMain: b.isMain };\n}\n\nexport default function ProjectBaselineSelector(props: ProjectBaselineSelectorProps) {\n  const {\n    analysis,\n    branchList,\n    branchesEnabled,\n    component,\n    currentSetting,\n    currentSettingValue,\n    days,\n    generalSetting,\n    overrideGeneralSetting,\n    referenceBranch,\n    saving,\n    selected\n  } = props;\n\n  const { isChanged, isValid } = validateSetting({\n    analysis,\n    currentSetting,\n    currentSettingValue,\n    days,\n    overrideGeneralSetting,\n    referenceBranch,\n    selected\n  });\n\n  return (\n    <form className=\"project-baseline-selector\" onSubmit={props.onSubmit}>\n      <div className=\"big-spacer-top spacer-bottom\" role=\"radiogroup\">\n        <Radio\n          checked={!overrideGeneralSetting}\n          className=\"big-spacer-bottom\"\n          onCheck={() => props.onToggleSpecificSetting(false)}\n          value=\"general\">\n          {translate('project_baseline.general_setting')}\n        </Radio>\n        <div className=\"big-spacer-left\">{renderGeneralSetting(generalSetting)}</div>\n\n        <Radio\n          checked={overrideGeneralSetting}\n          className=\"huge-spacer-top\"\n          onCheck={() => props.onToggleSpecificSetting(true)}\n          value=\"specific\">\n          {translate('project_baseline.specific_setting')}\n        </Radio>\n      </div>\n\n      <div className=\"big-spacer-left big-spacer-right project-baseline-setting\">\n        <div className=\"display-flex-row big-spacer-bottom\" role=\"radiogroup\">\n          <BaselineSettingPreviousVersion\n            disabled={!overrideGeneralSetting}\n            onSelect={props.onSelectSetting}\n            selected={overrideGeneralSetting && selected === 'PREVIOUS_VERSION'}\n          />\n          <BaselineSettingDays\n            days={days}\n            disabled={!overrideGeneralSetting}\n            isChanged={isChanged}\n            isValid={isValid}\n            onChangeDays={props.onSelectDays}\n            onSelect={props.onSelectSetting}\n            selected={overrideGeneralSetting && selected === 'NUMBER_OF_DAYS'}\n          />\n          {branchesEnabled ? (\n            <BaselineSettingReferenceBranch\n              branchList={branchList.map(branchToOption)}\n              disabled={!overrideGeneralSetting}\n              onChangeReferenceBranch={props.onSelectReferenceBranch}\n              onSelect={props.onSelectSetting}\n              referenceBranch={referenceBranch || ''}\n              selected={overrideGeneralSetting && selected === 'REFERENCE_BRANCH'}\n              settingLevel=\"project\"\n            />\n          ) : (\n            <BaselineSettingAnalysis\n              disabled={!overrideGeneralSetting}\n              onSelect={props.onSelectSetting}\n              selected={overrideGeneralSetting && selected === 'SPECIFIC_ANALYSIS'}\n            />\n          )}\n        </div>\n        {selected === 'SPECIFIC_ANALYSIS' && (\n          <BranchAnalysisList\n            analysis={analysis || ''}\n            branch=\"master\"\n            component={component}\n            onSelectAnalysis={props.onSelectAnalysis}\n          />\n        )}\n      </div>\n      <div className={classNames('big-spacer-top', { invisible: !isChanged })}>\n        <Alert variant=\"info\" className=\"spacer-bottom\">\n          {translate('baseline.next_analysis_notice')}\n        </Alert>\n        <DeferredSpinner className=\"spacer-right\" loading={saving} />\n        <SubmitButton disabled={saving || !isValid || !isChanged}>{translate('save')}</SubmitButton>\n        <ResetButtonLink className=\"spacer-left\" onClick={props.onCancel}>\n          {translate('cancel')}\n        </ResetButtonLink>\n      </div>\n    </form>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport { debounce } from 'lodash';\nimport * as React from 'react';\nimport AlertSuccessIcon from 'sonar-ui-common/components/icons/AlertSuccessIcon';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getNewCodePeriod, resetNewCodePeriod, setNewCodePeriod } from '../../../api/newCodePeriod';\nimport Suggestions from '../../../app/components/embed-docs-modal/Suggestions';\nimport { isBranch, sortBranches } from '../../../helpers/branch-like';\nimport { Branch, BranchLike } from '../../../types/branch-like';\nimport '../styles.css';\nimport { getSettingValue } from '../utils';\nimport AppHeader from './AppHeader';\nimport BranchList from './BranchList';\nimport ProjectBaselineSelector from './ProjectBaselineSelector';\n\ninterface Props {\n  branchLikes: BranchLike[];\n  branchesEnabled?: boolean;\n  canAdmin?: boolean;\n  component: T.Component;\n}\n\ninterface State {\n  analysis?: string;\n  branchList: Branch[];\n  currentSetting?: T.NewCodePeriodSettingType;\n  currentSettingValue?: string;\n  days: string;\n  generalSetting?: T.NewCodePeriod;\n  loading: boolean;\n  overrideGeneralSetting?: boolean;\n  referenceBranch?: string;\n  saving: boolean;\n  selected?: T.NewCodePeriodSettingType;\n  success?: boolean;\n}\n\nconst DEFAULT_NUMBER_OF_DAYS = '30';\n\nconst DEFAULT_GENERAL_SETTING: { type: T.NewCodePeriodSettingType } = {\n  type: 'PREVIOUS_VERSION'\n};\n\nexport default class App extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    branchList: [],\n    days: DEFAULT_NUMBER_OF_DAYS,\n    loading: true,\n    saving: false\n  };\n\n  // We use debounce as we could have multiple save in less that 3sec.\n  resetSuccess = debounce(() => this.setState({ success: undefined }), 3000);\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchLeakPeriodSetting();\n    this.sortAndFilterBranches(this.props.branchLikes);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.branchLikes !== this.props.branchLikes) {\n      this.sortAndFilterBranches(this.props.branchLikes);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  getUpdatedState(params: {\n    currentSetting?: T.NewCodePeriodSettingType;\n    currentSettingValue?: string;\n    generalSetting: T.NewCodePeriod;\n  }) {\n    const { currentSetting, currentSettingValue, generalSetting } = params;\n    const { referenceBranch } = this.state;\n\n    const defaultDays =\n      (generalSetting.type === 'NUMBER_OF_DAYS' && generalSetting.value) || DEFAULT_NUMBER_OF_DAYS;\n\n    return {\n      loading: false,\n      currentSetting,\n      currentSettingValue,\n      generalSetting,\n      selected: currentSetting || generalSetting.type,\n      overrideGeneralSetting: Boolean(currentSetting),\n      days: (currentSetting === 'NUMBER_OF_DAYS' && currentSettingValue) || defaultDays,\n      analysis: (currentSetting === 'SPECIFIC_ANALYSIS' && currentSettingValue) || '',\n      referenceBranch:\n        (currentSetting === 'REFERENCE_BRANCH' && currentSettingValue) || referenceBranch\n    };\n  }\n\n  sortAndFilterBranches(branchLikes: BranchLike[] = []) {\n    const branchList = sortBranches(branchLikes.filter(isBranch));\n    this.setState({ branchList, referenceBranch: branchList[0].name });\n  }\n\n  fetchLeakPeriodSetting() {\n    this.setState({ loading: true });\n\n    Promise.all([\n      getNewCodePeriod(),\n      getNewCodePeriod({\n        branch: !this.props.branchesEnabled ? 'master' : undefined,\n        project: this.props.component.key\n      })\n    ]).then(\n      ([generalSetting, setting]) => {\n        if (this.mounted) {\n          if (!generalSetting.type) {\n            generalSetting = DEFAULT_GENERAL_SETTING;\n          }\n          const currentSettingValue = setting.value;\n          const currentSetting = setting.inherited ? undefined : setting.type || 'PREVIOUS_VERSION';\n\n          this.setState(\n            this.getUpdatedState({\n              generalSetting,\n              currentSetting,\n              currentSettingValue\n            })\n          );\n        }\n      },\n      () => {\n        this.setState({ loading: false });\n      }\n    );\n  }\n\n  resetSetting = () => {\n    this.setState({ saving: true });\n    resetNewCodePeriod({ project: this.props.component.key }).then(\n      () => {\n        this.setState({\n          saving: false,\n          currentSetting: undefined,\n          selected: undefined,\n          success: true\n        });\n        this.resetSuccess();\n      },\n      () => {\n        this.setState({ saving: false });\n      }\n    );\n  };\n\n  handleSelectAnalysis = (analysis: T.ParsedAnalysis) => this.setState({ analysis: analysis.key });\n\n  handleSelectDays = (days: string) => this.setState({ days });\n\n  handleSelectReferenceBranch = (referenceBranch: string) => {\n    this.setState({ referenceBranch });\n  };\n\n  handleCancel = () =>\n    this.setState(\n      ({ generalSetting = DEFAULT_GENERAL_SETTING, currentSetting, currentSettingValue }) =>\n        this.getUpdatedState({ generalSetting, currentSetting, currentSettingValue })\n    );\n\n  handleSelectSetting = (selected?: T.NewCodePeriodSettingType) => this.setState({ selected });\n\n  handleToggleSpecificSetting = (overrideGeneralSetting: boolean) =>\n    this.setState({ overrideGeneralSetting });\n\n  handleSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const { component } = this.props;\n    const { analysis, days, selected: type, referenceBranch, overrideGeneralSetting } = this.state;\n\n    if (!overrideGeneralSetting) {\n      this.resetSetting();\n      return;\n    }\n\n    const value = getSettingValue({ type, analysis, days, referenceBranch });\n\n    if (type) {\n      this.setState({ saving: true });\n      setNewCodePeriod({\n        project: component.key,\n        type,\n        value\n      }).then(\n        () => {\n          this.setState({\n            saving: false,\n            currentSetting: type,\n            currentSettingValue: value || undefined,\n            success: true\n          });\n          this.resetSuccess();\n        },\n        () => {\n          this.setState({ saving: false });\n        }\n      );\n    }\n  };\n\n  render() {\n    const { branchesEnabled, canAdmin, component } = this.props;\n    const {\n      analysis,\n      branchList,\n      currentSetting,\n      days,\n      generalSetting,\n      loading,\n      currentSettingValue,\n      overrideGeneralSetting,\n      referenceBranch,\n      saving,\n      selected,\n      success\n    } = this.state;\n\n    return (\n      <>\n        <Suggestions suggestions=\"project_baseline\" />\n        <div className=\"page page-limited\">\n          <AppHeader canAdmin={!!canAdmin} />\n          {loading ? (\n            <DeferredSpinner />\n          ) : (\n            <div className=\"panel-white project-baseline\">\n              {branchesEnabled && <h2>{translate('project_baseline.default_setting')}</h2>}\n\n              {generalSetting && overrideGeneralSetting !== undefined && (\n                <ProjectBaselineSelector\n                  analysis={analysis}\n                  branchList={branchList}\n                  branchesEnabled={branchesEnabled}\n                  component={component.key}\n                  currentSetting={currentSetting}\n                  currentSettingValue={currentSettingValue}\n                  days={days}\n                  generalSetting={generalSetting}\n                  onCancel={this.handleCancel}\n                  onSelectAnalysis={this.handleSelectAnalysis}\n                  onSelectDays={this.handleSelectDays}\n                  onSelectReferenceBranch={this.handleSelectReferenceBranch}\n                  onSelectSetting={this.handleSelectSetting}\n                  onSubmit={this.handleSubmit}\n                  onToggleSpecificSetting={this.handleToggleSpecificSetting}\n                  overrideGeneralSetting={overrideGeneralSetting}\n                  referenceBranch={referenceBranch}\n                  saving={saving}\n                  selected={selected}\n                />\n              )}\n\n              <div className={classNames('spacer-top', { invisible: saving || !success })}>\n                <span className=\"text-success\">\n                  <AlertSuccessIcon className=\"spacer-right\" />\n                  {translate('settings.state.saved')}\n                </span>\n              </div>\n              {generalSetting && branchesEnabled && (\n                <div className=\"huge-spacer-top branch-baseline-selector\">\n                  <hr />\n                  <h2>{translate('project_baseline.configure_branches')}</h2>\n                  <BranchList\n                    branchList={branchList}\n                    component={component}\n                    inheritedSetting={\n                      currentSetting\n                        ? {\n                            type: currentSetting,\n                            value: currentSettingValue\n                          }\n                        : generalSetting\n                    }\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { connect } from 'react-redux';\nimport { getAppState, Store } from '../../../store/rootReducer';\nimport App from './App';\n\nconst mapStateToProps = (state: Store) => ({\n  branchesEnabled: getAppState(state).branchesEnabled,\n  canAdmin: getAppState(state).canAdmin\n});\n\nexport default connect(mapStateToProps)(App);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { SuggestionsContext } from './SuggestionsContext';\n\ninterface Props {\n  suggestions: string;\n}\n\nexport default function Suggestions({ suggestions }: Props) {\n  return (\n    <SuggestionsContext.Consumer>\n      {({ addSuggestions, removeSuggestions }) => (\n        <SuggestionsInner\n          addSuggestions={addSuggestions}\n          removeSuggestions={removeSuggestions}\n          suggestions={suggestions}\n        />\n      )}\n    </SuggestionsContext.Consumer>\n  );\n}\n\ninterface SuggestionsInnerProps {\n  addSuggestions: (key: string) => void;\n  removeSuggestions: (key: string) => void;\n  suggestions: string;\n}\n\nclass SuggestionsInner extends React.PureComponent<SuggestionsInnerProps> {\n  componentDidMount() {\n    this.props.addSuggestions(this.props.suggestions);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.suggestions !== this.props.suggestions) {\n      this.props.removeSuggestions(this.props.suggestions);\n      this.props.addSuggestions(prevProps.suggestions);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.removeSuggestions(this.props.suggestions);\n  }\n\n  render() {\n    return null;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { chunk, flatMap, groupBy, sortBy } from 'lodash';\nimport { getLocalizedMetricName, translate } from 'sonar-ui-common/helpers/l10n';\nimport { get, save } from 'sonar-ui-common/helpers/storage';\nimport { localizeMetric } from '../../helpers/measures';\nimport { MetricKey } from '../../types/metrics';\nimport { GraphType, MeasureHistory, Serie } from '../../types/project-activity';\n\nexport const DEFAULT_GRAPH = GraphType.issues;\n\nconst GRAPHS_METRICS_DISPLAYED: T.Dict<string[]> = {\n  [GraphType.issues]: [MetricKey.bugs, MetricKey.code_smells, MetricKey.vulnerabilities],\n  [GraphType.coverage]: [MetricKey.lines_to_cover, MetricKey.uncovered_lines],\n  [GraphType.duplications]: [MetricKey.ncloc, MetricKey.duplicated_lines]\n};\n\nconst GRAPHS_METRICS: T.Dict<string[]> = {\n  [GraphType.issues]: GRAPHS_METRICS_DISPLAYED[GraphType.issues].concat([\n    MetricKey.reliability_rating,\n    MetricKey.security_rating,\n    MetricKey.sqale_rating\n  ]),\n  [GraphType.coverage]: [...GRAPHS_METRICS_DISPLAYED[GraphType.coverage], MetricKey.coverage],\n  [GraphType.duplications]: [\n    ...GRAPHS_METRICS_DISPLAYED[GraphType.duplications],\n    MetricKey.duplicated_lines_density\n  ]\n};\n\nexport function isCustomGraph(graph: GraphType) {\n  return graph === GraphType.custom;\n}\n\nexport function getGraphTypes(ignoreCustom = false) {\n  const graphs = [GraphType.issues, GraphType.coverage, GraphType.duplications];\n  return ignoreCustom ? graphs : [...graphs, GraphType.custom];\n}\n\nexport function hasDataValues(serie: Serie) {\n  return serie.data.some(point => Boolean(point.y || point.y === 0));\n}\n\nexport function hasHistoryData(series: Serie[]) {\n  return series.some(serie => serie.data && serie.data.length > 1);\n}\n\nexport function getSeriesMetricType(series: Serie[]) {\n  return series.length > 0 ? series[0].type : 'INT';\n}\n\nexport function getDisplayedHistoryMetrics(graph: GraphType, customMetrics: string[]) {\n  return isCustomGraph(graph) ? customMetrics : GRAPHS_METRICS_DISPLAYED[graph];\n}\n\nexport function getHistoryMetrics(graph: GraphType, customMetrics: string[]) {\n  return isCustomGraph(graph) ? customMetrics : GRAPHS_METRICS[graph];\n}\n\nexport function hasHistoryDataValue(series: Serie[]) {\n  return series.some(serie => serie.data && serie.data.length > 1 && hasDataValues(serie));\n}\n\nexport function splitSeriesInGraphs(series: Serie[], maxGraph: number, maxSeries: number) {\n  return flatMap(\n    groupBy(series, serie => serie.type),\n    type => chunk(type, maxSeries)\n  ).slice(0, maxGraph);\n}\n\nexport function generateCoveredLinesMetric(\n  uncoveredLines: MeasureHistory,\n  measuresHistory: MeasureHistory[]\n) {\n  const linesToCover = measuresHistory.find(measure => measure.metric === MetricKey.lines_to_cover);\n  return {\n    data: linesToCover\n      ? uncoveredLines.history.map((analysis, idx) => ({\n          x: analysis.date,\n          y: Number(linesToCover.history[idx].value) - Number(analysis.value)\n        }))\n      : [],\n    name: 'covered_lines',\n    translatedName: translate('project_activity.custom_metric.covered_lines'),\n    type: 'INT'\n  };\n}\n\nexport function generateSeries(\n  measuresHistory: MeasureHistory[],\n  graph: GraphType,\n  metrics: T.Metric[] | T.Dict<T.Metric>,\n  displayedMetrics: string[]\n): Serie[] {\n  if (displayedMetrics.length <= 0 || measuresHistory === undefined) {\n    return [];\n  }\n  return sortBy(\n    measuresHistory\n      .filter(measure => displayedMetrics.indexOf(measure.metric) >= 0)\n      .map(measure => {\n        if (measure.metric === MetricKey.uncovered_lines && !isCustomGraph(graph)) {\n          return generateCoveredLinesMetric(measure, measuresHistory);\n        }\n        const metric = findMetric(measure.metric, metrics);\n        return {\n          data: measure.history.map(analysis => ({\n            x: analysis.date,\n            y: metric && metric.type === 'LEVEL' ? analysis.value : Number(analysis.value)\n          })),\n          name: measure.metric,\n          translatedName: metric ? getLocalizedMetricName(metric) : localizeMetric(measure.metric),\n          type: metric ? metric.type : 'INT'\n        };\n      }),\n    serie =>\n      displayedMetrics.indexOf(serie.name === 'covered_lines' ? 'uncovered_lines' : serie.name)\n  );\n}\n\nexport function saveActivityGraph(\n  namespace: string,\n  project: string,\n  graph: GraphType,\n  metrics: string[] = []\n) {\n  save(namespace, graph, project);\n  if (isCustomGraph(graph)) {\n    save(`${namespace}.custom`, metrics.join(','), project);\n  }\n}\n\nexport function getActivityGraph(\n  namespace: string,\n  project: string\n): { graph: GraphType; customGraphs: string[] } {\n  const customGraphs = get(`${namespace}.custom`, project);\n  return {\n    graph: (get(namespace, project) as GraphType) || DEFAULT_GRAPH,\n    customGraphs: customGraphs ? customGraphs.split(',') : []\n  };\n}\n\nfunction findMetric(key: string, metrics: T.Metric[] | T.Dict<T.Metric>) {\n  if (Array.isArray(metrics)) {\n    return metrics.find(metric => metric.key === key);\n  }\n  return metrics[key];\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport enum GraphType {\n  issues = 'issues',\n  coverage = 'coverage',\n  duplications = 'duplications',\n  custom = 'custom'\n}\n\nexport interface HistoryItem {\n  date: Date;\n  value?: string;\n}\n\nexport interface MeasureHistory {\n  metric: string;\n  history: HistoryItem[];\n}\n\nexport interface Serie {\n  data: Point[];\n  name: string;\n  translatedName: string;\n  type: string;\n}\n\nexport interface Point {\n  x: Date;\n  y: number | string | undefined;\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport BranchIcon from 'sonar-ui-common/components/icons/BranchIcon';\nimport { IconProps } from 'sonar-ui-common/components/icons/Icon';\nimport PullRequestIcon from 'sonar-ui-common/components/icons/PullRequestIcon';\nimport { isPullRequest } from '../../helpers/branch-like';\nimport { BranchLike } from '../../types/branch-like';\n\nexport interface BranchLikeIconProps extends IconProps {\n  branchLike: BranchLike;\n}\n\nexport default function BranchLikeIcon({ branchLike, ...props }: BranchLikeIconProps) {\n  if (isPullRequest(branchLike)) {\n    return <PullRequestIcon {...props} />;\n  } else {\n    return <BranchIcon {...props} />;\n  }\n}\n"],"sourceRoot":""}